export { TooltipProps } from './Tooltip';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sVisible: boolean;
        };
        $props: Partial<{
            children: unknown[];
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            placement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            onVisibleChange: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            overlayClassName: string;
            overlayStyle: {
                [key: string]: any;
            };
            openClassName: string;
            autoAdjustOverflow: boolean | {
                [key: string]: any;
            };
            arrowPointAtCenter: boolean;
            destroyTooltipOnHide: boolean;
        }> & Omit<Readonly<{
            children: unknown[];
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            placement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            onVisibleChange: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            overlayClassName: string;
            overlayStyle: {
                [key: string]: any;
            };
            openClassName: string;
            autoAdjustOverflow: boolean | {
                [key: string]: any;
            };
            arrowPointAtCenter: boolean;
            destroyTooltipOnHide: boolean;
        } & {
            title?: import("../_util/type").VueNode;
            visible?: boolean;
            defaultVisible?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "children" | "prefixCls" | "color" | "align" | "transitionName" | "getPopupContainer" | "builtinPlacements" | "mouseEnterDelay" | "mouseLeaveDelay" | "placement" | "onVisibleChange" | "onUpdate:visible" | "trigger" | "overlayClassName" | "overlayStyle" | "openClassName" | "autoAdjustOverflow" | "arrowPointAtCenter" | "destroyTooltipOnHide">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "visibleChange" | "update:visible", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            children: unknown[];
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            placement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            onVisibleChange: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            overlayClassName: string;
            overlayStyle: {
                [key: string]: any;
            };
            openClassName: string;
            autoAdjustOverflow: boolean | {
                [key: string]: any;
            };
            arrowPointAtCenter: boolean;
            destroyTooltipOnHide: boolean;
        } & {
            title?: import("../_util/type").VueNode;
            visible?: boolean;
            defaultVisible?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            sVisible: boolean;
        }, {}, {
            handleVisibleChange(visible: boolean): void;
            getPopupDomNode(): any;
            getPlacements(): {
                [key: string]: any;
            };
            getDisabledCompatibleChildren(ele: any): any;
            isNoTitle(): boolean;
            getOverlay(): any;
            onPopupAlign(domNode: HTMLElement, align: any): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("visibleChange" | "update:visible")[], string, {
            children: unknown[];
            prefixCls: string;
            color: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            builtinPlacements: {
                [key: string]: any;
            };
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            placement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            onVisibleChange: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            overlayClassName: string;
            overlayStyle: {
                [key: string]: any;
            };
            openClassName: string;
            autoAdjustOverflow: boolean | {
                [key: string]: any;
            };
            arrowPointAtCenter: boolean;
            destroyTooltipOnHide: boolean;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        children: unknown[];
        prefixCls: string;
        color: string;
        align: {
            [key: string]: any;
        };
        transitionName: string;
        getPopupContainer: (...args: any[]) => any;
        builtinPlacements: {
            [key: string]: any;
        };
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        placement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
        onVisibleChange: (...args: any[]) => any;
        "onUpdate:visible": (...args: any[]) => any;
        trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
        overlayClassName: string;
        overlayStyle: {
            [key: string]: any;
        };
        openClassName: string;
        autoAdjustOverflow: boolean | {
            [key: string]: any;
        };
        arrowPointAtCenter: boolean;
        destroyTooltipOnHide: boolean;
    } & {
        title?: import("../_util/type").VueNode;
        visible?: boolean;
        defaultVisible?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        sVisible: boolean;
    } & {} & {
        handleVisibleChange(visible: boolean): void;
        getPopupDomNode(): any;
        getPlacements(): {
            [key: string]: any;
        };
        getDisabledCompatibleChildren(ele: any): any;
        isNoTitle(): boolean;
        getOverlay(): any;
        onPopupAlign(domNode: HTMLElement, align: any): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    children: unknown[];
    prefixCls: string;
    color: string;
    align: {
        [key: string]: any;
    };
    transitionName: string;
    getPopupContainer: (...args: any[]) => any;
    builtinPlacements: {
        [key: string]: any;
    };
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    placement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    onVisibleChange: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
    overlayClassName: string;
    overlayStyle: {
        [key: string]: any;
    };
    openClassName: string;
    autoAdjustOverflow: boolean | {
        [key: string]: any;
    };
    arrowPointAtCenter: boolean;
    destroyTooltipOnHide: boolean;
} & {
    title?: import("../_util/type").VueNode;
    visible?: boolean;
    defaultVisible?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    sVisible: boolean;
}, {}, {
    handleVisibleChange(visible: boolean): void;
    getPopupDomNode(): any;
    getPlacements(): {
        [key: string]: any;
    };
    getDisabledCompatibleChildren(ele: any): any;
    isNoTitle(): boolean;
    getOverlay(): any;
    onPopupAlign(domNode: HTMLElement, align: any): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("visibleChange" | "update:visible")[], "visibleChange" | "update:visible", {
    children: unknown[];
    prefixCls: string;
    color: string;
    align: {
        [key: string]: any;
    };
    transitionName: string;
    getPopupContainer: (...args: any[]) => any;
    builtinPlacements: {
        [key: string]: any;
    };
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    placement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    onVisibleChange: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
    overlayClassName: string;
    overlayStyle: {
        [key: string]: any;
    };
    openClassName: string;
    autoAdjustOverflow: boolean | {
        [key: string]: any;
    };
    arrowPointAtCenter: boolean;
    destroyTooltipOnHide: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
