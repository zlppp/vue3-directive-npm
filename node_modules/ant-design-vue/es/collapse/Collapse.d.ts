import { CSSProperties, PropType } from 'vue';
import { VueNode } from '../_util/type';
export interface PanelProps {
    isActive?: boolean;
    header?: VueNode;
    className?: string;
    class?: string;
    style?: CSSProperties;
    showArrow?: boolean;
    forceRender?: boolean;
    disabled?: boolean;
    extra?: VueNode;
}
declare type ActiveKeyType = Array<string | number> | string | number;
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    activeKey: {
        type: PropType<ActiveKeyType>;
    };
    defaultActiveKey: {
        type: PropType<ActiveKeyType>;
    };
    accordion: import("vue-types").VueTypeValidableDef<boolean>;
    destroyInactivePanel: import("vue-types").VueTypeValidableDef<boolean>;
    bordered: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    openAnimation: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    expandIconPosition: import("vue-types").VueTypeDef<"left" | "right"> & {
        default: "left" | "right";
    };
    'onUpdate:activeKey': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    renderExpandIcon(panelProps: PanelProps, prefixCls: string): any;
    handleChange(activeKey: ActiveKeyType): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    bordered: boolean;
    expandIcon: (...args: any[]) => any;
    openAnimation: {
        [key: string]: any;
    };
    expandIconPosition: "left" | "right";
    "onUpdate:activeKey": (...args: any[]) => any;
} & {
    activeKey?: ActiveKeyType;
    defaultActiveKey?: ActiveKeyType;
    accordion?: boolean;
    destroyInactivePanel?: boolean;
}>, {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    bordered: boolean;
    expandIcon: (...args: any[]) => any;
    openAnimation: {
        [key: string]: any;
    };
    expandIconPosition: "left" | "right";
    "onUpdate:activeKey": (...args: any[]) => any;
}>;
export default _default;
