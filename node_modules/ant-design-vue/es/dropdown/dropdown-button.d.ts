import { VNode } from 'vue';
declare const DropdownButtonProps: {
    type: import("vue-types").VueTypeDef<"default" | "dashed" | "primary" | "ghost" | "danger"> & {
        default: "default" | "dashed" | "primary" | "ghost" | "danger";
    };
    size: import("vue-types").VueTypeDef<"default" | "small" | "large"> & {
        default: "default" | "small" | "large";
    };
    htmlType: import("vue-types").VueTypeDef<"button" | "reset" | "submit"> & {
        default: "button" | "reset" | "submit";
    };
    href: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter"> & {
        default: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
    };
    icon: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    trigger: {
        type: import("vue").PropType<("click" | "contextmenu" | "hover")[]>;
        default: () => string[];
    };
    overlay: import("vue-types").VueTypeValidableDef<any>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    openClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    minOverlayWidthMatchTrigger: import("vue-types").VueTypeValidableDef<boolean>;
};
export { DropdownButtonProps };
declare const _default: import("vue").DefineComponent<{
    type: import("vue-types").VueTypeDef<"default" | "dashed" | "primary" | "ghost" | "danger"> & {
        default: "default" | "dashed" | "primary" | "ghost" | "danger";
    };
    size: import("vue-types").VueTypeDef<"default" | "small" | "large"> & {
        default: "default" | "small" | "large";
    };
    htmlType: import("vue-types").VueTypeDef<"button" | "reset" | "submit"> & {
        default: "button" | "reset" | "submit";
    };
    href: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    placement: import("vue-types").VueTypeDef<"bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter"> & {
        default: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
    };
    icon: import("vue-types").VueTypeValidableDef<any>;
    title: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    trigger: {
        type: import("vue").PropType<("click" | "contextmenu" | "hover")[]>;
        default: () => string[];
    };
    overlay: import("vue-types").VueTypeValidableDef<any>;
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    forceRender: import("vue-types").VueTypeValidableDef<boolean>;
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    openClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    minOverlayWidthMatchTrigger: import("vue-types").VueTypeValidableDef<boolean>;
}, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    popupRef: any;
}, unknown, {}, {
    savePopupRef(ref: VNode): void;
    handleClick(e: Event): void;
    handleVisibleChange(val: boolean): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "visibleChange" | "update:visible")[], "click" | "visibleChange" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title: string;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    size: "default" | "small" | "large";
    align: {
        [key: string]: any;
    };
    type: "default" | "dashed" | "primary" | "ghost" | "danger";
    transitionName: string;
    getPopupContainer: (...args: any[]) => any;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    href: string;
    htmlType: "button" | "reset" | "submit";
    placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
    onVisibleChange: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    trigger: ("click" | "contextmenu" | "hover")[];
    overlayClassName: string;
    openClassName: string;
} & {
    icon?: any;
    visible?: boolean;
    overlay?: any;
    disabled?: boolean;
    forceRender?: boolean;
    overlayStyle?: import("vue").CSSProperties;
    minOverlayWidthMatchTrigger?: boolean;
}>, {
    title: string;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    size: "default" | "small" | "large";
    align: {
        [key: string]: any;
    };
    type: "default" | "dashed" | "primary" | "ghost" | "danger";
    transitionName: string;
    getPopupContainer: (...args: any[]) => any;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    href: string;
    htmlType: "button" | "reset" | "submit";
    placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
    onVisibleChange: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    trigger: ("click" | "contextmenu" | "hover")[];
    overlayClassName: string;
    openClassName: string;
}>;
export default _default;
