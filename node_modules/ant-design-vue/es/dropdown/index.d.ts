import { Plugin } from 'vue';
import DropdownButton from './dropdown-button';
export { DropdownProps } from './dropdown';
export { DropdownButtonProps } from './dropdown-button';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
            onVisibleChange: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            trigger: ("click" | "contextmenu" | "hover")[];
            overlayClassName: string;
            openClassName: string;
        }> & Omit<Readonly<{
            prefixCls: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
            onVisibleChange: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            trigger: ("click" | "contextmenu" | "hover")[];
            overlayClassName: string;
            openClassName: string;
        } & {
            visible?: boolean;
            overlay?: any;
            disabled?: boolean;
            forceRender?: boolean;
            overlayStyle?: import("vue").CSSProperties;
            minOverlayWidthMatchTrigger?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "align" | "transitionName" | "getPopupContainer" | "mouseEnterDelay" | "mouseLeaveDelay" | "placement" | "onVisibleChange" | "onUpdate:visible" | "trigger" | "overlayClassName" | "openClassName">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "visibleChange" | "update:visible", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
            onVisibleChange: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            trigger: ("click" | "contextmenu" | "hover")[];
            overlayClassName: string;
            openClassName: string;
        } & {
            visible?: boolean;
            overlay?: any;
            disabled?: boolean;
            forceRender?: boolean;
            overlayStyle?: import("vue").CSSProperties;
            minOverlayWidthMatchTrigger?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            popupRef: any;
        }, unknown, {}, {
            savePopupRef(ref: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>): void;
            getTransitionName(): string;
            renderOverlay(prefixCls: string): any;
            handleVisibleChange(val: boolean): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("visibleChange" | "update:visible")[], string, {
            prefixCls: string;
            align: {
                [key: string]: any;
            };
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
            onVisibleChange: (...args: any[]) => any;
            "onUpdate:visible": (...args: any[]) => any;
            trigger: ("click" | "contextmenu" | "hover")[];
            overlayClassName: string;
            openClassName: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        align: {
            [key: string]: any;
        };
        transitionName: string;
        getPopupContainer: (...args: any[]) => any;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
        onVisibleChange: (...args: any[]) => any;
        "onUpdate:visible": (...args: any[]) => any;
        trigger: ("click" | "contextmenu" | "hover")[];
        overlayClassName: string;
        openClassName: string;
    } & {
        visible?: boolean;
        overlay?: any;
        disabled?: boolean;
        forceRender?: boolean;
        overlayStyle?: import("vue").CSSProperties;
        minOverlayWidthMatchTrigger?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        popupRef: any;
    }> & {} & {} & {
        savePopupRef(ref: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>): void;
        getTransitionName(): string;
        renderOverlay(prefixCls: string): any;
        handleVisibleChange(val: boolean): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    align: {
        [key: string]: any;
    };
    transitionName: string;
    getPopupContainer: (...args: any[]) => any;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
    onVisibleChange: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    trigger: ("click" | "contextmenu" | "hover")[];
    overlayClassName: string;
    openClassName: string;
} & {
    visible?: boolean;
    overlay?: any;
    disabled?: boolean;
    forceRender?: boolean;
    overlayStyle?: import("vue").CSSProperties;
    minOverlayWidthMatchTrigger?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    popupRef: any;
}, unknown, {}, {
    savePopupRef(ref: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>): void;
    getTransitionName(): string;
    renderOverlay(prefixCls: string): any;
    handleVisibleChange(val: boolean): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("visibleChange" | "update:visible")[], "visibleChange" | "update:visible", {
    prefixCls: string;
    align: {
        [key: string]: any;
    };
    transitionName: string;
    getPopupContainer: (...args: any[]) => any;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    placement: "bottomRight" | "bottomLeft" | "topLeft" | "topCenter" | "topRight" | "bottomCenter";
    onVisibleChange: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    trigger: ("click" | "contextmenu" | "hover")[];
    overlayClassName: string;
    openClassName: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Button: typeof DropdownButton;
};
export default _default;
