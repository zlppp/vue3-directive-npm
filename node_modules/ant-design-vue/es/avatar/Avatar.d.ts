import { VueNode } from '../_util/type';
import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    shape: import("vue-types").VueTypeDef<"circle" | "square">;
    size: {
        type: PropType<number | "default" | "small" | "large">;
        default: string;
    };
    src: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    /** Srcset of image avatar */
    srcset: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    /** @deprecated please use `srcset` instead `srcSet` */
    srcSet: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    icon: import("vue-types").VueTypeValidableDef<VueNode>;
    alt: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    loadError: {
        type: PropType<() => boolean>;
    };
}, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    isImgExist: boolean;
    isMounted: boolean;
    scale: number;
    lastChildrenWidth: any;
    lastNodeWidth: any;
}, {}, {
    setScale(): void;
    handleImgLoadError(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls: string;
    size: number | "default" | "small" | "large";
    src: string;
    srcset: string;
    srcSet: string;
    alt: string;
} & {
    icon?: VueNode;
    shape?: "circle" | "square";
    loadError?: () => boolean;
}>, {
    prefixCls: string;
    size: number | "default" | "small" | "large";
    src: string;
    srcset: string;
    srcSet: string;
    alt: string;
}>;
export default _default;
