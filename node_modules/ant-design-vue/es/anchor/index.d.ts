import { Plugin } from 'vue';
import AnchorLink from './AnchorLink';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: import("./Anchor").AnchorState;
        $props: Partial<{
            onChange: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            offsetTop: number;
            affix: boolean;
            getContainer: (...args: any[]) => any;
            bounds: number;
            showInkInFixed: boolean;
            wrapperClass: string;
            getCurrentAnchor: (...args: any[]) => any;
            targetOffset: number;
        }> & Omit<Readonly<{
            onChange: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            offsetTop: number;
            affix: boolean;
            getContainer: (...args: any[]) => any;
            bounds: number;
            showInkInFixed: boolean;
            wrapperClass: string;
            getCurrentAnchor: (...args: any[]) => any;
            targetOffset: number;
        } & {
            wrapperStyle?: import("vue").CSSProperties;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "onClick" | "prefixCls" | "offsetTop" | "affix" | "getContainer" | "bounds" | "showInkInFixed" | "wrapperClass" | "getCurrentAnchor" | "targetOffset">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            offsetTop: number;
            affix: boolean;
            getContainer: (...args: any[]) => any;
            bounds: number;
            showInkInFixed: boolean;
            wrapperClass: string;
            getCurrentAnchor: (...args: any[]) => any;
            targetOffset: number;
        } & {
            wrapperStyle?: import("vue").CSSProperties;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, import("./Anchor").AnchorState, {}, {
            getCurrentActiveLink(offsetTop?: number, bounds?: number): any;
            handleScrollTo(link: string): void;
            setCurrentActiveLink(link: string): void;
            handleScroll(): void;
            updateInk(): void;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, ("change" | "click")[], string, {
            onChange: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            offsetTop: number;
            affix: boolean;
            getContainer: (...args: any[]) => any;
            bounds: number;
            showInkInFixed: boolean;
            wrapperClass: string;
            getCurrentAnchor: (...args: any[]) => any;
            targetOffset: number;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        onClick: (...args: any[]) => any;
        prefixCls: string;
        offsetTop: number;
        affix: boolean;
        getContainer: (...args: any[]) => any;
        bounds: number;
        showInkInFixed: boolean;
        wrapperClass: string;
        getCurrentAnchor: (...args: any[]) => any;
        targetOffset: number;
    } & {
        wrapperStyle?: import("vue").CSSProperties;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        activeLink: string;
        scrollContainer: Window | HTMLElement;
        links: string[];
        scrollEvent: any;
        animating: boolean;
        sPrefixCls?: string;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        getCurrentActiveLink(offsetTop?: number, bounds?: number): any;
        handleScrollTo(link: string): void;
        setCurrentActiveLink(link: string): void;
        handleScroll(): void;
        updateInk(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    offsetTop: number;
    affix: boolean;
    getContainer: (...args: any[]) => any;
    bounds: number;
    showInkInFixed: boolean;
    wrapperClass: string;
    getCurrentAnchor: (...args: any[]) => any;
    targetOffset: number;
} & {
    wrapperStyle?: import("vue").CSSProperties;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, import("./Anchor").AnchorState, {}, {
    getCurrentActiveLink(offsetTop?: number, bounds?: number): any;
    handleScrollTo(link: string): void;
    setCurrentActiveLink(link: string): void;
    handleScroll(): void;
    updateInk(): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, ("change" | "click")[], "change" | "click", {
    onChange: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    offsetTop: number;
    affix: boolean;
    getContainer: (...args: any[]) => any;
    bounds: number;
    showInkInFixed: boolean;
    wrapperClass: string;
    getCurrentAnchor: (...args: any[]) => any;
    targetOffset: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Link: typeof AnchorLink;
};
export default _default;
