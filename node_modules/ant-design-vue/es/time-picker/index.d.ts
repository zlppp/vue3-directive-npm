export declare function generateShowHourMinuteSecond(format: string): {
    showHour: boolean;
    showMinute: boolean;
    showSecond: boolean;
};
export declare const TimePickerProps: () => {
    size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
    value: {
        validator(value: any): boolean;
    };
    defaultValue: {
        validator(value: any): boolean;
    };
    open: import("vue-types").VueTypeValidableDef<boolean>;
    format: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    placeholder: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    hideDisabledOptions: import("vue-types").VueTypeValidableDef<boolean>;
    disabledHours: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    disabledMinutes: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    disabledSeconds: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    use12Hours: import("vue-types").VueTypeValidableDef<boolean>;
    focusOnOpen: import("vue-types").VueTypeValidableDef<boolean>;
    hourStep: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    minuteStep: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    secondStep: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    allowEmpty: import("vue-types").VueTypeValidableDef<boolean>;
    allowClear: import("vue-types").VueTypeValidableDef<boolean>;
    inputReadOnly: import("vue-types").VueTypeValidableDef<boolean>;
    clearText: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultOpenValue: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    popupClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    popupStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    suffixIcon: import("vue-types").VueTypeValidableDef<any>;
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    placement: import("vue-types").VueTypeValidableDef<any>;
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    addon: import("vue-types").VueTypeValidableDef<any>;
    clearIcon: import("vue-types").VueTypeValidableDef<any>;
    locale: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    valueFormat: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onAmPmChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onOpen: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onClose: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onFocus: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onBlur: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onKeydown: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onOpenChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sValue: any;
        };
        $props: Partial<{
            locale: {
                [key: string]: any;
            };
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            prefixCls: string;
            align: {
                [key: string]: any;
            };
            placeholder: string;
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            popupClassName: string;
            onClose: (...args: any[]) => any;
            onOpenChange: (...args: any[]) => any;
            valueFormat: string;
            format: string;
            disabledHours: (...args: any[]) => any;
            disabledMinutes: (...args: any[]) => any;
            disabledSeconds: (...args: any[]) => any;
            hourStep: number;
            minuteStep: number;
            secondStep: number;
            clearText: string;
            defaultOpenValue: {
                [key: string]: any;
            };
            onAmPmChange: (...args: any[]) => any;
            onOpen: (...args: any[]) => any;
        }> & Omit<Readonly<{
            locale: {
                [key: string]: any;
            };
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            prefixCls: string;
            align: {
                [key: string]: any;
            };
            placeholder: string;
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            popupClassName: string;
            onClose: (...args: any[]) => any;
            onOpenChange: (...args: any[]) => any;
            valueFormat: string;
            format: string;
            disabledHours: (...args: any[]) => any;
            disabledMinutes: (...args: any[]) => any;
            disabledSeconds: (...args: any[]) => any;
            hourStep: number;
            minuteStep: number;
            secondStep: number;
            clearText: string;
            defaultOpenValue: {
                [key: string]: any;
            };
            onAmPmChange: (...args: any[]) => any;
            onOpen: (...args: any[]) => any;
        } & {
            value?: unknown;
            size?: "default" | "small" | "large";
            open?: boolean;
            disabled?: boolean;
            autofocus?: boolean;
            popupStyle?: import("vue").CSSProperties;
            defaultValue?: unknown;
            allowClear?: boolean;
            clearIcon?: any;
            suffixIcon?: any;
            placement?: any;
            inputReadOnly?: boolean;
            hideDisabledOptions?: boolean;
            focusOnOpen?: boolean;
            use12Hours?: boolean;
            allowEmpty?: boolean;
            addon?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "locale" | "onFocus" | "onBlur" | "onChange" | "onKeydown" | "prefixCls" | "align" | "placeholder" | "transitionName" | "getPopupContainer" | "popupClassName" | "onClose" | "onOpenChange" | "valueFormat" | "format" | "disabledHours" | "disabledMinutes" | "disabledSeconds" | "hourStep" | "minuteStep" | "secondStep" | "clearText" | "defaultOpenValue" | "onAmPmChange" | "onOpen">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "blur" | "change" | "focus" | "keydown" | "update:value" | "openChange" | "update:open", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            locale: {
                [key: string]: any;
            };
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            prefixCls: string;
            align: {
                [key: string]: any;
            };
            placeholder: string;
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            popupClassName: string;
            onClose: (...args: any[]) => any;
            onOpenChange: (...args: any[]) => any;
            valueFormat: string;
            format: string;
            disabledHours: (...args: any[]) => any;
            disabledMinutes: (...args: any[]) => any;
            disabledSeconds: (...args: any[]) => any;
            hourStep: number;
            minuteStep: number;
            secondStep: number;
            clearText: string;
            defaultOpenValue: {
                [key: string]: any;
            };
            onAmPmChange: (...args: any[]) => any;
            onOpen: (...args: any[]) => any;
        } & {
            value?: unknown;
            size?: "default" | "small" | "large";
            open?: boolean;
            disabled?: boolean;
            autofocus?: boolean;
            popupStyle?: import("vue").CSSProperties;
            defaultValue?: unknown;
            allowClear?: boolean;
            clearIcon?: any;
            suffixIcon?: any;
            placement?: any;
            inputReadOnly?: boolean;
            hideDisabledOptions?: boolean;
            focusOnOpen?: boolean;
            use12Hours?: boolean;
            allowEmpty?: boolean;
            addon?: any;
        }>, {
            popupRef: any;
            timePickerRef: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            sValue: any;
        }, {}, {
            getDefaultFormat(): string;
            getAllowClear(): boolean;
            getDefaultLocale(): {
                placeholder: string;
            };
            savePopupRef(ref: any): void;
            saveTimePicker(timePickerRef: any): void;
            handleChange(value: any): void;
            handleOpenClose({ open }: {
                open: any;
            }): void;
            focus(): void;
            blur(): void;
            renderInputIcon(prefixCls: string): JSX.Element;
            renderClearIcon(prefixCls: string): import("vue").VNode<any, any, {
                [key: string]: any;
            }>;
            renderTimePicker(locale: any): JSX.Element;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "keydown" | "update:value" | "openChange" | "update:open")[], string, {
            locale: {
                [key: string]: any;
            };
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            prefixCls: string;
            align: {
                [key: string]: any;
            };
            placeholder: string;
            transitionName: string;
            getPopupContainer: (...args: any[]) => any;
            popupClassName: string;
            onClose: (...args: any[]) => any;
            onOpenChange: (...args: any[]) => any;
            valueFormat: string;
            format: string;
            disabledHours: (...args: any[]) => any;
            disabledMinutes: (...args: any[]) => any;
            disabledSeconds: (...args: any[]) => any;
            hourStep: number;
            minuteStep: number;
            secondStep: number;
            clearText: string;
            defaultOpenValue: {
                [key: string]: any;
            };
            onAmPmChange: (...args: any[]) => any;
            onOpen: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        locale: {
            [key: string]: any;
        };
        onFocus: (...args: any[]) => any;
        onBlur: (...args: any[]) => any;
        onChange: (...args: any[]) => any;
        onKeydown: (...args: any[]) => any;
        prefixCls: string;
        align: {
            [key: string]: any;
        };
        placeholder: string;
        transitionName: string;
        getPopupContainer: (...args: any[]) => any;
        popupClassName: string;
        onClose: (...args: any[]) => any;
        onOpenChange: (...args: any[]) => any;
        valueFormat: string;
        format: string;
        disabledHours: (...args: any[]) => any;
        disabledMinutes: (...args: any[]) => any;
        disabledSeconds: (...args: any[]) => any;
        hourStep: number;
        minuteStep: number;
        secondStep: number;
        clearText: string;
        defaultOpenValue: {
            [key: string]: any;
        };
        onAmPmChange: (...args: any[]) => any;
        onOpen: (...args: any[]) => any;
    } & {
        value?: unknown;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        autofocus?: boolean;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: unknown;
        allowClear?: boolean;
        clearIcon?: any;
        suffixIcon?: any;
        placement?: any;
        inputReadOnly?: boolean;
        hideDisabledOptions?: boolean;
        focusOnOpen?: boolean;
        use12Hours?: boolean;
        allowEmpty?: boolean;
        addon?: any;
    }> & import("vue").ShallowUnwrapRef<{
        popupRef: any;
        timePickerRef: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        sValue: any;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        getDefaultFormat(): string;
        getAllowClear(): boolean;
        getDefaultLocale(): {
            placeholder: string;
        };
        savePopupRef(ref: any): void;
        saveTimePicker(timePickerRef: any): void;
        handleChange(value: any): void;
        handleOpenClose({ open }: {
            open: any;
        }): void;
        focus(): void;
        blur(): void;
        renderInputIcon(prefixCls: string): JSX.Element;
        renderClearIcon(prefixCls: string): import("vue").VNode<any, any, {
            [key: string]: any;
        }>;
        renderTimePicker(locale: any): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    locale: {
        [key: string]: any;
    };
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    prefixCls: string;
    align: {
        [key: string]: any;
    };
    placeholder: string;
    transitionName: string;
    getPopupContainer: (...args: any[]) => any;
    popupClassName: string;
    onClose: (...args: any[]) => any;
    onOpenChange: (...args: any[]) => any;
    valueFormat: string;
    format: string;
    disabledHours: (...args: any[]) => any;
    disabledMinutes: (...args: any[]) => any;
    disabledSeconds: (...args: any[]) => any;
    hourStep: number;
    minuteStep: number;
    secondStep: number;
    clearText: string;
    defaultOpenValue: {
        [key: string]: any;
    };
    onAmPmChange: (...args: any[]) => any;
    onOpen: (...args: any[]) => any;
} & {
    value?: unknown;
    size?: "default" | "small" | "large";
    open?: boolean;
    disabled?: boolean;
    autofocus?: boolean;
    popupStyle?: import("vue").CSSProperties;
    defaultValue?: unknown;
    allowClear?: boolean;
    clearIcon?: any;
    suffixIcon?: any;
    placement?: any;
    inputReadOnly?: boolean;
    hideDisabledOptions?: boolean;
    focusOnOpen?: boolean;
    use12Hours?: boolean;
    allowEmpty?: boolean;
    addon?: any;
}>, {
    popupRef: any;
    timePickerRef: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    sValue: any;
}, {}, {
    getDefaultFormat(): string;
    getAllowClear(): boolean;
    getDefaultLocale(): {
        placeholder: string;
    };
    savePopupRef(ref: any): void;
    saveTimePicker(timePickerRef: any): void;
    handleChange(value: any): void;
    handleOpenClose({ open }: {
        open: any;
    }): void;
    focus(): void;
    blur(): void;
    renderInputIcon(prefixCls: string): JSX.Element;
    renderClearIcon(prefixCls: string): import("vue").VNode<any, any, {
        [key: string]: any;
    }>;
    renderTimePicker(locale: any): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "keydown" | "update:value" | "openChange" | "update:open")[], "blur" | "change" | "focus" | "keydown" | "update:value" | "openChange" | "update:open", {
    locale: {
        [key: string]: any;
    };
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    prefixCls: string;
    align: {
        [key: string]: any;
    };
    placeholder: string;
    transitionName: string;
    getPopupContainer: (...args: any[]) => any;
    popupClassName: string;
    onClose: (...args: any[]) => any;
    onOpenChange: (...args: any[]) => any;
    valueFormat: string;
    format: string;
    disabledHours: (...args: any[]) => any;
    disabledMinutes: (...args: any[]) => any;
    disabledSeconds: (...args: any[]) => any;
    hourStep: number;
    minuteStep: number;
    secondStep: number;
    clearText: string;
    defaultOpenValue: {
        [key: string]: any;
    };
    onAmPmChange: (...args: any[]) => any;
    onOpen: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
