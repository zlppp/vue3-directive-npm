export { PaginationProps, PaginationConfig } from './Pagination';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            prefixCls: string;
            role: string;
            current: number;
            size: string;
            showSizeChange: (...args: any[]) => any;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            selectPrefixCls: string;
            itemRender: (...args: any[]) => any;
            onShowSizeChange: (...args: any[]) => any;
            "onUpdate:current": (...args: any[]) => any;
            "onUpdate:pageSize": (...args: any[]) => any;
        }> & Omit<Readonly<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            prefixCls: string;
            role: string;
            current: number;
            size: string;
            showSizeChange: (...args: any[]) => any;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            selectPrefixCls: string;
            itemRender: (...args: any[]) => any;
            onShowSizeChange: (...args: any[]) => any;
            "onUpdate:current": (...args: any[]) => any;
            "onUpdate:pageSize": (...args: any[]) => any;
        } & {
            disabled?: boolean;
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            pageSizeOptions?: (string | number)[];
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            showLessItems?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "locale" | "onChange" | "prefixCls" | "role" | "current" | "size" | "showSizeChange" | "total" | "defaultCurrent" | "defaultPageSize" | "pageSize" | "buildOptionText" | "selectPrefixCls" | "itemRender" | "onShowSizeChange" | "onUpdate:current" | "onUpdate:pageSize">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "showSizeChange" | "update:current" | "update:pageSize", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            prefixCls: string;
            role: string;
            current: number;
            size: string;
            showSizeChange: (...args: any[]) => any;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            selectPrefixCls: string;
            itemRender: (...args: any[]) => any;
            onShowSizeChange: (...args: any[]) => any;
            "onUpdate:current": (...args: any[]) => any;
            "onUpdate:pageSize": (...args: any[]) => any;
        } & {
            disabled?: boolean;
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            pageSizeOptions?: (string | number)[];
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            showLessItems?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            getIconsProps(prefixCls: string): {
                prevIcon: JSX.Element;
                nextIcon: JSX.Element;
                jumpPrevIcon: JSX.Element;
                jumpNextIcon: JSX.Element;
            };
            renderPagination(contextLocale: object): JSX.Element;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "showSizeChange" | "update:current" | "update:pageSize")[], string, {
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            prefixCls: string;
            role: string;
            current: number;
            size: string;
            showSizeChange: (...args: any[]) => any;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            selectPrefixCls: string;
            itemRender: (...args: any[]) => any;
            onShowSizeChange: (...args: any[]) => any;
            "onUpdate:current": (...args: any[]) => any;
            "onUpdate:pageSize": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        locale: {
            [key: string]: any;
        };
        onChange: (...args: any[]) => any;
        prefixCls: string;
        role: string;
        current: number;
        size: string;
        showSizeChange: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        selectPrefixCls: string;
        itemRender: (...args: any[]) => any;
        onShowSizeChange: (...args: any[]) => any;
        "onUpdate:current": (...args: any[]) => any;
        "onUpdate:pageSize": (...args: any[]) => any;
    } & {
        disabled?: boolean;
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {} & {
        getIconsProps(prefixCls: string): {
            prevIcon: JSX.Element;
            nextIcon: JSX.Element;
            jumpPrevIcon: JSX.Element;
            jumpNextIcon: JSX.Element;
        };
        renderPagination(contextLocale: object): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    locale: {
        [key: string]: any;
    };
    onChange: (...args: any[]) => any;
    prefixCls: string;
    role: string;
    current: number;
    size: string;
    showSizeChange: (...args: any[]) => any;
    total: number;
    defaultCurrent: number;
    defaultPageSize: number;
    pageSize: number;
    buildOptionText: (...args: any[]) => any;
    selectPrefixCls: string;
    itemRender: (...args: any[]) => any;
    onShowSizeChange: (...args: any[]) => any;
    "onUpdate:current": (...args: any[]) => any;
    "onUpdate:pageSize": (...args: any[]) => any;
} & {
    disabled?: boolean;
    hideOnSinglePage?: boolean;
    showSizeChanger?: boolean;
    pageSizeOptions?: (string | number)[];
    showQuickJumper?: boolean | {
        [key: string]: any;
    };
    showTotal?: any;
    simple?: boolean;
    showLessItems?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    getIconsProps(prefixCls: string): {
        prevIcon: JSX.Element;
        nextIcon: JSX.Element;
        jumpPrevIcon: JSX.Element;
        jumpNextIcon: JSX.Element;
    };
    renderPagination(contextLocale: object): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "showSizeChange" | "update:current" | "update:pageSize")[], "change" | "showSizeChange" | "update:current" | "update:pageSize", {
    locale: {
        [key: string]: any;
    };
    onChange: (...args: any[]) => any;
    prefixCls: string;
    role: string;
    current: number;
    size: string;
    showSizeChange: (...args: any[]) => any;
    total: number;
    defaultCurrent: number;
    defaultPageSize: number;
    pageSize: number;
    buildOptionText: (...args: any[]) => any;
    selectPrefixCls: string;
    itemRender: (...args: any[]) => any;
    onShowSizeChange: (...args: any[]) => any;
    "onUpdate:current": (...args: any[]) => any;
    "onUpdate:pageSize": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
