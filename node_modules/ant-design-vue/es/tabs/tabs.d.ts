import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    activeKey: import("vue-types").VueTypeDef<string | number>;
    defaultActiveKey: import("vue-types").VueTypeDef<string | number>;
    hideAdd: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    centered: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    tabBarStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    tabBarExtraContent: import("vue-types").VueTypeValidableDef<any>;
    destroyInactiveTabPane: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    type: import("vue-types").VueTypeDef<"line" | "card" | "editable-card">;
    tabPosition: import("vue-types").VueTypeDef<string> & {
        default: string;
    };
    size: import("vue-types").VueTypeDef<string>;
    animated: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }>;
    tabBarGutter: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    renderTabBar: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: {
        type: PropType<(activeKey: string) => void>;
    };
    onTabClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onPrevClick: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onNextClick: {
        type: PropType<(e: MouseEvent) => void>;
    };
    onEdit: {
        type: PropType<(targetKey: string | MouseEvent, action: 'add' | 'remove') => void>;
    };
}, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    removeTab(targetKey: string, e: MouseEvent): void;
    handleChange(activeKey: string): void;
    createNewTab(targetKey: MouseEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey" | "edit")[], "change" | "update:activeKey" | "edit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls: string;
    centered: boolean;
    tabBarStyle: {
        [key: string]: any;
    };
    tabPosition: string;
    renderTabBar: (...args: any[]) => any;
    tabBarGutter: number;
    destroyInactiveTabPane: boolean;
    hideAdd: boolean;
    onTabClick: (...args: any[]) => any;
} & {
    onChange?: (activeKey: string) => void;
    size?: string;
    type?: "line" | "card" | "editable-card";
    animated?: boolean | {
        [key: string]: any;
    };
    activeKey?: string | number;
    tabBarExtraContent?: any;
    defaultActiveKey?: string | number;
    onPrevClick?: (e: MouseEvent) => void;
    onNextClick?: (e: MouseEvent) => void;
    onEdit?: (targetKey: string | MouseEvent, action: 'add' | 'remove') => void;
}>, {
    prefixCls: string;
    centered: boolean;
    tabBarStyle: {
        [key: string]: any;
    };
    tabPosition: string;
    renderTabBar: (...args: any[]) => any;
    tabBarGutter: number;
    destroyInactiveTabPane: boolean;
    hideAdd: boolean;
    onTabClick: (...args: any[]) => any;
}>;
export default _default;
