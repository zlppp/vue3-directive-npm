import { PropType } from 'vue';
import moment from 'moment';
declare const CalendarModeTypes: ["month", "year"];
export declare type CalendarMode = typeof CalendarModeTypes[number];
export declare const CalendarProps: {
    monthCellRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    dateCellRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    monthFullCellRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    dateFullCellRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    value: {
        validator(value: any): boolean;
    };
    defaultValue: {
        validator(value: any): boolean;
    };
    mode: import("vue-types").VueTypeDef<"year" | "month">;
    fullscreen: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    locale: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    disabledDate: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    validRange: {
        type: PropType<moment.Moment[]>;
    };
    headerRender: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    valueFormat: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onPanelChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onSelect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:value': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export { HeaderProps } from './Header';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sValue: any;
            sMode: "year" | "month";
        };
        $props: Partial<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            "onUpdate:value": (...args: any[]) => any;
            fullscreen: boolean;
            headerRender: (...args: any[]) => any;
            monthCellRender: (...args: any[]) => any;
            dateCellRender: (...args: any[]) => any;
            monthFullCellRender: (...args: any[]) => any;
            dateFullCellRender: (...args: any[]) => any;
            disabledDate: (...args: any[]) => any;
            valueFormat: string;
            onPanelChange: (...args: any[]) => any;
        }> & Omit<Readonly<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            "onUpdate:value": (...args: any[]) => any;
            fullscreen: boolean;
            headerRender: (...args: any[]) => any;
            monthCellRender: (...args: any[]) => any;
            dateCellRender: (...args: any[]) => any;
            monthFullCellRender: (...args: any[]) => any;
            dateFullCellRender: (...args: any[]) => any;
            disabledDate: (...args: any[]) => any;
            valueFormat: string;
            onPanelChange: (...args: any[]) => any;
        } & {
            value?: unknown;
            mode?: "year" | "month";
            defaultValue?: unknown;
            validRange?: moment.Moment[];
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "locale" | "onChange" | "onSelect" | "prefixCls" | "onUpdate:value" | "fullscreen" | "headerRender" | "monthCellRender" | "dateCellRender" | "monthFullCellRender" | "dateFullCellRender" | "disabledDate" | "valueFormat" | "onPanelChange">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            "onUpdate:value": (...args: any[]) => any;
            fullscreen: boolean;
            headerRender: (...args: any[]) => any;
            monthCellRender: (...args: any[]) => any;
            dateCellRender: (...args: any[]) => any;
            monthFullCellRender: (...args: any[]) => any;
            dateFullCellRender: (...args: any[]) => any;
            disabledDate: (...args: any[]) => any;
            valueFormat: string;
            onPanelChange: (...args: any[]) => any;
        } & {
            value?: unknown;
            mode?: "year" | "month";
            defaultValue?: unknown;
            validRange?: moment.Moment[];
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            sPrefixCls: any;
        }, {
            sValue: any;
            sMode: "year" | "month";
        }, {}, {
            onHeaderValueChange(value: moment.Moment): void;
            onHeaderTypeChange(mode: "year" | "month"): void;
            triggerPanelChange(value: moment.Moment, mode: "year" | "month"): void;
            triggerSelect(value: moment.Moment): void;
            setValue(value: moment.Moment, way: "select" | "changePanel"): void;
            getDateRange(validRange: [moment.Moment, moment.Moment], disabledDate?: (current: moment.Moment) => boolean): (current: moment.Moment) => boolean;
            getDefaultLocale(): {
                lang: {
                    today: string;
                    now: string;
                    backToToday: string;
                    ok: string;
                    clear: string;
                    month: string;
                    year: string;
                    timeSelect: string;
                    dateSelect: string;
                    weekSelect: string;
                    monthSelect: string;
                    yearSelect: string;
                    decadeSelect: string;
                    yearFormat: string;
                    dateFormat: string;
                    dayFormat: string;
                    dateTimeFormat: string;
                    monthBeforeYear: boolean;
                    previousMonth: string;
                    nextMonth: string;
                    previousYear: string;
                    nextYear: string;
                    previousDecade: string;
                    nextDecade: string;
                    previousCentury: string;
                    nextCentury: string;
                    placeholder: string;
                    rangePlaceholder: string[];
                };
                timePickerLocale: {
                    placeholder: string;
                };
            };
            monthCellRender2({ current: value }: {
                current: any;
            }): JSX.Element;
            dateCellRender2({ current: value }: {
                current: any;
            }): JSX.Element;
            renderCalendar(locale: any, localeCode: string): JSX.Element;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            "onUpdate:value": (...args: any[]) => any;
            fullscreen: boolean;
            headerRender: (...args: any[]) => any;
            monthCellRender: (...args: any[]) => any;
            dateCellRender: (...args: any[]) => any;
            monthFullCellRender: (...args: any[]) => any;
            dateFullCellRender: (...args: any[]) => any;
            disabledDate: (...args: any[]) => any;
            valueFormat: string;
            onPanelChange: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        locale: {
            [key: string]: any;
        };
        onChange: (...args: any[]) => any;
        onSelect: (...args: any[]) => any;
        prefixCls: string;
        "onUpdate:value": (...args: any[]) => any;
        fullscreen: boolean;
        headerRender: (...args: any[]) => any;
        monthCellRender: (...args: any[]) => any;
        dateCellRender: (...args: any[]) => any;
        monthFullCellRender: (...args: any[]) => any;
        dateFullCellRender: (...args: any[]) => any;
        disabledDate: (...args: any[]) => any;
        valueFormat: string;
        onPanelChange: (...args: any[]) => any;
    } & {
        value?: unknown;
        mode?: "year" | "month";
        defaultValue?: unknown;
        validRange?: moment.Moment[];
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        sPrefixCls: any;
    }> & {
        sValue: any;
        sMode: "year" | "month";
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        onHeaderValueChange(value: moment.Moment): void;
        onHeaderTypeChange(mode: "year" | "month"): void;
        triggerPanelChange(value: moment.Moment, mode: "year" | "month"): void;
        triggerSelect(value: moment.Moment): void;
        setValue(value: moment.Moment, way: "select" | "changePanel"): void;
        getDateRange(validRange: [moment.Moment, moment.Moment], disabledDate?: (current: moment.Moment) => boolean): (current: moment.Moment) => boolean;
        getDefaultLocale(): {
            lang: {
                today: string;
                now: string;
                backToToday: string;
                ok: string;
                clear: string;
                month: string;
                year: string;
                timeSelect: string;
                dateSelect: string;
                weekSelect: string;
                monthSelect: string;
                yearSelect: string;
                decadeSelect: string;
                yearFormat: string;
                dateFormat: string;
                dayFormat: string;
                dateTimeFormat: string;
                monthBeforeYear: boolean;
                previousMonth: string;
                nextMonth: string;
                previousYear: string;
                nextYear: string;
                previousDecade: string;
                nextDecade: string;
                previousCentury: string;
                nextCentury: string;
                placeholder: string;
                rangePlaceholder: string[];
            };
            timePickerLocale: {
                placeholder: string;
            };
        };
        monthCellRender2({ current: value }: {
            current: any;
        }): JSX.Element;
        dateCellRender2({ current: value }: {
            current: any;
        }): JSX.Element;
        renderCalendar(locale: any, localeCode: string): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    locale: {
        [key: string]: any;
    };
    onChange: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    "onUpdate:value": (...args: any[]) => any;
    fullscreen: boolean;
    headerRender: (...args: any[]) => any;
    monthCellRender: (...args: any[]) => any;
    dateCellRender: (...args: any[]) => any;
    monthFullCellRender: (...args: any[]) => any;
    dateFullCellRender: (...args: any[]) => any;
    disabledDate: (...args: any[]) => any;
    valueFormat: string;
    onPanelChange: (...args: any[]) => any;
} & {
    value?: unknown;
    mode?: "year" | "month";
    defaultValue?: unknown;
    validRange?: moment.Moment[];
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    sPrefixCls: any;
}, {
    sValue: any;
    sMode: "year" | "month";
}, {}, {
    onHeaderValueChange(value: moment.Moment): void;
    onHeaderTypeChange(mode: "year" | "month"): void;
    triggerPanelChange(value: moment.Moment, mode: "year" | "month"): void;
    triggerSelect(value: moment.Moment): void;
    setValue(value: moment.Moment, way: "select" | "changePanel"): void;
    getDateRange(validRange: [moment.Moment, moment.Moment], disabledDate?: (current: moment.Moment) => boolean): (current: moment.Moment) => boolean;
    getDefaultLocale(): {
        lang: {
            today: string;
            now: string;
            backToToday: string;
            ok: string;
            clear: string;
            month: string;
            year: string;
            timeSelect: string;
            dateSelect: string;
            weekSelect: string;
            monthSelect: string;
            yearSelect: string;
            decadeSelect: string;
            yearFormat: string;
            dateFormat: string;
            dayFormat: string;
            dateTimeFormat: string;
            monthBeforeYear: boolean;
            previousMonth: string;
            nextMonth: string;
            previousYear: string;
            nextYear: string;
            previousDecade: string;
            nextDecade: string;
            previousCentury: string;
            nextCentury: string;
            placeholder: string;
            rangePlaceholder: string[];
        };
        timePickerLocale: {
            placeholder: string;
        };
    };
    monthCellRender2({ current: value }: {
        current: any;
    }): JSX.Element;
    dateCellRender2({ current: value }: {
        current: any;
    }): JSX.Element;
    renderCalendar(locale: any, localeCode: string): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    locale: {
        [key: string]: any;
    };
    onChange: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    "onUpdate:value": (...args: any[]) => any;
    fullscreen: boolean;
    headerRender: (...args: any[]) => any;
    monthCellRender: (...args: any[]) => any;
    dateCellRender: (...args: any[]) => any;
    monthFullCellRender: (...args: any[]) => any;
    dateFullCellRender: (...args: any[]) => any;
    disabledDate: (...args: any[]) => any;
    valueFormat: string;
    onPanelChange: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
