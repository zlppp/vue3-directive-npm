import { ExtractPropTypes, nextTick } from 'vue';
export declare const SwitchSizes: ["small", "default", "large"];
declare const switchProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    checkedChildren: import("vue-types").VueTypeValidableDef<any>;
    unCheckedChildren: import("vue-types").VueTypeValidableDef<any>;
    tabindex: import("vue-types").VueTypeDef<string | number>;
    defaultChecked: import("vue-types").VueTypeValidableDef<boolean>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    checked: import("vue-types").VueTypeValidableDef<boolean>;
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onKeydown: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onMouseup: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:checked': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare type SwitchProps = Partial<ExtractPropTypes<typeof switchProps>>;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMouseup: (...args: any[]) => any;
            prefixCls: string;
            "onUpdate:checked": (...args: any[]) => any;
        }> & Omit<Readonly<{
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMouseup: (...args: any[]) => any;
            prefixCls: string;
            "onUpdate:checked": (...args: any[]) => any;
        } & {
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            tabindex?: string | number;
            loading?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            checkedChildren?: any;
            unCheckedChildren?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "onKeydown" | "onClick" | "onMouseup" | "prefixCls" | "onUpdate:checked">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "click" | "keydown" | "mouseup" | "update:checked", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMouseup: (...args: any[]) => any;
            prefixCls: string;
            "onUpdate:checked": (...args: any[]) => any;
        } & {
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            tabindex?: string | number;
            loading?: boolean;
            defaultChecked?: boolean;
            checked?: boolean;
            checkedChildren?: any;
            unCheckedChildren?: any;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "click" | "keydown" | "mouseup" | "update:checked")[], string, {
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMouseup: (...args: any[]) => any;
            prefixCls: string;
            "onUpdate:checked": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        onKeydown: (...args: any[]) => any;
        onClick: (...args: any[]) => any;
        onMouseup: (...args: any[]) => any;
        prefixCls: string;
        "onUpdate:checked": (...args: any[]) => any;
    } & {
        size?: "default" | "small" | "large";
        disabled?: boolean;
        autofocus?: boolean;
        tabindex?: string | number;
        loading?: boolean;
        defaultChecked?: boolean;
        checked?: boolean;
        checkedChildren?: any;
        unCheckedChildren?: any;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onMouseup: (...args: any[]) => any;
    prefixCls: string;
    "onUpdate:checked": (...args: any[]) => any;
} & {
    size?: "default" | "small" | "large";
    disabled?: boolean;
    autofocus?: boolean;
    tabindex?: string | number;
    loading?: boolean;
    defaultChecked?: boolean;
    checked?: boolean;
    checkedChildren?: any;
    unCheckedChildren?: any;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "click" | "keydown" | "mouseup" | "update:checked")[], "change" | "click" | "keydown" | "mouseup" | "update:checked", {
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onMouseup: (...args: any[]) => any;
    prefixCls: string;
    "onUpdate:checked": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
