export { ProgressProps } from './props';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            width: number;
            format: (...args: any[]) => any;
            percent: number;
            successPercent: number;
            strokeWidth: number;
            trailColor: string;
            gapDegree: number;
        }> & Omit<Readonly<{
            prefixCls: string;
            width: number;
            format: (...args: any[]) => any;
            percent: number;
            successPercent: number;
            strokeWidth: number;
            trailColor: string;
            gapDegree: number;
        } & {
            size?: "default" | "small";
            type?: "circle" | "line" | "dashboard";
            status?: "normal" | "active" | "success" | "exception";
            showInfo?: boolean;
            strokeLinecap?: string;
            strokeColor?: string | {
                [key: string]: any;
            };
            gapPosition?: "left" | "right" | "bottom" | "top";
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "width" | "format" | "percent" | "successPercent" | "strokeWidth" | "trailColor" | "gapDegree">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            width: number;
            format: (...args: any[]) => any;
            percent: number;
            successPercent: number;
            strokeWidth: number;
            trailColor: string;
            gapDegree: number;
        } & {
            size?: "default" | "small";
            type?: "circle" | "line" | "dashboard";
            status?: "normal" | "active" | "success" | "exception";
            showInfo?: boolean;
            strokeLinecap?: string;
            strokeColor?: string | {
                [key: string]: any;
            };
            gapPosition?: "left" | "right" | "bottom" | "top";
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            getPercentNumber(): number;
            getProgressStatus(): "normal" | "active" | "success" | "exception";
            renderProcessInfo(prefixCls: string, progressStatus: "normal" | "active" | "success" | "exception"): JSX.Element;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            width: number;
            format: (...args: any[]) => any;
            percent: number;
            successPercent: number;
            strokeWidth: number;
            trailColor: string;
            gapDegree: number;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        width: number;
        format: (...args: any[]) => any;
        percent: number;
        successPercent: number;
        strokeWidth: number;
        trailColor: string;
        gapDegree: number;
    } & {
        size?: "default" | "small";
        type?: "circle" | "line" | "dashboard";
        status?: "normal" | "active" | "success" | "exception";
        showInfo?: boolean;
        strokeLinecap?: string;
        strokeColor?: string | {
            [key: string]: any;
        };
        gapPosition?: "left" | "right" | "bottom" | "top";
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {} & {
        getPercentNumber(): number;
        getProgressStatus(): "normal" | "active" | "success" | "exception";
        renderProcessInfo(prefixCls: string, progressStatus: "normal" | "active" | "success" | "exception"): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    width: number;
    format: (...args: any[]) => any;
    percent: number;
    successPercent: number;
    strokeWidth: number;
    trailColor: string;
    gapDegree: number;
} & {
    size?: "default" | "small";
    type?: "circle" | "line" | "dashboard";
    status?: "normal" | "active" | "success" | "exception";
    showInfo?: boolean;
    strokeLinecap?: string;
    strokeColor?: string | {
        [key: string]: any;
    };
    gapPosition?: "left" | "right" | "bottom" | "top";
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    getPercentNumber(): number;
    getProgressStatus(): "normal" | "active" | "success" | "exception";
    renderProcessInfo(prefixCls: string, progressStatus: "normal" | "active" | "success" | "exception"): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    width: number;
    format: (...args: any[]) => any;
    percent: number;
    successPercent: number;
    strokeWidth: number;
    trailColor: string;
    gapDegree: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
