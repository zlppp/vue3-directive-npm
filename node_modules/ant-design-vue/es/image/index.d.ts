import { Plugin } from 'vue';
import { ImageProps, ImagePropsType } from '../vc-image/src/Image';
import PreviewGroup from './PreviewGroup';
export { ImageProps, ImagePropsType };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            wrapperClassName: string;
            src: string;
            previewPrefixCls: string;
            fallback: string;
            preview: boolean | {
                visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                onVisibleChange: any;
                getContainer: (import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                }) | (import("vue-types").VueTypeValidableDef<boolean> & {
                    default: boolean;
                }) | (() => import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                }) | (() => import("vue-types").VueTypeValidableDef<boolean> & {
                    default: boolean;
                });
            };
        }> & Omit<Readonly<{
            prefixCls: string;
            wrapperClassName: string;
            src: string;
            previewPrefixCls: string;
            fallback: string;
            preview: boolean | {
                visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                onVisibleChange: any;
                getContainer: (import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                }) | (import("vue-types").VueTypeValidableDef<boolean> & {
                    default: boolean;
                }) | (() => import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                }) | (() => import("vue-types").VueTypeValidableDef<boolean> & {
                    default: boolean;
                });
            };
        } & {
            placeholder?: import("../_util/type").VueNode;
            wrapperStyle?: import("vue").CSSProperties;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "wrapperClassName" | "src" | "previewPrefixCls" | "fallback" | "preview">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            wrapperClassName: string;
            src: string;
            previewPrefixCls: string;
            fallback: string;
            preview: boolean | {
                visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                onVisibleChange: any;
                getContainer: (import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                }) | (import("vue-types").VueTypeValidableDef<boolean> & {
                    default: boolean;
                }) | (() => import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                }) | (() => import("vue-types").VueTypeValidableDef<boolean> & {
                    default: boolean;
                });
            };
        } & {
            placeholder?: import("../_util/type").VueNode;
            wrapperStyle?: import("vue").CSSProperties;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            wrapperClassName: string;
            src: string;
            previewPrefixCls: string;
            fallback: string;
            preview: boolean | {
                visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                onVisibleChange: any;
                getContainer: (import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                }) | (import("vue-types").VueTypeValidableDef<boolean> & {
                    default: boolean;
                }) | (() => import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                    default: (...args: any[]) => any;
                }) | (() => import("vue-types").VueTypeValidableDef<boolean> & {
                    default: boolean;
                });
            };
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        wrapperClassName: string;
        src: string;
        previewPrefixCls: string;
        fallback: string;
        preview: boolean | {
            visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            onVisibleChange: any;
            getContainer: (import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            }) | (import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            }) | (() => import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
                default: (...args: any[]) => any;
            }) | (() => import("vue-types").VueTypeValidableDef<boolean> & {
                default: boolean;
            });
        };
    } & {
        placeholder?: import("../_util/type").VueNode;
        wrapperStyle?: import("vue").CSSProperties;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    wrapperClassName: string;
    src: string;
    previewPrefixCls: string;
    fallback: string;
    preview: boolean | {
        visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        onVisibleChange: any;
        getContainer: (import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        }) | (import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        }) | (() => import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        }) | (() => import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        });
    };
} & {
    placeholder?: import("../_util/type").VueNode;
    wrapperStyle?: import("vue").CSSProperties;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    wrapperClassName: string;
    src: string;
    previewPrefixCls: string;
    fallback: string;
    preview: boolean | {
        visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        onVisibleChange: any;
        getContainer: (import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        }) | (import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        }) | (() => import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        }) | (() => import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        });
    };
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly PreviewGroup: typeof PreviewGroup;
};
export default _default;
