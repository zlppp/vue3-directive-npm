import { VNode } from 'vue';
export declare const RateProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    count: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    value: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    defaultValue: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    allowHalf: import("vue-types").VueTypeValidableDef<boolean>;
    allowClear: import("vue-types").VueTypeValidableDef<boolean>;
    tooltips: import("vue-types").VueTypeDef<string[]>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    character: import("vue-types").VueTypeValidableDef<any>;
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
};
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: number;
            prefixCls: string;
            count: number;
            defaultValue: number;
        }> & Omit<Readonly<{
            value: number;
            prefixCls: string;
            count: number;
            defaultValue: number;
        } & {
            disabled?: boolean;
            autofocus?: boolean;
            allowClear?: boolean;
            character?: any;
            allowHalf?: boolean;
            tooltips?: string[];
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "prefixCls" | "count" | "defaultValue">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            value: number;
            prefixCls: string;
            count: number;
            defaultValue: number;
        } & {
            disabled?: boolean;
            autofocus?: boolean;
            allowClear?: boolean;
            character?: any;
            allowHalf?: boolean;
            tooltips?: string[];
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            characterRender(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, { index }: {
                index: any;
            }): JSX.Element;
            focus(): void;
            blur(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            value: number;
            prefixCls: string;
            count: number;
            defaultValue: number;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        value: number;
        prefixCls: string;
        count: number;
        defaultValue: number;
    } & {
        disabled?: boolean;
        autofocus?: boolean;
        allowClear?: boolean;
        character?: any;
        allowHalf?: boolean;
        tooltips?: string[];
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {} & {
        characterRender(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, { index }: {
            index: any;
        }): JSX.Element;
        focus(): void;
        blur(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    value: number;
    prefixCls: string;
    count: number;
    defaultValue: number;
} & {
    disabled?: boolean;
    autofocus?: boolean;
    allowClear?: boolean;
    character?: any;
    allowHalf?: boolean;
    tooltips?: string[];
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    characterRender(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, { index }: {
        index: any;
    }): JSX.Element;
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    value: number;
    prefixCls: string;
    count: number;
    defaultValue: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
