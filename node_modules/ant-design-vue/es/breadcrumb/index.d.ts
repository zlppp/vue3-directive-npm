import { Plugin } from 'vue';
import BreadcrumbItem from './BreadcrumbItem';
import BreadcrumbSeparator from './BreadcrumbSeparator';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
        }> & Omit<Readonly<{
            prefixCls: string;
        } & {
            separator?: import("../_util/type").VueNode;
            itemRender?: (opt: {
                route: import("./Breadcrumb").Route;
                params: unknown;
                routes: import("./Breadcrumb").Route[];
                paths: string[];
            }) => import("../_util/type").VueNode;
            params?: any;
            routes?: import("./Breadcrumb").Route[];
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
        } & {
            separator?: import("../_util/type").VueNode;
            itemRender?: (opt: {
                route: import("./Breadcrumb").Route;
                params: unknown;
                routes: import("./Breadcrumb").Route[];
                paths: string[];
            }) => import("../_util/type").VueNode;
            params?: any;
            routes?: import("./Breadcrumb").Route[];
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            getPath(path: string, params: unknown): string;
            addChildPath(paths: string[], childPath: string, params: unknown): string[];
            genForRoutes({ routes, params, separator, itemRender }: any): any;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
    } & {
        separator?: import("../_util/type").VueNode;
        itemRender?: (opt: {
            route: import("./Breadcrumb").Route;
            params: unknown;
            routes: import("./Breadcrumb").Route[];
            paths: string[];
        }) => import("../_util/type").VueNode;
        params?: any;
        routes?: import("./Breadcrumb").Route[];
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {} & {
        getPath(path: string, params: unknown): string;
        addChildPath(paths: string[], childPath: string, params: unknown): string[];
        genForRoutes({ routes, params, separator, itemRender }: any): any;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
} & {
    separator?: import("../_util/type").VueNode;
    itemRender?: (opt: {
        route: import("./Breadcrumb").Route;
        params: unknown;
        routes: import("./Breadcrumb").Route[];
        paths: string[];
    }) => import("../_util/type").VueNode;
    params?: any;
    routes?: import("./Breadcrumb").Route[];
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    getPath(path: string, params: unknown): string;
    addChildPath(paths: string[], childPath: string, params: unknown): string[];
    genForRoutes({ routes, params, separator, itemRender }: any): any;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Item: typeof BreadcrumbItem;
    readonly Separator: typeof BreadcrumbSeparator;
};
export default _default;
