import { RadioChangeEvent } from './interface';
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultValue: import("vue-types").VueTypeValidableDef<any>;
    value: import("vue-types").VueTypeValidableDef<any>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large"> & {
        default: "default" | "small" | "large";
    };
    options: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    buttonStyle: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, {
    updatingValue: boolean;
    configProvider: import("../config-provider").ConfigConsumerProps;
    radioGroupContext: any;
}, {
    stateValue: any;
}, {}, {
    onRadioChange(ev: RadioChangeEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:value")[], "change" | "update:value", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    size: "default" | "small" | "large";
    options: unknown[];
    name: string;
    buttonStyle: string;
} & {
    value?: any;
    disabled?: boolean;
    defaultValue?: any;
}>, {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    size: "default" | "small" | "large";
    options: unknown[];
    name: string;
    buttonStyle: string;
}>;
export default _default;
