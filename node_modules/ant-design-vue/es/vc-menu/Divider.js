import { createVNode as _createVNode } from "vue";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { inject } from 'vue';
import { injectExtraPropsKey } from './FunctionProvider';
export default {
  name: 'MenuDivider',
  inheritAttrs: false,
  props: {
    disabled: {
      type: Boolean,
      default: true
    },
    rootPrefixCls: String
  },
  setup: function setup() {
    return {
      injectExtraProps: inject(injectExtraPropsKey, function () {
        return {};
      })
    };
  },
  render: function render() {
    var _Object$assign = _extends(_extends({}, this.$props), this.injectExtraProps),
        rootPrefixCls = _Object$assign.rootPrefixCls;

    var _this$$attrs = this.$attrs,
        _this$$attrs$class = _this$$attrs.class,
        className = _this$$attrs$class === void 0 ? '' : _this$$attrs$class,
        style = _this$$attrs.style;
    return _createVNode("li", {
      "class": [className, "".concat(rootPrefixCls, "-item-divider")],
      "style": style
    }, null);
  }
};