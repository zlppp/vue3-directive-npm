{
  "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
  "framework": "vue",
  "name": "types",
  "version": "2.1.6",
  "contributions": {
    "html": {
      "tags": [
        {
          "name": "a-alert",
          "slots": [
            {
              "name": "closeText",
              "description": "Close text to show"
            },
            {
              "name": "description",
              "description": "Additional content of Alert"
            },
            {
              "name": "icon",
              "description": "Custom icon, effective when `showIcon` is `true`"
            },
            {
              "name": "message",
              "description": "Content of Alert"
            }
          ],
          "events": [
            {
              "name": "close",
              "description": "Callback when Alert is closed"
            }
          ],
          "attributes": [
            {
              "name": "afterClose",
              "default": "-",
              "description": "Called when close animation is finished",
              "value": {
                "type": "() => void",
                "kind": "expression"
              }
            },
            {
              "name": "banner",
              "default": "false",
              "description": "Whether to show as banner",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "closable",
              "default": "",
              "description": "Whether Alert can be closed",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "closeText",
              "default": "-",
              "description": "Close text to show",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "description",
              "default": "-",
              "description": "Additional content of Alert",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "Custom icon, effective when `showIcon` is `true`",
              "value": {
                "type": "vnode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "message",
              "default": "-",
              "description": "Content of Alert",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "showIcon",
              "default": "false,in `banner` mode default is true",
              "description": "Whether to show icon",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`info`,in `banner` mode default is `warning`",
              "description": "Type of Alert styles, options: `success`, `info`, `warning`, `error`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-anchor",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-anchor",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "affix",
              "default": "true",
              "description": "Fixed mode of Anchor",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "bounds",
              "default": "5(px)",
              "description": "Bounding distance of anchor area",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "getContainer",
              "default": "() => window",
              "description": "Scrolling container",
              "value": {
                "type": "() => HTMLElement",
                "kind": "expression"
              }
            },
            {
              "name": "offsetBottom",
              "default": "-",
              "description": "Pixels to offset from bottom when calculating position of scroll",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "offsetTop",
              "default": "0",
              "description": "Pixels to offset from top when calculating position of scroll",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "showInkInFixed",
              "default": "false",
              "description": "Whether show ink-balls in Fixed mode",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "wrapperClass",
              "default": "-",
              "description": "The class name of the container",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "wrapperStyle",
              "default": "-",
              "description": "The style of the container",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "getCurrentAnchor",
              "default": "-",
              "description": "Customize the anchor highlight",
              "value": {
                "type": "() => string",
                "kind": "expression"
              }
            },
            {
              "name": "targetOffset",
              "default": "`offsetTop`",
              "description": "Anchor scroll offset, default as `offsetTop`, [example](#components-anchor-demo-targetOffset)",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-affix",
          "slots": [],
          "events": [
            {
              "name": "change",
              "description": "Callback for when Affix state is changed"
            }
          ],
          "attributes": [
            {
              "name": "offsetBottom",
              "default": "-",
              "description": "Offset from the bottom of the viewport (in pixels)",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "offsetTop",
              "default": "0",
              "description": "Offset from the top of the viewport (in pixels)",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "target",
              "default": "() => window",
              "description": "Specifies the scrollable area DOM node",
              "value": {
                "type": "() => HTMLElement",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-autocomplete",
          "slots": [
            {
              "name": "options",
              "description": "Data source for autocomplete"
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Called when select an option or input value change, or value of input is changed"
            },
            {
              "name": "blur",
              "description": "Called when leaving the component."
            },
            {
              "name": "focus",
              "description": "Called when entering the component"
            },
            {
              "name": "search",
              "description": "Called when searching items."
            },
            {
              "name": "select",
              "description": "Called when a option is selected. param is option's value and option instance."
            },
            {
              "name": "dropdownVisibleChange",
              "description": "Call when dropdown open"
            }
          ],
          "attributes": [
            {
              "name": "allowClear",
              "default": "false",
              "description": "Show clear button, effective in multiple mode only.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "backfill",
              "default": "false",
              "description": "backfill selected item the input when using keyboard",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "#default (for customize input element)",
              "default": "`<Input />`",
              "description": "customize input element",
              "value": {
                "type": "HTMLInputElement / HTMLTextAreaElement",
                "kind": "expression"
              }
            },
            {
              "name": "options",
              "default": "",
              "description": "Data source for autocomplete",
              "value": {
                "type": "slot | [DataSourceItemType](https://github.com/vueComponent/ant-design-vue/blob/724d53b907e577cf5880c1e6742d4c3f924f8f49/components/auto-complete/index.vue#L9)[]",
                "kind": "expression"
              }
            },
            {
              "name": "dropdownMenuStyle",
              "default": "",
              "description": "additional style applied to dropdown menu",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "defaultActiveFirstOption",
              "default": "true",
              "description": "Whether active first option by default",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Whether disabled select",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "filterOption",
              "default": "true",
              "description": "If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded.",
              "value": {
                "type": "boolean or function(inputValue, option)",
                "kind": "expression"
              }
            },
            {
              "name": "optionLabelProp",
              "default": "`children`",
              "description": "Which prop value of option will render as content of select.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "placeholder",
              "default": "-",
              "description": "placeholder of input",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "v-model:value",
              "default": "{ key: string, label: string\\",
              "description": "selected option",
              "value": {
                "type": "string|string[]",
                "kind": "expression"
              }
            },
            {
              "name": "defaultOpen",
              "default": "-",
              "description": "Initial open state of dropdown",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "open",
              "default": "-",
              "description": "Controlled open state of dropdown",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-avatar",
          "slots": [
            {
              "name": "icon",
              "description": "the `Icon` type for an icon avatar, see `Icon` Component"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "icon",
              "default": "-",
              "description": "the `Icon` type for an icon avatar, see `Icon` Component",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "shape",
              "default": "`circle`",
              "description": "the shape of avatar",
              "value": {
                "type": "`circle` | `square`",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "the size of the avatar",
              "value": {
                "type": "number | string: `large` `small` `default`",
                "kind": "expression"
              }
            },
            {
              "name": "src",
              "default": "-",
              "description": "the address of the image for an image avatar",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "srcset",
              "default": "-",
              "description": "a list of sources to use for different screen resolutions",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "alt",
              "default": "-",
              "description": "This attribute defines the alternative text describing the image",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "loadError",
              "default": "-",
              "description": "handler when img load error, return false to prevent default fallback behavior",
              "value": {
                "type": "() => boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-breadcrumb",
          "slots": [
            {
              "name": "separator",
              "description": "Custom separator"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "itemRender",
              "default": "",
              "description": "Custom item renderer, #itemRender=\"{route, params, routes, paths}\"",
              "value": {
                "type": "({route, params, routes, paths}) => vNode",
                "kind": "expression"
              }
            },
            {
              "name": "params",
              "default": "",
              "description": "Routing parameters",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "routes",
              "default": "",
              "description": "The routing stack information of router",
              "value": {
                "type": "[routes[]](#routes)",
                "kind": "expression"
              }
            },
            {
              "name": "separator",
              "default": "",
              "description": "Custom separator",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-breadcrumb-item",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "href",
              "default": "-",
              "description": "Target of hyperlink",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "overlay",
              "default": "-",
              "description": "The dropdown menu",
              "value": {
                "type": "[Menu](/components/menu) | () => Menu",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-breadcrumb-separator",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-backtop",
          "slots": [],
          "events": [
            {
              "name": "click",
              "description": "a callback function, which can be executed when you click the button"
            }
          ],
          "attributes": [
            {
              "name": "target",
              "default": "() => window",
              "description": "specifies the scrollable area dom node",
              "value": {
                "type": "() => HTMLElement",
                "kind": "expression"
              }
            },
            {
              "name": "visibilityHeight",
              "default": "400",
              "description": "the `BackTop` button will not show until the scroll height reaches this value",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-calendar",
          "slots": [
            {
              "name": "headerRender",
              "description": "render custom header in panel"
            }
          ],
          "events": [
            {
              "name": "panelChange",
              "description": "Callback for when panel changes"
            },
            {
              "name": "select",
              "description": "Callback for when a date is selected"
            },
            {
              "name": "change",
              "description": "Callback for when value change"
            }
          ],
          "attributes": [
            {
              "name": "dateCellRender",
              "default": "-",
              "description": "Customize the display of the date cell by setting a scoped slot, the returned content will be appended to the cell",
              "value": {
                "type": "function(object: {current: moment})",
                "kind": "expression"
              }
            },
            {
              "name": "dateFullCellRender",
              "default": "-",
              "description": "Customize the display of the date cell by setting a scoped slot, the returned content will override the cell",
              "value": {
                "type": "function(object: {current: moment})",
                "kind": "expression"
              }
            },
            {
              "name": "defaultValue",
              "default": "default date",
              "description": "The date selected by default",
              "value": {
                "type": "[moment](http://momentjs.com/)",
                "kind": "expression"
              }
            },
            {
              "name": "disabledDate",
              "default": "-",
              "description": "Function that specifies the dates that cannot be selected",
              "value": {
                "type": "(currentDate: moment) => boolean",
                "kind": "expression"
              }
            },
            {
              "name": "fullscreen",
              "default": "`true`",
              "description": "Whether to display in full-screen",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "locale",
              "default": "[default](https://github.com/vueComponent/ant-design-vue/blob/master/components/date-picker/locale/example.json)",
              "description": "The calendar's locale",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "mode",
              "default": "`month`",
              "description": "The display mode of the calendar",
              "value": {
                "type": "`month` | `year`",
                "kind": "expression"
              }
            },
            {
              "name": "monthCellRender",
              "default": "-",
              "description": "Customize the display of the month cell by setting a scoped slot, the returned content will be appended to the cell",
              "value": {
                "type": "function(object: {current: moment})",
                "kind": "expression"
              }
            },
            {
              "name": "monthFullCellRender",
              "default": "-",
              "description": "Customize the display of the month cell by setting a scoped slot, the returned content will override the cell",
              "value": {
                "type": "function(object: {current: moment})",
                "kind": "expression"
              }
            },
            {
              "name": "validRange",
              "default": "-",
              "description": "to set valid range",
              "value": {
                "type": "[[moment](http://momentjs.com/), [moment](http://momentjs.com/)]",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "current date",
              "description": "The current selected date",
              "value": {
                "type": "[moment](http://momentjs.com/)",
                "kind": "expression"
              }
            },
            {
              "name": "headerRender",
              "default": "-",
              "description": "render custom header in panel",
              "value": {
                "type": "function(object:{value: moment, type: string, onChange: f(), onTypeChange: f()}) | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "valueFormat",
              "default": "-",
              "description": "optional, format of binding value. If not specified, the binding value will be a Date object",
              "value": {
                "type": "string，[date formats](https://momentjs.com/docs/#/displaying/format/)",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-button",
          "slots": [
            {
              "name": "icon",
              "description": "set the icon of button, see: Icon component"
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "set the handler to handle `click` event"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "default": "`false`",
              "description": "disabled state of button",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "ghost",
              "default": "false",
              "description": "make background transparent and invert text and border colors, added in 2.7",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "htmlType",
              "default": "`button`",
              "description": "set the original html `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "set the icon of button, see: Icon component",
              "value": {
                "type": "v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "loading",
              "default": "false",
              "description": "set the loading status of button",
              "value": {
                "type": "boolean | { delay: number }",
                "kind": "expression"
              }
            },
            {
              "name": "shape",
              "default": "-",
              "description": "can be set to `circle`, `round` or omitted",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "can be set to `small` `large` or omitted",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`default`",
              "description": "can be set to `primary` `ghost` `dashed` `danger` `link` or omitted (meaning `default`)",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "block",
              "default": "`false`",
              "description": "option to fit button width to its parent width",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-card",
          "slots": [],
          "events": [
            {
              "name": "tabChange",
              "description": "Callback when tab is switched"
            }
          ],
          "attributes": []
        },
        {
          "name": "a-card",
          "slots": [
            {
              "name": "actions",
              "description": "The action list, shows at the bottom of the Card."
            },
            {
              "name": "cover",
              "description": "Card cover"
            },
            {
              "name": "extra",
              "description": "Content to render in the top-right corner of the card"
            },
            {
              "name": "tabList",
              "description": "List of TabPane's head, Custom tabs can be created with the slots property"
            },
            {
              "name": "tabBarExtraContent",
              "description": "Extra content in tab bar"
            },
            {
              "name": "title",
              "description": "Card title"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "actions",
              "default": "-",
              "description": "The action list, shows at the bottom of the Card.",
              "value": {
                "type": "slots",
                "kind": "expression"
              }
            },
            {
              "name": "activeTabKey",
              "default": "-",
              "description": "Current TabPane's key",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "headStyle",
              "default": "-",
              "description": "Inline style to apply to the card head",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "bodyStyle",
              "default": "-",
              "description": "Inline style to apply to the card content",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "bordered",
              "default": "`true`",
              "description": "Toggles rendering of the border around the card",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "cover",
              "default": "-",
              "description": "Card cover",
              "value": {
                "type": "slot",
                "kind": "expression"
              }
            },
            {
              "name": "defaultActiveTabKey",
              "default": "-",
              "description": "Initial active TabPane's key, if `activeTabKey` is not set.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "extra",
              "default": "-",
              "description": "Content to render in the top-right corner of the card",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "hoverable",
              "default": "false",
              "description": "Lift up when hovering card",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "loading",
              "default": "false",
              "description": "Shows a loading indicator while the contents of the card are being fetched",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "tabList",
              "default": "-",
              "description": "List of TabPane's head, Custom tabs can be created with the slots property",
              "value": {
                "type": "Array&lt;{key: string, tab: any, slots: {tab: 'XXX'}}&gt;",
                "kind": "expression"
              }
            },
            {
              "name": "tabBarExtraContent",
              "default": "-",
              "description": "Extra content in tab bar",
              "value": {
                "type": "slot",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "Size of card",
              "value": {
                "type": "`default` | `small`",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "Card title",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "-",
              "description": "Card style type, can be set to `inner` or not set",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-card-meta",
          "slots": [
            {
              "name": "avatar",
              "description": "avatar or icon"
            },
            {
              "name": "description",
              "description": "description content"
            },
            {
              "name": "title",
              "description": "title content"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "avatar",
              "default": "-",
              "description": "avatar or icon",
              "value": {
                "type": "slot",
                "kind": "expression"
              }
            },
            {
              "name": "description",
              "default": "-",
              "description": "description content",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "title content",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-cascader",
          "slots": [],
          "events": [
            {
              "name": "change",
              "description": "callback when finishing cascader select"
            },
            {
              "name": "popupVisibleChange",
              "description": "callback when popup shown or hidden"
            },
            {
              "name": "search",
              "description": "callback when input value change"
            }
          ],
          "attributes": [
            {
              "name": "allowClear",
              "default": "true",
              "description": "whether allow clear",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "changeOnSelect",
              "default": "false",
              "description": "change value on each selection if set to true, see above demo for details",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "defaultValue",
              "default": "\\[]",
              "description": "initial selected value",
              "value": {
                "type": "string[] | number[]",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "whether disabled select",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "displayRender",
              "default": "`labels => labels.join(' / ')`",
              "description": "render function of displaying selected options, you can use #displayRender=\"{labels, selectedOptions}\"",
              "value": {
                "type": "`({labels, selectedOptions}) => VNode`",
                "kind": "expression"
              }
            },
            {
              "name": "expandTrigger",
              "default": "'click'",
              "description": "expand current item when click or hover, one of 'click' 'hover'",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "fieldNames",
              "default": "`{ label: 'label', value: 'value', children: 'children' }`",
              "description": "custom field name for label and value and children",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "getPopupContainer",
              "default": "() => document.body",
              "description": "Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative.",
              "value": {
                "type": "Function(triggerNode)",
                "kind": "expression"
              }
            },
            {
              "name": "loadData",
              "default": "-",
              "description": "To load option lazily, and it cannot work with `showSearch`",
              "value": {
                "type": "`(selectedOptions) => void`",
                "kind": "expression"
              }
            },
            {
              "name": "notFoundContent",
              "default": "'Not Found'",
              "description": "Specify content to show when no result matches.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "options",
              "default": "-",
              "description": "data options of cascade",
              "value": {
                "type": "[Option](#option)[]",
                "kind": "expression"
              }
            },
            {
              "name": "placeholder",
              "default": "'Please select'",
              "description": "input placeholder",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "popupClassName",
              "default": "-",
              "description": "additional className of popup overlay",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "popupStyle",
              "default": "{}",
              "description": "additional style of popup overlay",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "popupPlacement",
              "default": "`bottomLeft`",
              "description": "use preset popup align config from builtinPlacements：`bottomLeft` `bottomRight` `topLeft` `topRight`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "popupVisible",
              "default": "-",
              "description": "set visible of cascader popup",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "showSearch",
              "default": "false",
              "description": "Whether show search input in single mode.",
              "value": {
                "type": "boolean | [object](#showsearch)",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "input size, one of `large` `default` `small`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "suffixIcon",
              "default": "slot",
              "description": "The custom suffix icon",
              "value": {
                "type": "string | VNode ",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "-",
              "description": "selected value",
              "value": {
                "type": "string[] | number[]",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-carousel",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "afterChange",
              "default": "-",
              "description": "Callback function called after the current index changes",
              "value": {
                "type": "function(current)",
                "kind": "expression"
              }
            },
            {
              "name": "autoplay",
              "default": "`false`",
              "description": "Whether to scroll automatically",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "beforeChange",
              "default": "-",
              "description": "Callback function called before the current index changes",
              "value": {
                "type": "function(from, to)",
                "kind": "expression"
              }
            },
            {
              "name": "dots",
              "default": "`true`",
              "description": "Whether to show the dots at the bottom of the gallery",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "dotPosition",
              "default": "bottom",
              "description": "The position of the dots, which can be one of `top` `bottom` `left` `right`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "dotsClass",
              "default": "`slick-dots`",
              "description": "Class name of the dots",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "easing",
              "default": "`linear`",
              "description": "Transition interpolation function name",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "effect",
              "default": "`scrollx`",
              "description": "Transition effect",
              "value": {
                "type": "`scrollx` | `fade`",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-checkbox",
          "slots": [],
          "events": [
            {
              "name": "change",
              "description": "The callback function that is triggered when the state changes."
            },
            {
              "name": "change",
              "description": "The callback function that is triggered when the state changes."
            }
          ],
          "attributes": []
        },
        {
          "name": "a-checkbox",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "checked(v-model)",
              "default": "false",
              "description": "Specifies whether the checkbox is selected.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disable checkbox",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "indeterminate",
              "default": "false",
              "description": "indeterminate checked state of checkbox",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-checkbox",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "disabled",
              "default": "false",
              "description": "Disable all checkboxes",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "name",
              "default": "-",
              "description": "The `name` property of all `input[type=\"checkbox\"]` children",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "options",
              "default": "\\[]",
              "description": "Specifies options, you can customize `label` with slot = \"label\" slot-scope=\"option\"",
              "value": {
                "type": "string[] | Array&lt;{ label: string value: string disabled?: boolean, indeterminate?: boolean, onChange?: function }>",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "\\[]",
              "description": "Used for setting the currently selected value.",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-checkbox",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "blur()",
              "description": "remove focus",
              "value": {
                "type": "",
                "kind": "expression"
              }
            },
            {
              "name": "focus()",
              "description": "get focus",
              "value": {
                "type": "",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-collapse",
          "slots": [],
          "events": [
            {
              "name": "change",
              "description": "Callback function executed when active panel is changed"
            }
          ],
          "attributes": []
        },
        {
          "name": "a-collapse",
          "slots": [
            {
              "name": "expandIcon",
              "description": "allow to customize collapse icon"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "activeKey(v-model)",
              "default": "No default value. In `accordion` mode, it's the key of the first panel.",
              "description": "Key of the active panel",
              "value": {
                "type": "string[]|string",
                "kind": "expression"
              }
            },
            {
              "name": "bordered",
              "default": "`true`",
              "description": "Toggles rendering of the border around the collapse block",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "accordion",
              "default": "`false`",
              "description": "If `true`, `Collapse` renders as `Accordion`",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "expandIcon",
              "default": "#expandIcon=\"props\"",
              "description": "allow to customize collapse icon",
              "value": {
                "type": "Function(props):VNode | slot=\"expandIcon\" slot-scope=\"props\"",
                "kind": "expression"
              }
            },
            {
              "name": "expandIconPosition",
              "default": "-",
              "description": "Set expand icon position: `left`, `right`",
              "value": {
                "type": "`left`",
                "kind": "expression"
              }
            },
            {
              "name": "destroyInactivePanel",
              "default": "`false`",
              "description": "Destroy Inactive Panel",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-collapse-panel",
          "slots": [
            {
              "name": "extra",
              "description": "extra element in the corner"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "disabled",
              "default": "`false`",
              "description": "If `true`, panel cannot be opened or closed",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "forceRender",
              "default": "`false`",
              "description": "Forced render of content on panel, instead of lazy rending after clicking on header",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "header",
              "default": "-",
              "description": "Title of the panel",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "key",
              "default": "-",
              "description": "Unique key identifying the panel from among its siblings",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "showArrow",
              "default": "`true`",
              "description": "If `false`, panel will not show arrow icon",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "extra",
              "default": "-",
              "description": "extra element in the corner",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-colorpicker",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "defaultValue",
              "default": "-",
              "description": "default color",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "config",
              "default": "-",
              "description": "pickr config",
              "value": {
                "type": "[pickr options](https://github.com/Simonwep/pickr)",
                "kind": "expression"
              }
            },
            {
              "name": "value",
              "default": "-",
              "description": "color value",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "locale",
              "default": "-",
              "description": "locale package",
              "value": {
                "type": "[default setting](https://github.com/vueComponent/ant-design-vue/blob/master/components/color-picker/locale)",
                "kind": "expression"
              }
            },
            {
              "name": "colorRounded",
              "default": "0",
              "description": "precision of color",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "'default'",
              "description": "size of pickr",
              "value": {
                "type": "'large'|'small'",
                "kind": "expression"
              }
            },
            {
              "name": "getPopupContainer",
              "default": "() => document.body",
              "description": "to set the container of the floating layer, while the default is to create a div element in body",
              "value": {
                "type": "Function(triggerNode)",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "whether disabled picker",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "format",
              "default": "'HSVA' \\",
              "description": "Color format",
              "value": {
                "type": "'HEXA' |'RGBA' ",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-comment",
          "slots": [
            {
              "name": "actions",
              "description": "List of action items rendered below the comment content"
            },
            {
              "name": "author",
              "description": "The element to display as the comment author"
            },
            {
              "name": "avatar",
              "description": "The element to display as the comment avatar - generally an antd `Avatar` or src"
            },
            {
              "name": "content",
              "description": "The main content of the comment"
            },
            {
              "name": "datetime",
              "description": "A datetime element containing the time to be displayed"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "actions",
              "default": "-",
              "description": "List of action items rendered below the comment content",
              "value": {
                "type": "Array | slot",
                "kind": "expression"
              }
            },
            {
              "name": "author",
              "default": "-",
              "description": "The element to display as the comment author",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "avatar",
              "default": "-",
              "description": "The element to display as the comment avatar - generally an antd `Avatar` or src",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "content",
              "default": "-",
              "description": "The main content of the comment",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "datetime",
              "default": "-",
              "description": "A datetime element containing the time to be displayed",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-configprovider",
          "slots": [
            {
              "name": "renderEmpty",
              "description": "set empty content of components. Ref [Empty](/components/empty/)"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "autoInsertSpaceInButton",
              "default": "true",
              "description": "Set `false` to remove space between 2 chinese characters on Button",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "csp",
              "default": "-",
              "description": "Set [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) config",
              "value": {
                "type": "{ nonce: string }",
                "kind": "expression"
              }
            },
            {
              "name": "renderEmpty",
              "default": "-",
              "description": "set empty content of components. Ref [Empty](/components/empty/)",
              "value": {
                "type": "slot-scope | Function(componentName: string): ReactNode",
                "kind": "expression"
              }
            },
            {
              "name": "getPopupContainer",
              "default": "`() => document.body`",
              "description": "to set the container of the popup element. The default is to create a `div` element in `body`.",
              "value": {
                "type": "Function(triggerNode, dialogContext)",
                "kind": "expression"
              }
            },
            {
              "name": "locale",
              "default": "-",
              "description": "language package setting, you can find the packages in [ant-design-vue/es/locale](http://unpkg.com/ant-design-vue/es/locale/)",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "prefixCls",
              "default": "ant",
              "description": "set prefix class",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "pageHeader",
              "default": "'true'",
              "description": "Unify the ghost of pageHeader ,Ref [pageHeader](<(/components/page-header)>",
              "value": {
                "type": "{ ghost:boolean }",
                "kind": "expression"
              }
            },
            {
              "name": "transformCellText",
              "default": "-",
              "description": "Table data can be changed again before rendering. The default configuration of general user empty data.",
              "value": {
                "type": "Function({ text, column, record, index }) => any",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-descriptions",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-descriptions",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "bordered",
              "default": "false",
              "description": "whether to display the border",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "colon",
              "default": "true",
              "description": "change default props `colon` value of `Descriptions.Item`",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "column",
              "default": "3",
              "description": "the number of `DescriptionItems` in a row,could be a number or a object like `{ xs: 8, sm: 16, md: 24}`,(Only set `bordered={true}` to take effect)",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "extra",
              "default": "#extra",
              "description": "The action area of the description list, placed at the top-right",
              "value": {
                "type": "string | VNode ",
                "kind": "expression"
              }
            },
            {
              "name": "layout",
              "default": "vertical`",
              "description": "Define description layout",
              "value": {
                "type": "`horizontal",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "middle",
              "description": "set the size of the list. Can be set to `middle`,`small`, or not filled",
              "value": {
                "type": "`default",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "#title",
              "description": "The title of the description list, placed at the top",
              "value": {
                "type": "string | VNode ",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-divider",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "dashed",
              "default": "false",
              "description": "whether line is dashed",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "orientation",
              "default": "`center`",
              "description": "position of title inside divider",
              "value": {
                "type": "enum: `left` `right` `center`",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`horizontal`",
              "description": "direction type of divider",
              "value": {
                "type": "enum: `horizontal` `vertical`",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-datepicker",
          "slots": [
            {
              "name": "suffixIcon",
              "description": "The custom suffix icon"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "allowClear",
              "default": "true",
              "description": "Whether to show clear button",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "dateRender",
              "default": "-",
              "description": "custom rendering function for date cells by setting a slot",
              "value": {
                "type": "#dateRender=\"{current, today}\"",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "determine whether the DatePicker is disabled",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabledDate",
              "default": "-",
              "description": "specify the date that cannot be selected",
              "value": {
                "type": "(currentDate: moment) => boolean",
                "kind": "expression"
              }
            },
            {
              "name": "getCalendarContainer",
              "default": "-",
              "description": "to set the container of the floating layer, while the default is to create a `div` element in `body`",
              "value": {
                "type": "function(trigger)",
                "kind": "expression"
              }
            },
            {
              "name": "locale",
              "default": "[default](https://github.com/vueComponent/ant-design-vue/blob/next/components/date-picker/locale/example.json)",
              "description": "localization configuration",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "mode",
              "default": "date",
              "description": "picker panel mode",
              "value": {
                "type": "`time",
                "kind": "expression"
              }
            },
            {
              "name": "open",
              "default": "-",
              "description": "open state of picker",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "placeholder",
              "default": "-",
              "description": "placeholder of date input",
              "value": {
                "type": "string|RangePicker[]",
                "kind": "expression"
              }
            },
            {
              "name": "popupStyle",
              "default": "{}",
              "description": "to customize the style of the popup calendar",
              "value": {
                "type": "CSSProperties",
                "kind": "expression"
              }
            },
            {
              "name": "dropdownClassName",
              "default": "-",
              "description": "to customize the class of the popup calendar",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "-",
              "description": "determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "suffixIcon",
              "default": "-",
              "description": "The custom suffix icon",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "inputReadOnly",
              "default": "-",
              "description": "Set the readonly attribute of the input tag (avoids virtual keyboard on touch devices)",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "align",
              "default": "-",
              "description": "this value will be merged into placement's config, please refer to the settings [dom-align](https://github.com/yiminghe/dom-align)",
              "value": {
                "type": "Object",
                "kind": "expression"
              }
            },
            {
              "name": "valueFormat",
              "default": "-",
              "description": "optional, format of binding value. If not specified, the binding value will be a Date object",
              "value": {
                "type": "string，[date formats](https://momentjs.com/docs/#/displaying/format/)",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-drawer",
          "slots": [
            {
              "name": "title",
              "description": "The title for Drawer."
            },
            {
              "name": "handle",
              "description": "After setting, the drawer is directly mounted on the DOM, and you can control the drawer to open or close through this `handle`."
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "closable",
              "default": "true",
              "description": "Whether a close (x) button is visible on top right of the Drawer dialog or not.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "destroyOnClose",
              "default": "false",
              "description": "Whether to unmount child components on closing drawer or not.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "getContainer",
              "default": "Selectors",
              "description": "Return the mounted node for Drawer.",
              "value": {
                "type": "HTMLElement | `() => HTMLElement` ",
                "kind": "expression"
              }
            },
            {
              "name": "mask",
              "default": "true",
              "description": "Whether to show mask or not.",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "maskClosable",
              "default": "true",
              "description": "Clicking on the mask (area outside the Drawer) to close the Drawer or not.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "maskStyle",
              "default": "{}",
              "description": "Style for Drawer's mask element.",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "The title for Drawer.",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "visible(v-model)",
              "default": "false",
              "description": "Whether the Drawer dialog is visible or not.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "wrapClassName",
              "default": "-",
              "description": "The class name of the container of the Drawer dialog.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "wrapStyle",
              "default": "-",
              "description": "Style of wrapper element which **contains mask** compare to `drawerStyle`",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "drawerStyle",
              "default": "-",
              "description": "Style of the popup layer element",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "headerStyle",
              "default": "-",
              "description": "Style of the drawer header part",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "bodyStyle",
              "default": "-",
              "description": "Style of the drawer content part",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "width",
              "default": "256",
              "description": "Width of the Drawer dialog.",
              "value": {
                "type": "string|number",
                "kind": "expression"
              }
            },
            {
              "name": "height",
              "default": "-",
              "description": "placement is `top` or `bottom`, height of the Drawer dialog.",
              "value": {
                "type": "string|number",
                "kind": "expression"
              }
            },
            {
              "name": "zIndex",
              "default": "1000",
              "description": "The `z-index` of the Drawer.",
              "value": {
                "type": "Number",
                "kind": "expression"
              }
            },
            {
              "name": "placement",
              "default": "'bottom' \\",
              "description": "The placement of the Drawer.",
              "value": {
                "type": "'top' | 'right' ",
                "kind": "expression"
              }
            },
            {
              "name": "handle",
              "default": "-",
              "description": "After setting, the drawer is directly mounted on the DOM, and you can control the drawer to open or close through this `handle`.",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "afterVisibleChange",
              "default": "-",
              "description": "Callback after the animation ends when switching drawers.",
              "value": {
                "type": "function(visible)",
                "kind": "expression"
              }
            },
            {
              "name": "keyboard",
              "default": "true",
              "description": "Whether support press esc to close",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-dropdown",
          "slots": [],
          "events": [
            {
              "name": "visibleChange",
              "description": "a callback function takes an argument: `visible`, is executed when the visible state is changed"
            }
          ],
          "attributes": []
        },
        {
          "name": "a-dropdown",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "disabled",
              "default": "-",
              "description": "whether the dropdown menu is disabled",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "getPopupContainer",
              "default": "`() => document.body`",
              "description": "to set the container of the dropdown menu. The default is to create a `div` element in `body`, you can reset it to the scrolling area and make a relative reposition. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
              "value": {
                "type": "Function(triggerNode)",
                "kind": "expression"
              }
            },
            {
              "name": "overlay(v-slot)",
              "default": "-",
              "description": "the dropdown menu",
              "value": {
                "type": "[Menu](/components/menu)",
                "kind": "expression"
              }
            },
            {
              "name": "overlayClassName",
              "default": "-",
              "description": "Class name of the dropdown root element",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "overlayStyle",
              "default": "-",
              "description": "Style of the dropdown root element",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "placement",
              "default": "`bottomLeft`",
              "description": "placement of pop menu: `bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight`",
              "value": {
                "type": "String",
                "kind": "expression"
              }
            },
            {
              "name": "trigger",
              "default": "`contextmenu`>",
              "description": "the trigger mode which executes the drop-down action, hover doesn't work on mobile device",
              "value": {
                "type": "Array&lt;`click`|`hover`",
                "kind": "expression"
              }
            },
            {
              "name": "visible(v-model)",
              "default": "-",
              "description": "whether the dropdown menu is visible",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-dropdown-button",
          "slots": [
            {
              "name": "icon",
              "description": "Icon (appears on the right)"
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "a callback function, the same as [Button](/components/button), which will be executed when you click the button on the left"
            },
            {
              "name": "visibleChange",
              "description": "a callback function takes an argument: `visible`, is executed when the visible state is changed"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "default": "-",
              "description": "whether the dropdown menu is disabled",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "Icon (appears on the right)",
              "value": {
                "type": "vNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "overlay(v-slot)",
              "default": "-",
              "description": "the dropdown menu",
              "value": {
                "type": "[Menu](/components/menu)",
                "kind": "expression"
              }
            },
            {
              "name": "placement",
              "default": "`bottomLeft`",
              "description": "placement of pop menu: `bottomLeft` `bottomCenter` `bottomRight` `topLeft` `topCenter` `topRight`",
              "value": {
                "type": "String",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "size of the button, the same as [Button](/components/button)",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "trigger",
              "default": "`contextmenu`>",
              "description": "the trigger mode which executes the drop-down action",
              "value": {
                "type": "Array&lt;`click`|`hover`",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`default`",
              "description": "type of the button, the same as [Button](/components/button)",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "visible(v-model)",
              "default": "-",
              "description": "whether the dropdown menu is visible",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-form",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-form",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "model",
              "default": "",
              "description": "data of form component",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "rules",
              "default": "",
              "description": "validation rules of form",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "hideRequiredMark",
              "default": "false",
              "description": "Hide required mark of all form items",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "layout",
              "default": "'inline'",
              "description": "Define form layout",
              "value": {
                "type": "'horizontal'|'vertical'",
                "kind": "expression"
              }
            },
            {
              "name": "labelAlign",
              "default": "'right'",
              "description": "text align of label of all items",
              "value": {
                "type": "'left' | 'right'",
                "kind": "expression"
              }
            },
            {
              "name": "labelCol",
              "default": "",
              "description": "The layout of label. You can set `span` `offset` to something like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` same as with `<Col>`",
              "value": {
                "type": "[object](/components/grid/#Col)",
                "kind": "expression"
              }
            },
            {
              "name": "wrapperCol",
              "default": "",
              "description": "The layout for input controls, same as `labelCol`",
              "value": {
                "type": "[object](/components/grid/#Col)",
                "kind": "expression"
              }
            },
            {
              "name": "colon",
              "default": "true",
              "description": "change default props colon value of Form.Item (only effective when prop layout is horizontal)",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "validateOnRuleChange",
              "default": "true",
              "description": "whether to trigger validation when the `rules` prop is changed",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "name",
              "default": "-",
              "description": "Form name. Will be the prefix of Field `id`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "scrollToFirstError",
              "default": "false",
              "description": "Auto scroll to first failed field when submit",
              "value": {
                "type": "boolean | [options](https://github.com/stipsan/scroll-into-view-if-needed/#options)",
                "kind": "expression"
              }
            },
            {
              "name": "validateTrigger",
              "default": "`change`",
              "description": "Config field validate trigger",
              "value": {
                "type": "string | string[]",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-form-item",
          "slots": [
            {
              "name": "extra",
              "description": "The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time."
            },
            {
              "name": "help",
              "description": "The prompt message. If not provided, the prompt message will be generated by the validation rule."
            },
            {
              "name": "label",
              "description": "Label text"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "name",
              "default": "",
              "description": "a key of `model`. In the use of validate and resetFields method, the attribute is required",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "rules",
              "default": "",
              "description": "validation rules of form",
              "value": {
                "type": "object | array",
                "kind": "expression"
              }
            },
            {
              "name": "autoLink",
              "default": "true",
              "description": "Whether to automatically associate form fields. In most cases, you can use automatic association. If the conditions for automatic association are not met, you can manually associate them. See the notes below.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "colon",
              "default": "true",
              "description": "Used with `label`, whether to display `:` after label text.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "extra",
              "default": "",
              "description": "The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time.",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "hasFeedback",
              "default": "false",
              "description": "Used with `validateStatus`, this option specifies the validation status icon. Recommended to be used only with `Input`.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "help",
              "default": "",
              "description": "The prompt message. If not provided, the prompt message will be generated by the validation rule.",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "htmlFor",
              "default": "",
              "description": "Set sub label `htmlFor`.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "label",
              "default": "",
              "description": "Label text",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "labelCol",
              "default": "",
              "description": "The layout of label. You can set `span` `offset` to something like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` same as with `<Col>`",
              "value": {
                "type": "[object](/components/grid/#Col)",
                "kind": "expression"
              }
            },
            {
              "name": "labelAlign",
              "default": "'right'",
              "description": "text align of label",
              "value": {
                "type": "'left' | 'right'",
                "kind": "expression"
              }
            },
            {
              "name": "required",
              "default": "false",
              "description": "Whether provided or not, it will be generated by the validation rule.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "validateStatus",
              "default": "",
              "description": "The validation status. If not provided, it will be generated by validation rule. options: 'success' 'warning' 'error' 'validating'",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "wrapperCol",
              "default": "",
              "description": "The layout for input controls, same as `labelCol`",
              "value": {
                "type": "[object](/components/grid/#Col)",
                "kind": "expression"
              }
            },
            {
              "name": "validateFirst",
              "default": "false",
              "description": "Whether stop validate on first rule of error for this field.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "validateTrigger",
              "default": "`change`",
              "description": "When to validate the value of children node",
              "value": {
                "type": "string | string[]",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-empty",
          "slots": [
            {
              "name": "description",
              "description": "Customize description"
            },
            {
              "name": "image",
              "description": "Customize image. Will tread as image url when string provided"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "description",
              "default": "-",
              "description": "Customize description",
              "value": {
                "type": "string | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "imageStyle",
              "default": "-",
              "description": "style of image",
              "value": {
                "type": "CSSProperties",
                "kind": "expression"
              }
            },
            {
              "name": "image",
              "default": "false",
              "description": "Customize image. Will tread as image url when string provided",
              "value": {
                "type": "string | v-slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-grid",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-icon",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-common",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "style",
              "default": "-",
              "description": "Style properties of icon, like `fontSize` and `color`",
              "value": {
                "type": "CSSProperties",
                "kind": "expression"
              }
            },
            {
              "name": "spin",
              "default": "false",
              "description": "Rotate icon with animation",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "rotate",
              "default": "-",
              "description": "Rotate by n degrees (not working in IE9)",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "twoToneColor",
              "default": "-",
              "description": "Only supports the two-tone icon. Specify the primary color.",
              "value": {
                "type": "string (hex color)",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-custom",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "style",
              "default": "-",
              "description": "Style properties of icon, like `fontSize` and `color`",
              "value": {
                "type": "CSSProperties",
                "kind": "expression"
              }
            },
            {
              "name": "spin",
              "default": "false",
              "description": "Rotate icon with animation",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "rotate",
              "default": "-",
              "description": "Rotate degrees (not working in IE9)",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "component",
              "default": "-",
              "description": "The component used for the root node.",
              "value": {
                "type": "ComponentType<CustomIconComponentProps>",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-custom",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "scriptUrl",
              "default": "-",
              "description": "The URL generated by [iconfont.cn](http://iconfont.cn/) project.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "extraCommonProps",
              "default": "{}",
              "description": "Define extra properties to the component",
              "value": {
                "type": "`{ class, attrs, props, on, style }`",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-custom",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "width",
              "default": "'1em'",
              "description": "The width of the `svg` element",
              "value": {
                "type": "string | number",
                "kind": "expression"
              }
            },
            {
              "name": "height",
              "default": "'1em'",
              "description": "The height of the `svg` element",
              "value": {
                "type": "string | number",
                "kind": "expression"
              }
            },
            {
              "name": "fill",
              "default": "'currentColor'",
              "description": "Define the color used to paint the `svg` element",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "class",
              "default": "-",
              "description": "The computed class name of the `svg` element",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "style",
              "default": "-",
              "description": "The computed style of the `svg` element",
              "value": {
                "type": "CSSProperties",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-image",
          "slots": [
            {
              "name": "placeholder",
              "description": "Load placeholder, use default placeholder when set `true`"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "alt",
              "default": "-",
              "description": "Image description",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "fallback",
              "default": "-",
              "description": "Load failure fault-tolerant src",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "height",
              "default": "-",
              "description": "Image height",
              "value": {
                "type": "string | number",
                "kind": "expression"
              }
            },
            {
              "name": "placeholder",
              "default": "-",
              "description": "Load placeholder, use default placeholder when set `true`",
              "value": {
                "type": "boolean | slot",
                "kind": "expression"
              }
            },
            {
              "name": "preview",
              "default": "true",
              "description": "preview config, disabled when `false`",
              "value": {
                "type": "boolean | [previewType](#previewType)",
                "kind": "expression"
              }
            },
            {
              "name": "src",
              "default": "-",
              "description": "Image path",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "width",
              "default": "-",
              "description": "Image width",
              "value": {
                "type": "string | number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-input",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-input",
          "slots": [
            {
              "name": "addonAfter",
              "description": "The label text displayed after (on the right side of) the input field."
            },
            {
              "name": "addonBefore",
              "description": "The label text displayed before (on the left side of) the input field."
            },
            {
              "name": "prefix",
              "description": "The prefix icon for the Input."
            },
            {
              "name": "suffix",
              "description": "The suffix icon for the Input."
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "addonAfter",
              "default": "",
              "description": "The label text displayed after (on the right side of) the input field.",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "addonBefore",
              "default": "",
              "description": "The label text displayed before (on the left side of) the input field.",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "defaultValue",
              "default": "",
              "description": "The initial input content",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Whether the input is disabled.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "id",
              "default": "",
              "description": "The ID for input",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "maxlength",
              "default": "",
              "description": "max length",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "prefix",
              "default": "",
              "description": "The prefix icon for the Input.",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "The size of the input box. Note: in the context of a form, the `large` size is used. Available: `large` `default` `small`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "suffix",
              "default": "",
              "description": "The suffix icon for the Input.",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`text`",
              "description": "The type of input, see: [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types)(use `Input.TextArea` instead of `type=\"textarea\"`)",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "",
              "description": "The input content value",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "allowClear",
              "default": "",
              "description": "allow to remove input content with clear icon",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-input",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "change",
              "default": "",
              "description": "callback when user input",
              "value": {
                "type": "function(e)",
                "kind": "expression"
              }
            },
            {
              "name": "pressEnter",
              "description": "The callback function that is triggered when Enter key is pressed.",
              "value": {
                "type": "function(e)",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-input-text-area",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "autosize",
              "default": "boolean|object",
              "description": "Height autosize feature, can be set to `true",
              "value": {
                "type": "false`or an object`{ minRows: 2, maxRows: 6 }`",
                "kind": "expression"
              }
            },
            {
              "name": "defaultValue",
              "default": "",
              "description": "The initial input content",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "",
              "description": "The input content value",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "allowClear",
              "default": "",
              "description": "allow to remove input content with clear icon",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "showCount",
              "default": "false",
              "description": "Whether show text count",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-input-text-area",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "pressEnter",
              "description": "The callback function that is triggered when Enter key is pressed.",
              "value": {
                "type": "function(e)",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-input-search",
          "slots": [
            {
              "name": "enterButton",
              "description": "to show an enter button after input. This prop is conflict with addon."
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "enterButton",
              "default": "false",
              "description": "to show an enter button after input. This prop is conflict with addon.",
              "value": {
                "type": "boolean|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-input-search",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "search",
              "default": "",
              "description": "The callback function that is triggered when you click on the search-icon or press Enter key.",
              "value": {
                "type": "function(value, event)",
                "kind": "expression"
              }
            },
            {
              "name": "loading",
              "default": "",
              "description": "Search box with loading.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-input-group",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "compact",
              "default": "false",
              "description": "Whether use compact style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "The size of `Input.Group` specifies the size of the included `Input` fields. Available: `large` `default` `small`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-input-password",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "visibilityToggle",
              "default": "true",
              "description": "Whether show toggle button",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-inputnumber",
          "slots": [],
          "events": [
            {
              "name": "change",
              "description": "The callback triggered when the value is changed."
            },
            {
              "name": "pressEnter",
              "description": "The callback function that is triggered when Enter key is pressed."
            }
          ],
          "attributes": [
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "defaultValue",
              "default": "",
              "description": "initial value",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "disable the input",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "formatter",
              "default": "-",
              "description": "Specifies the format of the value presented",
              "value": {
                "type": "function(value: number | string): string",
                "kind": "expression"
              }
            },
            {
              "name": "max",
              "default": "Infinity",
              "description": "max value",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "min",
              "default": "-Infinity",
              "description": "min value",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "parser",
              "default": "-",
              "description": "Specifies the value extracted from formatter",
              "value": {
                "type": "function( string): number",
                "kind": "expression"
              }
            },
            {
              "name": "precision",
              "default": "-",
              "description": "precision of input value",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "decimalSeparator",
              "default": "-",
              "description": "decimal separator",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "-",
              "description": "height of input box",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "step",
              "default": "1",
              "description": "The number to which the current value is increased or decreased. It can be an integer or decimal.",
              "value": {
                "type": "number|string",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "",
              "description": "current value",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-layout",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-layout",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "class",
              "default": "-",
              "description": "container className",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "style",
              "default": "-",
              "description": "to customize the styles",
              "value": {
                "type": "object|string",
                "kind": "expression"
              }
            },
            {
              "name": "hasSider",
              "default": "-",
              "description": "whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-layout-sider",
          "slots": [
            {
              "name": "trigger",
              "description": "specify the customized trigger, set to null to hide the trigger"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "breakpoint",
              "default": "-",
              "description": "[breakpoints](/components/grid#api) of the responsive layout",
              "value": {
                "type": "Enum { 'xs', 'sm', 'md', 'lg', 'xl', 'xxl' }",
                "kind": "expression"
              }
            },
            {
              "name": "class",
              "default": "-",
              "description": "container className",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "collapsed(v-model)",
              "default": "-",
              "description": "to set the current status",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "collapsedWidth",
              "default": "80",
              "description": "width of the collapsed sidebar, by setting to `0` a special trigger will appear",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "collapsible",
              "default": "false",
              "description": "whether can be collapsed",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "defaultCollapsed",
              "default": "false",
              "description": "to set the initial status",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "reverseArrow",
              "default": "false",
              "description": "reverse direction of arrow, for a sider that expands from the right",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "style",
              "default": "-",
              "description": "to customize the styles",
              "value": {
                "type": "object|string",
                "kind": "expression"
              }
            },
            {
              "name": "theme",
              "default": "`dark`",
              "description": "color theme of the sidebar",
              "value": {
                "type": "string: `light` `dark`",
                "kind": "expression"
              }
            },
            {
              "name": "trigger",
              "default": "-",
              "description": "specify the customized trigger, set to null to hide the trigger",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "width",
              "default": "200",
              "description": "width of the sidebar",
              "value": {
                "type": "number|string",
                "kind": "expression"
              }
            },
            {
              "name": "zeroWidthTriggerStyle",
              "default": "-",
              "description": "to customize the styles of the special trigger that appears when `collapsedWidth` is 0",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-mentions",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-list",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-list",
          "slots": [
            {
              "name": "footer",
              "description": "List footer renderer"
            },
            {
              "name": "header",
              "description": "List header renderer"
            },
            {
              "name": "loadMore",
              "description": "Shows a load more content"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "bordered",
              "default": "false",
              "description": "Toggles rendering of the border around the list",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "footer",
              "default": "-",
              "description": "List footer renderer",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "grid",
              "default": "-",
              "description": "The grid type of list. You can set grid to something like {gutter: 16, column: 4}",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "header",
              "default": "-",
              "description": "List header renderer",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "itemLayout",
              "default": "-",
              "description": "The layout of list, default is `horizontal`, If a vertical list is desired, set the itemLayout property to `vertical`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "rowKey",
              "default": "`key`",
              "description": "Item's unique key, could be a string or function that returns a string",
              "value": {
                "type": "string|Function(record):string",
                "kind": "expression"
              }
            },
            {
              "name": "loading",
              "default": "false",
              "description": "Shows a loading indicator while the contents of the list are being fetched",
              "value": {
                "type": "boolean|[object](https://www.antdv.com/components/spin/#API)",
                "kind": "expression"
              }
            },
            {
              "name": "loadMore",
              "default": "-",
              "description": "Shows a load more content",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "locale",
              "default": "emptyText: 'No Data' <br>",
              "description": "i18n text including empty text",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "pagination",
              "default": "false",
              "description": "Pagination [config](https://www.antdv.com/components/pagination/#API), hide it by setting it to false",
              "value": {
                "type": "boolean | object",
                "kind": "expression"
              }
            },
            {
              "name": "split",
              "default": "true",
              "description": "Toggles rendering of the split under the list item",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "dataSource",
              "default": "-",
              "description": "dataSource array for list",
              "value": {
                "type": "any[]",
                "kind": "expression"
              }
            },
            {
              "name": "renderItem",
              "default": "",
              "description": "Custom item renderer, #renderItem=\"{item, index}\"",
              "value": {
                "type": "({item, index}) => vNode",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-list",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "column",
              "default": "-",
              "description": "column of grid",
              "value": {
                "type": "number oneOf [ 1, 2, 3, 4, 6, 8, 12, 24]",
                "kind": "expression"
              }
            },
            {
              "name": "gutter",
              "default": "0",
              "description": "spacing between grid",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`small`",
              "description": "Size of list",
              "value": {
                "type": "`default` | `middle` ",
                "kind": "expression"
              }
            },
            {
              "name": "xs",
              "default": "-",
              "description": "`<576px` column of grid",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "sm",
              "default": "-",
              "description": "`≥576px` column of grid",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "md",
              "default": "-",
              "description": "`≥768px` column of grid",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "lg",
              "default": "-",
              "description": "`≥992px` column of grid",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "xl",
              "default": "-",
              "description": "`≥1200px` column of grid",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "xxl",
              "default": "-",
              "description": "`≥1600px` column of grid",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-list-item",
          "slots": [
            {
              "name": "actions",
              "description": "The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right."
            },
            {
              "name": "extra",
              "description": "The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right."
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "actions",
              "default": "-",
              "description": "The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right.",
              "value": {
                "type": "Array<vNode>|slot",
                "kind": "expression"
              }
            },
            {
              "name": "extra",
              "default": "-",
              "description": "The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right.",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-list-item.-meta",
          "slots": [
            {
              "name": "avatar",
              "description": "The avatar of list item"
            },
            {
              "name": "description",
              "description": "The description of list item"
            },
            {
              "name": "title",
              "description": "The title of list item"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "avatar",
              "default": "-",
              "description": "The avatar of list item",
              "value": {
                "type": "slot",
                "kind": "expression"
              }
            },
            {
              "name": "description",
              "default": "-",
              "description": "The description of list item",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "The title of list item",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-menu",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-menu",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "forceSubMenuRender",
              "default": "false",
              "description": "render submenu into DOM before it shows",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "inlineCollapsed",
              "default": "-",
              "description": "specifies the collapsed status when menu is inline mode",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "inlineIndent",
              "default": "24",
              "description": "indent px of inline menu item on each level",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "mode",
              "default": "`horizontal` \\",
              "description": "type of the menu; `vertical`, `horizontal`, and `inline` modes are supported",
              "value": {
                "type": "string: `vertical` | `vertical-right` ",
                "kind": "expression"
              }
            },
            {
              "name": "multiple",
              "default": "false",
              "description": "Allow selection of multiple items",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "openKeys(v-model)",
              "default": "",
              "description": "array with the keys of currently opened sub menus",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "selectable",
              "default": "true",
              "description": "allow selecting menu items",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "selectedKeys(v-model)",
              "default": "",
              "description": "array with the keys of currently selected menu items",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "style",
              "default": "",
              "description": "style of the root node",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "subMenuCloseDelay",
              "default": "0.1",
              "description": "delay time to hide submenu when mouse leave, unit: second",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "subMenuOpenDelay",
              "default": "0",
              "description": "delay time to show submenu when mouse enter, unit: second",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "theme",
              "default": "`light`",
              "description": "color theme of the menu",
              "value": {
                "type": "string: `light` `dark`",
                "kind": "expression"
              }
            },
            {
              "name": "overflowedIndicator",
              "default": "`<span>···</span>`",
              "description": "Customized icon when menu is collapsed",
              "value": {
                "type": "DOM",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-menu",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "click",
              "description": "callback executed when a menu item is clicked",
              "value": {
                "type": "function({ item, key, keyPath })",
                "kind": "expression"
              }
            },
            {
              "name": "deselect",
              "description": "callback executed when a menu item is deselected, only supported for multiple mode",
              "value": {
                "type": "function({ item, key, selectedKeys })",
                "kind": "expression"
              }
            },
            {
              "name": "openChange",
              "description": "called when open/close sub menu",
              "value": {
                "type": "function(openKeys: string[])",
                "kind": "expression"
              }
            },
            {
              "name": "select",
              "description": "callback executed when a menu item is selected",
              "value": {
                "type": "function({ item, key, selectedKeys })",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-menu-item",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "disabled",
              "default": "false",
              "description": "whether menu item is disabled or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "key",
              "default": "",
              "description": "unique id of the menu item",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "",
              "description": "set display title for collapsed item",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-menu-sub-menu",
          "slots": [
            {
              "name": "title",
              "description": "title of the sub menu"
            },
            {
              "name": "expandIcon",
              "description": "Customized expandIcon"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "popupClassName",
              "default": "",
              "description": "Sub-menu class name",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "whether sub menu is disabled or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "key",
              "default": "",
              "description": "Unique ID of the sub menu",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "",
              "description": "title of the sub menu",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "expandIcon",
              "default": "arrow icon",
              "description": "Customized expandIcon",
              "value": {
                "type": "slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-menu-sub-menu",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "titleClick",
              "description": "callback executed when the sub menu title is clicked",
              "value": {
                "type": "function({ key, domEvent })",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-menu-item-group",
          "slots": [
            {
              "name": "title",
              "description": "title of the group"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "children",
              "default": "",
              "description": "sub-menu items",
              "value": {
                "type": "MenuItem[]",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "",
              "description": "title of the group",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-message",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "content",
              "default": "-",
              "description": "content of the message",
              "value": {
                "type": "string| VNode",
                "kind": "expression"
              }
            },
            {
              "name": "duration",
              "default": "1.5",
              "description": "time(seconds) before auto-dismiss, don't dismiss if set to 0",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "onClose",
              "default": "-",
              "description": "Specify a function that will be called when the message is closed",
              "value": {
                "type": "Function",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-modal",
          "slots": [
            {
              "name": "cancelText",
              "description": "Text of the Cancel button"
            },
            {
              "name": "closeIcon",
              "description": "custom close icon"
            },
            {
              "name": "footer",
              "description": "Footer content, set as `:footer=\"null\"` when you don't need default buttons"
            },
            {
              "name": "okText",
              "description": "Text of the OK button"
            },
            {
              "name": "title",
              "description": "The modal dialog's title"
            }
          ],
          "events": [
            {
              "name": "cancel",
              "description": "Specify a function that will be called when a user clicks mask, close button on top right or Cancel button"
            },
            {
              "name": "ok",
              "description": "Specify a function that will be called when a user clicks the OK button"
            }
          ],
          "attributes": [
            {
              "name": "afterClose",
              "default": "-",
              "description": "Specify a function that will be called when modal is closed completely.",
              "value": {
                "type": "function",
                "kind": "expression"
              }
            },
            {
              "name": "bodyStyle",
              "default": "{}",
              "description": "Body style for modal body element. Such as height, padding etc.",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "cancelText",
              "default": "`Cancel`",
              "description": "Text of the Cancel button",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "centered",
              "default": "`false`",
              "description": "Centered Modal",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "closable",
              "default": "true",
              "description": "Whether a close (x) button is visible on top right of the modal dialog or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "closeIcon",
              "default": "-",
              "description": "custom close icon",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "confirmLoading",
              "default": "false",
              "description": "Whether to apply loading visual effect for OK button or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "destroyOnClose",
              "default": "false",
              "description": "Whether to unmount child components on onClose",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "footer",
              "default": "OK and Cancel buttons",
              "description": "Footer content, set as `:footer=\"null\"` when you don't need default buttons",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "forceRender",
              "default": "false",
              "description": "Force render Modal",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "getContainer",
              "default": "() => document.body",
              "description": "Return the mount node for Modal",
              "value": {
                "type": "(instance): HTMLElement",
                "kind": "expression"
              }
            },
            {
              "name": "mask",
              "default": "true",
              "description": "Whether show mask or not.",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "maskClosable",
              "default": "true",
              "description": "Whether to close the modal dialog when the mask (area outside the modal) is clicked",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "maskStyle",
              "default": "{}",
              "description": "Style for modal's mask element.",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "okText",
              "default": "`OK`",
              "description": "Text of the OK button",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "okType",
              "default": "`primary`",
              "description": "Button `type` of the OK button",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "okButtonProps",
              "default": "-",
              "description": "The ok button props",
              "value": {
                "type": "[ButtonProps](/components/button/#API)",
                "kind": "expression"
              }
            },
            {
              "name": "cancelButtonProps",
              "default": "-",
              "description": "The cancel button props",
              "value": {
                "type": "[ButtonProps](/components/button/#API)",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "The modal dialog's title",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "visible",
              "default": "false",
              "description": "Whether the modal dialog is visible or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "width",
              "default": "520",
              "description": "Width of the modal dialog",
              "value": {
                "type": "string|number",
                "kind": "expression"
              }
            },
            {
              "name": "wrapClassName",
              "default": "-",
              "description": "The class name of the container of the modal dialog",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "zIndex",
              "default": "1000",
              "description": "The `z-index` of the Modal",
              "value": {
                "type": "Number",
                "kind": "expression"
              }
            },
            {
              "name": "dialogStyle",
              "default": "-",
              "description": "Style of floating layer, typically used at least for adjusting the position.",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "dialogClass",
              "default": "-",
              "description": "className of floating layer.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-modalmethod()",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "autoFocusButton",
              "default": "`ok`",
              "description": "Specify which button to autofocus",
              "value": {
                "type": "null|string: `ok` `cancel`",
                "kind": "expression"
              }
            },
            {
              "name": "cancelText",
              "default": "`Cancel`",
              "description": "Text of the Cancel button",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "centered",
              "default": "`false`",
              "description": "Centered Modal",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "closable",
              "default": "`false`",
              "description": "Whether a close (x) button is visible on top right of the modal dialog or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "class",
              "default": "-",
              "description": "class of container",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "content",
              "default": "function(h)",
              "description": "Content",
              "value": {
                "type": "string|vNode ",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "custom icon (`Added in 1.14.0`)",
              "value": {
                "type": "VNode |()=>VNode",
                "kind": "expression"
              }
            },
            {
              "name": "keyboard",
              "default": "true",
              "description": "Whether support press esc to close",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "mask",
              "default": "true",
              "description": "Whether show mask or not.",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "maskClosable",
              "default": "`false`",
              "description": "Whether to close the modal dialog when the mask (area outside the modal) is clicked",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "okText",
              "default": "`OK`",
              "description": "Text of the OK button",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "okType",
              "default": "`primary`",
              "description": "Button `type` of the OK button",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "okButtonProps",
              "default": "-",
              "description": "The ok button props",
              "value": {
                "type": "[ButtonProps](/components/button)",
                "kind": "expression"
              }
            },
            {
              "name": "cancelButtonProps",
              "default": "-",
              "description": "The cancel button props",
              "value": {
                "type": "[ButtonProps](/components/button)",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "function(h)",
              "description": "Title",
              "value": {
                "type": "string|vNode ",
                "kind": "expression"
              }
            },
            {
              "name": "width",
              "default": "416",
              "description": "Width of the modal dialog",
              "value": {
                "type": "string|number",
                "kind": "expression"
              }
            },
            {
              "name": "zIndex",
              "default": "1000",
              "description": "The `z-index` of the Modal",
              "value": {
                "type": "Number",
                "kind": "expression"
              }
            },
            {
              "name": "onCancel",
              "default": "-",
              "description": "Specify a function that will be called when the user clicks the Cancel button. The parameter of this function is a function whose execution should include closing the dialog. You can also just return a promise and when the promise is resolved, the modal dialog will also be closed",
              "value": {
                "type": "function",
                "kind": "expression"
              }
            },
            {
              "name": "onOk",
              "default": "-",
              "description": "Specify a function that will be called when the user clicks the OK button. The parameter of this function is a function whose execution should include closing the dialog. You can also just return a promise and when the promise is resolved, the modal dialog will also be closed",
              "value": {
                "type": "function",
                "kind": "expression"
              }
            },
            {
              "name": "parentContext",
              "default": "-",
              "description": "The parent context of the popup is generally used to get the parent provider, such as the configuration of `ConfigProvider`",
              "value": {
                "type": "vue instance",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-notification",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "bottom",
              "default": "`24px`",
              "description": "Distance from the bottom of the viewport, when `placement` is `bottomRight` or `bottomLeft` (unit: pixels).",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "btn",
              "default": "-",
              "description": "Customized close button",
              "value": {
                "type": "VNode",
                "kind": "expression"
              }
            },
            {
              "name": "class",
              "default": "-",
              "description": "Customized CSS class",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "description",
              "default": "-",
              "description": "The content of notification box (required)",
              "value": {
                "type": "string| VNode",
                "kind": "expression"
              }
            },
            {
              "name": "duration",
              "default": "4.5",
              "description": "Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "getContainer",
              "default": "() => document.body",
              "description": "Return the mount node for Notification",
              "value": {
                "type": "() => HTMLNode",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "Customized icon",
              "value": {
                "type": "VNode",
                "kind": "expression"
              }
            },
            {
              "name": "key",
              "default": "-",
              "description": "The unique identifier of the Notification",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "message",
              "default": "-",
              "description": "The title of notification box (required)",
              "value": {
                "type": "string|VNode",
                "kind": "expression"
              }
            },
            {
              "name": "placement",
              "default": "`topRight`",
              "description": "Position of Notification, can be one of `topLeft` `topRight` `bottomLeft` `bottomRight`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "style",
              "default": "-",
              "description": "Customized inline style",
              "value": {
                "type": "Object | string",
                "kind": "expression"
              }
            },
            {
              "name": "onClose",
              "default": "-",
              "description": "Specify a function that will be called when the close button is clicked",
              "value": {
                "type": "Function",
                "kind": "expression"
              }
            },
            {
              "name": "onClick",
              "default": "-",
              "description": "Specify a function that will be called when the notification is clicked",
              "value": {
                "type": "Function",
                "kind": "expression"
              }
            },
            {
              "name": "top",
              "default": "`24px`",
              "description": "Distance from the top of the viewport, when `placement` is `topRight` or `topLeft` (unit: pixels).",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "closeIcon",
              "default": "-",
              "description": "custom close icon",
              "value": {
                "type": "VNode",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-pageheader",
          "slots": [
            {
              "name": "title",
              "description": "custom title text"
            },
            {
              "name": "subTitle",
              "description": "custom subTitle text"
            },
            {
              "name": "backIcon",
              "description": "custom back icon, if false the back icon will not be displayed"
            },
            {
              "name": "extra",
              "description": "Operating area, at the end of the line of the title line"
            },
            {
              "name": "footer",
              "description": "PageHeader's footer, generally used to render TabBar"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "title",
              "default": "-",
              "description": "custom title text",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "subTitle",
              "default": "-",
              "description": "custom subTitle text",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "ghost",
              "default": "true",
              "description": "PageHeader type, will change background color",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "avatar",
              "default": "-",
              "description": "Avatar next to the title bar",
              "value": {
                "type": "[avatar props](/components/avatar/)",
                "kind": "expression"
              }
            },
            {
              "name": "backIcon",
              "default": "`<ArrowLeft />`",
              "description": "custom back icon, if false the back icon will not be displayed",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "tags",
              "default": "-",
              "description": "Tag list next to title",
              "value": {
                "type": "[Tag](/components/tag/)[] | [Tag](/components/tag/)",
                "kind": "expression"
              }
            },
            {
              "name": "extra",
              "default": "-",
              "description": "Operating area, at the end of the line of the title line",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "breadcrumb",
              "default": "-",
              "description": "Breadcrumb configuration",
              "value": {
                "type": "[breadcrumb](/components/breadcrumb/)",
                "kind": "expression"
              }
            },
            {
              "name": "footer",
              "default": "-",
              "description": "PageHeader's footer, generally used to render TabBar",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-pagination",
          "slots": [],
          "events": [
            {
              "name": "change",
              "description": "a callback function, executed when the page number is changed, and it takes the resulting page number and pageSize as its arguments"
            },
            {
              "name": "showSizeChange",
              "description": "a callback function, executed when `pageSize` is changed"
            }
          ],
          "attributes": [
            {
              "name": "current(v-model)",
              "default": "-",
              "description": "current page number",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "pageSize(v-model)",
              "default": "-",
              "description": "number of data items per page",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "defaultCurrent",
              "default": "1",
              "description": "default initial page number",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "defaultPageSize",
              "default": "10",
              "description": "default number of data items per page",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "-",
              "description": "Disable pagination",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "hideOnSinglePage",
              "default": "false",
              "description": "Whether to hide pager on single page",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "itemRender",
              "default": "'next', originalElement) => vNode \\",
              "description": "to customize item innerHTML",
              "value": {
                "type": "(page, type: 'page' | 'prev' ",
                "kind": "expression"
              }
            },
            {
              "name": "pageSizeOptions",
              "default": "\\['10', '20', '30', '40']",
              "description": "specify the sizeChanger options",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "showLessItems",
              "default": "false",
              "description": "Show less page items",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "showQuickJumper",
              "default": "false",
              "description": "determine whether you can jump to pages directly",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "showSizeChanger",
              "default": "false",
              "description": "determine whether `pageSize` can be changed",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "showTitle",
              "default": "true",
              "description": "Show page item's title",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "showTotal",
              "default": "-",
              "description": "to display the total number and range",
              "value": {
                "type": "Function(total, range)",
                "kind": "expression"
              }
            },
            {
              "name": "simple",
              "default": "-",
              "description": "whether to use simple mode",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "\"\"",
              "description": "specify the size of `Pagination`, can be set to `small`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "total",
              "default": "0",
              "description": "total number of data items",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-popconfirm",
          "slots": [
            {
              "name": "cancelText",
              "description": "text of the Cancel button"
            },
            {
              "name": "okText",
              "description": "text of the Confirm button"
            },
            {
              "name": "title",
              "description": "title of the confirmation box"
            },
            {
              "name": "icon",
              "description": "customize icon of confirmation"
            }
          ],
          "events": [
            {
              "name": "cancel",
              "description": "callback of cancel"
            },
            {
              "name": "confirm",
              "description": "callback of confirmation"
            },
            {
              "name": "visibleChange",
              "description": "Callback executed when visibility of the tooltip card is changed"
            }
          ],
          "attributes": [
            {
              "name": "cancelText",
              "default": "`Cancel`",
              "description": "text of the Cancel button",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "okText",
              "default": "`Confirm`",
              "description": "text of the Confirm button",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "okType",
              "default": "`primary`",
              "description": "Button `type` of the Confirm button",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "title of the confirmation box",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "&lt;Icon type=\"exclamation-circle\" /&gt;",
              "description": "customize icon of confirmation",
              "value": {
                "type": "vNode|slot",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "is show popconfirm when click its childrenNode",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-popover",
          "slots": [
            {
              "name": "content",
              "description": "Content of the card"
            },
            {
              "name": "title",
              "description": "Title of the card"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "content",
              "default": "vNode",
              "description": "Content of the card",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "VNode",
              "description": "Title of the card",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-progress",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "type",
              "default": "`line`",
              "description": "to set the type, options: `line` `circle` `dashboard`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "format",
              "default": "`percent => percent + '%'`",
              "description": "template function of the content",
              "value": {
                "type": "function(percent, successPercent) | #format=\"percent, successPercent\"",
                "kind": "expression"
              }
            },
            {
              "name": "percent",
              "default": "0",
              "description": "to set the completion percentage",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "showInfo",
              "default": "true",
              "description": "whether to display the progress value and the status icon",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "status",
              "default": "-",
              "description": "to set the status of the Progress, options: `success` `exception` `normal` `active`(line only)",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "strokeLinecap",
              "default": "`round`",
              "description": "to set the style of the progress linecap",
              "value": {
                "type": "Enum{ 'round', 'square' }",
                "kind": "expression"
              }
            },
            {
              "name": "strokeColor",
              "default": "-",
              "description": "color of progress bar",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "successPercent",
              "default": "0",
              "description": "segmented success percent",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-radio",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-radio",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "checked(v-model)",
              "default": "-",
              "description": "Specifies whether the radio is selected.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disable radio",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "value",
              "default": "-",
              "description": "According to value for comparison, to determine whether the selected",
              "value": {
                "type": "any",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-radio-group",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "defaultValue",
              "default": "-",
              "description": "Default selected value",
              "value": {
                "type": "any",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disable all radio buttons",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "name",
              "default": "-",
              "description": "The `name` property of all `input[type=\"radio\"]` children",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "options",
              "default": "-",
              "description": "set children optional",
              "value": {
                "type": "string[] | Array&lt;{ label: string value: string disabled?: boolean }>",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`small`",
              "description": "size for radio button style",
              "value": {
                "type": "`large` | `default` ",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "-",
              "description": "Used for setting the currently selected value.",
              "value": {
                "type": "any",
                "kind": "expression"
              }
            },
            {
              "name": "buttonStyle",
              "default": "`outline`",
              "description": "style type of radio button",
              "value": {
                "type": "`outline` | `solid`",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-radio-group",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "change",
              "description": "The callback function that is triggered when the state changes.",
              "value": {
                "type": "Function(e:Event)",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-radio",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "blur()",
              "description": "remove focus",
              "value": {
                "type": "",
                "kind": "expression"
              }
            },
            {
              "name": "focus()",
              "description": "get focus",
              "value": {
                "type": "",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-rate",
          "slots": [
            {
              "name": "character",
              "description": "custom character of rate"
            }
          ],
          "events": [
            {
              "name": "blur",
              "description": "callback when component lose focus"
            },
            {
              "name": "change",
              "description": "callback when select value"
            },
            {
              "name": "focus",
              "description": "callback when component get focus"
            },
            {
              "name": "hoverChange",
              "description": "callback when hover item"
            },
            {
              "name": "keydown",
              "description": "callback when keydown on component"
            }
          ],
          "attributes": [
            {
              "name": "allowClear",
              "default": "true",
              "description": "whether to allow clear when click again",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "allowHalf",
              "default": "false",
              "description": "whether to allow semi selection",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "character",
              "default": "`<StarOutlined />`",
              "description": "custom character of rate",
              "value": {
                "type": "String or slot=\"character\"",
                "kind": "expression"
              }
            },
            {
              "name": "count",
              "default": "5",
              "description": "star count",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "read only, unable to interact",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "tooltips",
              "default": "-",
              "description": "Customize tooltip by each character",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "-",
              "description": "current value",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-result",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "title",
              "default": "#title",
              "description": "title string",
              "value": {
                "type": "string | VNode ",
                "kind": "expression"
              }
            },
            {
              "name": "subTitle",
              "default": "#subTitle",
              "description": "subTitle string",
              "value": {
                "type": "string | VNode ",
                "kind": "expression"
              }
            },
            {
              "name": "status",
              "default": "'error'",
              "description": "result status,decide icons and colors",
              "value": {
                "type": "`'success'",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "custom back icon",
              "value": {
                "type": "#icon",
                "kind": "expression"
              }
            },
            {
              "name": "extra",
              "default": "-",
              "description": "operating area",
              "value": {
                "type": "#extra",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-select",
          "slots": [],
          "events": [
            {
              "name": "blur",
              "description": "Called when blur"
            },
            {
              "name": "change",
              "description": "Called when select an option or input value change, or value of input is changed in combobox mode"
            },
            {
              "name": "deselect",
              "description": "Called when a option is deselected, the params are option's value (or key) . only called for multiple or tags, effective in multiple or tags mode only."
            },
            {
              "name": "focus",
              "description": "Called when focus"
            },
            {
              "name": "inputKeydown",
              "description": "Called when key pressed"
            },
            {
              "name": "mouseenter",
              "description": "Called when mouse enter"
            },
            {
              "name": "mouseleave",
              "description": "Called when mouse leave"
            },
            {
              "name": "popupScroll",
              "description": "Called when dropdown scrolls"
            },
            {
              "name": "search",
              "description": "Callback function that is fired when input changed."
            },
            {
              "name": "select",
              "description": "Called when a option is selected, the params are option's value (or key) and option instance."
            },
            {
              "name": "dropdownVisibleChange",
              "description": "Call when dropdown open"
            }
          ],
          "attributes": []
        },
        {
          "name": "a-select",
          "slots": [
            {
              "name": "dropdownRender",
              "description": "Customize dropdown content"
            },
            {
              "name": "maxTagPlaceholder",
              "description": "Placeholder for not showing tags"
            },
            {
              "name": "notFoundContent",
              "description": "Specify content to show when no result matches.."
            },
            {
              "name": "placeholder",
              "description": "Placeholder of select"
            },
            {
              "name": "suffixIcon",
              "description": "The custom suffix icon"
            },
            {
              "name": "removeIcon",
              "description": "The custom remove icon"
            },
            {
              "name": "clearIcon",
              "description": "The custom clear icon"
            },
            {
              "name": "menuItemSelectedIcon",
              "description": "The custom menuItemSelected icon"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "allowClear",
              "default": "false",
              "description": "Show clear button.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "autoClearSearchValue",
              "default": "true",
              "description": "Whether the current search will be cleared on selecting an item. Only applies when `mode` is set to `multiple` or `tags`.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "autofocus",
              "default": "false",
              "description": "Get focus by default",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "bordered",
              "default": "true",
              "description": "Whether has border style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "defaultActiveFirstOption",
              "default": "true",
              "description": "Whether active first option by default",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Whether disabled select",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "dropdownClassName",
              "default": "-",
              "description": "className of dropdown menu",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "dropdownMatchSelectWidth",
              "default": "true",
              "description": "Whether dropdown's width is same with select.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "dropdownRender",
              "default": "-",
              "description": "Customize dropdown content",
              "value": {
                "type": "({menuNode: VNode, props}) => VNode | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "dropdownStyle",
              "default": "-",
              "description": "style of dropdown menu",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "dropdownMenuStyle",
              "default": "-",
              "description": "additional style applied to dropdown menu",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "filterOption",
              "default": "true",
              "description": "If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded.",
              "value": {
                "type": "boolean or function(inputValue, option)",
                "kind": "expression"
              }
            },
            {
              "name": "firstActiveValue",
              "default": "-",
              "description": "Value of action option by default",
              "value": {
                "type": "string|string[]",
                "kind": "expression"
              }
            },
            {
              "name": "getPopupContainer",
              "default": "() => document.body",
              "description": "Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative.",
              "value": {
                "type": "function(triggerNode)",
                "kind": "expression"
              }
            },
            {
              "name": "labelInValue",
              "default": "false",
              "description": "whether to embed label in value, turn the format of value from `string` to `{key: string, label: vNodes}`",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "maxTagCount",
              "default": "-",
              "description": "Max tag count to show",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "maxTagPlaceholder",
              "default": "-",
              "description": "Placeholder for not showing tags",
              "value": {
                "type": "slot/function(omittedValues)",
                "kind": "expression"
              }
            },
            {
              "name": "maxTagTextLength",
              "default": "-",
              "description": "Max text length to show",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "mode",
              "default": "-",
              "description": "Set mode of Select",
              "value": {
                "type": "'multiple' | 'tags'",
                "kind": "expression"
              }
            },
            {
              "name": "notFoundContent",
              "default": "'Not Found'",
              "description": "Specify content to show when no result matches..",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "optionFilterProp",
              "default": "value",
              "description": "Which prop value of option will be used for filter if filterOption is true",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "optionLabelProp",
              "default": "`value` for `combobox`, `children` for other modes",
              "description": "Which prop value of option will render as content of select.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "placeholder",
              "default": "-",
              "description": "Placeholder of select",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "showSearch",
              "default": "false",
              "description": "Whether show search input in single mode.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "showArrow",
              "default": "true",
              "description": "Whether to show the drop-down arrow",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "default",
              "description": "Size of Select input. `default` `large` `small`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "suffixIcon",
              "default": "-",
              "description": "The custom suffix icon",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "removeIcon",
              "default": "-",
              "description": "The custom remove icon",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "clearIcon",
              "default": "-",
              "description": "The custom clear icon",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "menuItemSelectedIcon",
              "default": "-",
              "description": "The custom menuItemSelected icon",
              "value": {
                "type": "VNode | slot",
                "kind": "expression"
              }
            },
            {
              "name": "tokenSeparators",
              "default": "",
              "description": "Separator used to tokenize on tag/multiple mode",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "string\\[]\\",
              "description": "Current selected option.",
              "value": {
                "type": "string|number",
                "kind": "expression"
              }
            },
            {
              "name": "options",
              "default": "\\[]",
              "description": "Data of the selectOption, manual construction work is no longer needed if this property has been set",
              "value": {
                "type": "array&lt;{value, label, [disabled, key, title]}>",
                "kind": "expression"
              }
            },
            {
              "name": "defaultOpen",
              "default": "-",
              "description": "Initial open state of dropdown",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "open",
              "default": "-",
              "description": "Controlled open state of dropdown",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "loading",
              "default": "false",
              "description": "indicate loading state",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-select",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "blur()",
              "description": "Remove focus",
              "value": {
                "type": "",
                "kind": "expression"
              }
            },
            {
              "name": "focus()",
              "description": "Get focus",
              "value": {
                "type": "",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-skeleton",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-skeleton",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "active",
              "default": "false",
              "description": "Show animation effect",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "avatar",
              "default": "false",
              "description": "Show avatar placeholder",
              "value": {
                "type": "boolean | [SkeletonAvatarProps](#SkeletonAvatarProps)",
                "kind": "expression"
              }
            },
            {
              "name": "loading",
              "default": "-",
              "description": "Display the skeleton when `true`",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "paragraph",
              "default": "true",
              "description": "Show paragraph placeholder",
              "value": {
                "type": "boolean | [SkeletonParagraphProps](#SkeletonParagraphProps)",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "true",
              "description": "Show title placeholder",
              "value": {
                "type": "boolean | [SkeletonTitleProps](#SkeletonTitleProps)",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-skeleton-avatar-props",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "size",
              "default": "`small` \\",
              "description": "Set the size of avatar",
              "value": {
                "type": "number | `large` ",
                "kind": "expression"
              }
            },
            {
              "name": "shape",
              "default": "-",
              "description": "Set the shape of avatar",
              "value": {
                "type": "`circle` | `square`",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-skeleton-title-props",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "width",
              "default": "-",
              "description": "Set the width of title",
              "value": {
                "type": "number | string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-skeleton-paragraph-props",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "rows",
              "default": "-",
              "description": "Set the row count of paragraph",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "width",
              "default": "Array<number \\",
              "description": "Set the width of paragraph. When width is an Array, it can set the width of each row. Otherwise only set the last row width",
              "value": {
                "type": "number | string ",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-slider",
          "slots": [],
          "events": [
            {
              "name": "afterChange",
              "description": "Fire when `mouseup` is fired."
            },
            {
              "name": "change",
              "description": "Callback function that is fired when the user changes the slider's value."
            }
          ],
          "attributes": [
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "If true, the slider will not be interactable.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "dots",
              "default": "false",
              "description": "Whether the thumb can drag over tick only.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "included",
              "default": "true",
              "description": "Make effect when `marks` not null，`true` means containment and `false` means coordinative",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "marks",
              "default": "{ number: string|VNode } or { number: { style: object, label: string\\",
              "description": "Tick mark of Slider, type of key must be `number`, and must in closed interval \\[min, max], each mark can declare its own style.",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "max",
              "default": "100",
              "description": "The maximum value the slider can slide to",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "min",
              "default": "0",
              "description": "The minimum value the slider can slide to.",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "range",
              "default": "false",
              "description": "dual thumb mode",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "reverse",
              "default": "false",
              "description": "reverse the component",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "step",
              "default": "1",
              "description": "The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When `marks` no null, `step` can be `null`.",
              "value": {
                "type": "number|null",
                "kind": "expression"
              }
            },
            {
              "name": "tipFormatter",
              "default": "IDENTITY",
              "description": "Slider will pass its value to `tipFormatter`, and display its value in Tooltip, and hide Tooltip when return value is null.",
              "value": {
                "type": "Function|null",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "",
              "description": "The value of slider. When `range` is `false`, use `number`, otherwise, use `[number, number]`",
              "value": {
                "type": "number|number[]",
                "kind": "expression"
              }
            },
            {
              "name": "vertical",
              "default": "false",
              "description": "If true, the slider will be vertical.",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "tooltipPlacement",
              "default": "",
              "description": "Set Tooltip display position. Ref [`Tooltip`](/components/tooltip/).",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "tooltipVisible",
              "default": "",
              "description": "If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering.",
              "value": {
                "type": "Boolean",
                "kind": "expression"
              }
            },
            {
              "name": "getTooltipPopupContainer",
              "default": "() => document.body",
              "description": "The DOM container of the Tooltip, the default behavior is to create a div element in body.",
              "value": {
                "type": "Function",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-space",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "align",
              "default": "`center` \\",
              "description": "Align items",
              "value": {
                "type": "`start` | `end` ",
                "kind": "expression"
              }
            },
            {
              "name": "direction",
              "default": "`horizontal`",
              "description": "The space direction",
              "value": {
                "type": "`vertical` | `horizontal`",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`large` \\",
              "description": "The space size",
              "value": {
                "type": "`small` | `middle` ",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-spin",
          "slots": [
            {
              "name": "indicator",
              "description": "vue node of the spinning indicator"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "delay",
              "default": "-",
              "description": "specifies a delay in milliseconds for loading state (prevent flush)",
              "value": {
                "type": "number (milliseconds)",
                "kind": "expression"
              }
            },
            {
              "name": "indicator",
              "default": "-",
              "description": "vue node of the spinning indicator",
              "value": {
                "type": "vNode |slot",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "size of Spin, options: `small`, `default` and `large`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "spinning",
              "default": "true",
              "description": "whether Spin is spinning",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "tip",
              "default": "-",
              "description": "customize description content when Spin has children",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "wrapperClassName",
              "default": "-",
              "description": "className of wrapper when Spin has children",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-statistic",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-statistic",
          "slots": [
            {
              "name": "formatter",
              "description": "customize value display logic"
            },
            {
              "name": "prefix",
              "description": "prefix node of value"
            },
            {
              "name": "suffix",
              "description": "suffix node of value"
            },
            {
              "name": "title",
              "description": "Display title"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "decimalSeparator",
              "default": ".",
              "description": "decimal separator",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "formatter",
              "default": "-",
              "description": "customize value display logic",
              "value": {
                "type": "v-slot |({value}) => VNode",
                "kind": "expression"
              }
            },
            {
              "name": "groupSeparator",
              "default": ",",
              "description": "group separator",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "precision",
              "default": "-",
              "description": "precision of input value",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "prefix",
              "default": "-",
              "description": "prefix node of value",
              "value": {
                "type": "string | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "suffix",
              "default": "-",
              "description": "suffix node of value",
              "value": {
                "type": "string | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "Display title",
              "value": {
                "type": "string | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "value",
              "default": "-",
              "description": "Display value",
              "value": {
                "type": "string | number",
                "kind": "expression"
              }
            },
            {
              "name": "valueStyle",
              "default": "-",
              "description": "Set value css style",
              "value": {
                "type": "style",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-statistic-countdown",
          "slots": [
            {
              "name": "prefix",
              "description": "prefix node of value"
            },
            {
              "name": "suffix",
              "description": "suffix node of value"
            },
            {
              "name": "title",
              "description": "Display title"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "format",
              "default": "'HH:mm:ss'",
              "description": "Format as [moment](http://momentjs.com/)",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "prefix",
              "default": "-",
              "description": "prefix node of value",
              "value": {
                "type": "string | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "suffix",
              "default": "-",
              "description": "suffix node of value",
              "value": {
                "type": "string | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "Display title",
              "value": {
                "type": "string | v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "value",
              "default": "-",
              "description": "Set target countdown time",
              "value": {
                "type": "number | moment",
                "kind": "expression"
              }
            },
            {
              "name": "valueStyle",
              "default": "-",
              "description": "Set value css style",
              "value": {
                "type": "style",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-statistic-countdown",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "finish",
              "default": "-",
              "description": "Trigger when time's up",
              "value": {
                "type": "() => void",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-steps",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-steps",
          "slots": [
            {
              "name": "progressDot",
              "description": "Steps with progress dot style, customize the progress dot by setting a scoped slot. labelPlacement will be `vertical`"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "current(v-model)",
              "default": "0",
              "description": "to set the current step, counting from 0. You can overwrite this state by using `status` of `Step`, support v-model after 1.5.0",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`default`",
              "description": "Type of steps, can be set to one of the following values: `default`, `navigation`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "direction",
              "default": "`horizontal`",
              "description": "to specify the direction of the step bar, `horizontal` and `vertical` are currently supported",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "labelPlacement",
              "default": "`horizontal`",
              "description": "support vertial title and description",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "progressDot",
              "default": "false",
              "description": "Steps with progress dot style, customize the progress dot by setting a scoped slot. labelPlacement will be `vertical`",
              "value": {
                "type": "Boolean or slot=\"progressDot\" slot-scope=\"{index, status, title, description, prefixCls})\"",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`default`",
              "description": "to specify the size of the step bar, `default` and `small` are currently supported",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "status",
              "default": "`process`",
              "description": "to specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "initial",
              "default": "0",
              "description": "set the initial step, counting from 0",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-steps",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "change",
              "default": "-",
              "description": "Trigger when Step is changed",
              "value": {
                "type": "(current) => void",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-steps-step",
          "slots": [
            {
              "name": "description",
              "description": "description of the step, optional property"
            },
            {
              "name": "icon",
              "description": "icon of the step, optional property"
            },
            {
              "name": "title",
              "description": "title of the step"
            },
            {
              "name": "subTitle",
              "description": "Subtitle of the step"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "description",
              "default": "-",
              "description": "description of the step, optional property",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "icon of the step, optional property",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "status",
              "default": "`wait`",
              "description": "to specify the status. It will be automatically set by `current` of `Steps` if not configured. Optional values are: `wait` `process` `finish` `error`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "-",
              "description": "title of the step",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "subTitle",
              "default": "-",
              "description": "Subtitle of the step",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disable click",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-switch",
          "slots": [
            {
              "name": "checkedChildren",
              "description": "content to be shown when the state is checked"
            },
            {
              "name": "unCheckedChildren",
              "description": "content to be shown when the state is unchecked"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "checked(v-model)",
              "default": "false",
              "description": "determine whether the `Switch` is checked",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "checkedChildren",
              "default": "",
              "description": "content to be shown when the state is checked",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disable switch",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "loading",
              "default": "false",
              "description": "loading state of switch",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "default",
              "description": "the size of the `Switch`, options: `default` `small`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "unCheckedChildren",
              "default": "",
              "description": "content to be shown when the state is unchecked",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-table",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-table",
          "slots": [
            {
              "name": "expandedRowRender",
              "description": "Expanded container render for each row"
            },
            {
              "name": "footer",
              "description": "Table footer renderer"
            },
            {
              "name": "title",
              "description": "Table title renderer"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "tableLayout",
              "default": "'fixed'",
              "description": "[table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) attribute of table element",
              "value": {
                "type": "- | 'auto' ",
                "kind": "expression"
              }
            },
            {
              "name": "bordered",
              "default": "`false`",
              "description": "Whether to show all table borders",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "childrenColumnName",
              "default": "children",
              "description": "The column contains children to display",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "columns",
              "default": "-",
              "description": "Columns of table [config](#Column)",
              "value": {
                "type": "array",
                "kind": "expression"
              }
            },
            {
              "name": "components",
              "default": "-",
              "description": "Override default table elements",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "dataSource",
              "default": "-",
              "description": "Data record array to be displayed",
              "value": {
                "type": "any[]",
                "kind": "expression"
              }
            },
            {
              "name": "defaultExpandAllRows",
              "default": "`false`",
              "description": "Expand all rows initially",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "defaultExpandedRowKeys",
              "default": "-",
              "description": "Initial expanded row keys",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "expandedRowKeys",
              "default": "-",
              "description": "Current expanded row keys",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "expandedRowRender",
              "default": "-",
              "description": "Expanded container render for each row",
              "value": {
                "type": "Function({record, index, indent, expanded}):VNode|v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "expandIcon",
              "default": "-",
              "description": "Customize row expand Icon.",
              "value": {
                "type": "Function(props):VNode | #expandIcon=\"props\"",
                "kind": "expression"
              }
            },
            {
              "name": "expandRowByClick",
              "default": "`false`",
              "description": "Whether to expand row by clicking anywhere in the whole row",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "expandIconColumnIndex",
              "default": "",
              "description": "The index of `expandIcon` which column will be inserted when `expandIconAsCell` is false",
              "value": {
                "type": "0",
                "kind": "expression"
              }
            },
            {
              "name": "footer",
              "default": "",
              "description": "Table footer renderer",
              "value": {
                "type": "Function(currentPageData)| v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "indentSize",
              "default": "15",
              "description": "Indent size in pixels of tree data",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "loading",
              "default": "`false`",
              "description": "Loading status of table",
              "value": {
                "type": "boolean|[object](/components/spin)",
                "kind": "expression"
              }
            },
            {
              "name": "locale",
              "default": "filterConfirm: 'Ok' <br /> filterReset: 'Reset' <br /> emptyText: 'No Data'",
              "description": "i18n text including filter, sort, empty text, etc",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "pagination",
              "default": "",
              "description": "Config of pagination. You can ref table pagination [config](#pagination) or full [`pagination`](/components/pagination/) document, hide it by setting it to `false`",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "rowClassName",
              "default": "-",
              "description": "Row's className",
              "value": {
                "type": "Function(record, index):string",
                "kind": "expression"
              }
            },
            {
              "name": "rowKey",
              "default": "`key`",
              "description": "Row's unique key, could be a string or function that returns a string",
              "value": {
                "type": "string|Function(record, index):string",
                "kind": "expression"
              }
            },
            {
              "name": "rowSelection",
              "default": "null",
              "description": "Row selection [config](#rowSelection)",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "scroll",
              "default": "-",
              "description": "Set horizontal or vertical scrolling, can also be used to specify the width and height of the scroll area. It is recommended to set a number for `x`, if you want to set it to `true`, you need to add style `.ant-table td { white-space: nowrap; }`.",
              "value": {
                "type": "{ x: number | true, y: number }",
                "kind": "expression"
              }
            },
            {
              "name": "showHeader",
              "default": "`true`",
              "description": "Whether to show table header",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`small` \\",
              "description": "Size of table",
              "value": {
                "type": "`default` | `middle` ",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "",
              "description": "Table title renderer",
              "value": {
                "type": "Function(currentPageData)| v-slot",
                "kind": "expression"
              }
            },
            {
              "name": "customHeaderRow",
              "default": "-",
              "description": "Set props on per header row",
              "value": {
                "type": "Function(column, index)",
                "kind": "expression"
              }
            },
            {
              "name": "customRow",
              "default": "-",
              "description": "Set props on per row",
              "value": {
                "type": "Function(record, index)",
                "kind": "expression"
              }
            },
            {
              "name": "getPopupContainer",
              "default": "`() => TableHtmlElement`",
              "description": "the render container of dropdowns in table",
              "value": {
                "type": "(triggerNode) => HTMLElement",
                "kind": "expression"
              }
            },
            {
              "name": "transformCellText",
              "default": "-",
              "description": "Data can be changed again before rendering. The default configuration of general user empty data. You can configured globally through [ConfigProvider](/components/config-provider-cn/)",
              "value": {
                "type": "Function({ text, column, record, index }) => any",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-tabs",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-tabs",
          "slots": [
            {
              "name": "tabBarExtraContent",
              "description": "Extra content in tab bar"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "activeKey(v-model)",
              "default": "-",
              "description": "Current TabPane's key",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "animated",
              "default": "{inkBar:boolean, tabPane:boolean}",
              "description": "Whether to change tabs with animation. Only works while `tabPosition=\"top\"|\"bottom\"`",
              "value": {
                "type": "boolean ",
                "kind": "expression"
              }
            },
            {
              "name": "defaultActiveKey",
              "default": "-",
              "description": "Initial active TabPane's key, if `activeKey` is not set.",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "hideAdd",
              "default": "`false`",
              "description": "Hide plus icon or not. Only works while `type=\"editable-card\"`",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "size",
              "default": "`small`",
              "description": "preset tab bar size",
              "value": {
                "type": "`large` | `default` ",
                "kind": "expression"
              }
            },
            {
              "name": "tabBarExtraContent",
              "default": "-",
              "description": "Extra content in tab bar",
              "value": {
                "type": "slot",
                "kind": "expression"
              }
            },
            {
              "name": "tabBarStyle",
              "default": "-",
              "description": "Tab bar style object",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "tabPosition",
              "default": "`bottom` \\",
              "description": "Position of tabs",
              "value": {
                "type": "`top` | `right` ",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`editable-card`",
              "description": "Basic style of tabs",
              "value": {
                "type": "`line` | `card` ",
                "kind": "expression"
              }
            },
            {
              "name": "tabBarGutter",
              "default": "-",
              "description": "The gap between tabs",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-tabs-tab-pane",
          "slots": [
            {
              "name": "tab",
              "description": "Show text in TabPane's head"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "forceRender",
              "default": "false",
              "description": "Forced render of content in tabs, not lazy render after clicking on tabs",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "key",
              "default": "-",
              "description": "TabPane's key",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "tab",
              "default": "-",
              "description": "Show text in TabPane's head",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-tag",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-tag",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "closable",
              "default": "`false`",
              "description": "Whether the Tag can be closed",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "closeIcon",
              "default": "-",
              "description": "Custom close icon",
              "value": {
                "type": "VNode | #closeIcon",
                "kind": "expression"
              }
            },
            {
              "name": "color",
              "default": "-",
              "description": "Color of the Tag",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "Set the icon of tag",
              "value": {
                "type": "VNode | #icon",
                "kind": "expression"
              }
            },
            {
              "name": "visible(v-model)",
              "default": "`true`",
              "description": "Whether the Tag is closed or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-tag",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "close",
              "description": "Callback executed when tag is closed",
              "value": {
                "type": "(e) => void",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-tag-checkable-tag",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "checked(v-model)",
              "default": "`false`",
              "description": "Checked status of Tag",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-tag-checkable-tag",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "change",
              "description": "Callback executed when Tag is checked/unchecked",
              "value": {
                "type": "(checked) => void",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-timepicker",
          "slots": [
            {
              "name": "addon",
              "description": "some addon to timepicker panel bottom"
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "a callback function, can be executed when the selected time is changing"
            },
            {
              "name": "openChange",
              "description": "a callback function which will be called while panel opening/closing"
            }
          ],
          "attributes": [
            {
              "name": "addon",
              "default": "-",
              "description": "some addon to timepicker panel bottom",
              "value": {
                "type": "slot | slot-scope",
                "kind": "expression"
              }
            },
            {
              "name": "allowClear",
              "default": "true",
              "description": "allow clearing text",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "autofocus",
              "default": "false",
              "description": "get focus when component mounted",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "clearText",
              "default": "clear",
              "description": "clear tooltip of icon",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "defaultOpenValue",
              "default": "moment()",
              "description": "default open panel value, used to set utcOffset,locale if value/defaultValue absent",
              "value": {
                "type": "[moment](http://momentjs.com/)",
                "kind": "expression"
              }
            },
            {
              "name": "defaultValue",
              "default": "-",
              "description": "to set default time",
              "value": {
                "type": "[moment](http://momentjs.com/)",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "determine whether the TimePicker is disabled",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabledHours",
              "default": "-",
              "description": "to specify the hours that cannot be selected",
              "value": {
                "type": "function()",
                "kind": "expression"
              }
            },
            {
              "name": "disabledMinutes",
              "default": "-",
              "description": "to specify the minutes that cannot be selected",
              "value": {
                "type": "function(selectedHour)",
                "kind": "expression"
              }
            },
            {
              "name": "disabledSeconds",
              "default": "-",
              "description": "to specify the seconds that cannot be selected",
              "value": {
                "type": "function(selectedHour, selectedMinute)",
                "kind": "expression"
              }
            },
            {
              "name": "format",
              "default": "\"HH:mm:ss\"",
              "description": "to set the time format",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "getPopupContainer",
              "default": "-",
              "description": "to set the container of the floating layer, while the default is to create a div element in body",
              "value": {
                "type": "function(trigger)",
                "kind": "expression"
              }
            },
            {
              "name": "hideDisabledOptions",
              "default": "false",
              "description": "hide the options that can not be selected",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "hourStep",
              "default": "1",
              "description": "interval between hours in picker",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "inputReadOnly",
              "default": "false",
              "description": "Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices)",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "minuteStep",
              "default": "1",
              "description": "interval between minutes in picker",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "open(v-model)",
              "default": "false",
              "description": "whether to popup panel",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "placeholder",
              "default": "\"Select a time\"",
              "description": "display when there's no value",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "popupClassName",
              "default": "''",
              "description": "className of panel",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "popupStyle",
              "default": "-",
              "description": "style of panel",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "secondStep",
              "default": "1",
              "description": "interval between seconds in picker",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "suffixIcon",
              "default": "slot",
              "description": "The custom suffix icon",
              "value": {
                "type": "string | VNode ",
                "kind": "expression"
              }
            },
            {
              "name": "clearIcon",
              "default": "slot",
              "description": "The custom clear icon",
              "value": {
                "type": "string | VNode ",
                "kind": "expression"
              }
            },
            {
              "name": "use12Hours",
              "default": "false",
              "description": "display as 12 hours format, with default format `h:mm:ss a`",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "value(v-model)",
              "default": "-",
              "description": "to set time",
              "value": {
                "type": "[moment](http://momentjs.com/)",
                "kind": "expression"
              }
            },
            {
              "name": "align",
              "default": "-",
              "description": "this value will be merged into placement's config, please refer to the settings [dom-align](https://github.com/yiminghe/dom-align)",
              "value": {
                "type": "Object",
                "kind": "expression"
              }
            },
            {
              "name": "valueFormat",
              "default": "-",
              "description": "optional, format of binding value. If not specified, the binding value will be a Date object",
              "value": {
                "type": "string，[date formats](https://momentjs.com/docs/#/displaying/format/)",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-timeline",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-timeline",
          "slots": [
            {
              "name": "pendingDot",
              "description": "Set the dot of the last ghost node when pending is true"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "pending",
              "default": "slot",
              "description": "Set the last ghost node's existence or its content",
              "value": {
                "type": "boolean|string",
                "kind": "expression"
              }
            },
            {
              "name": "pendingDot",
              "default": "`<LoadingOutlined />`",
              "description": "Set the dot of the last ghost node when pending is true",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "reverse",
              "default": "false",
              "description": "reverse nodes or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "mode",
              "default": "`right`",
              "description": "By sending `alternate` the timeline will distribute the nodes to the left and right.",
              "value": {
                "type": "`left` | `alternate` ",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-timeline-item",
          "slots": [
            {
              "name": "dot",
              "description": "Customize timeline dot"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "color",
              "default": "`blue`",
              "description": "Set the circle's color to `blue`, `red`, `green` or other custom colors",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "dot",
              "default": "-",
              "description": "Customize timeline dot",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "position",
              "default": "-",
              "description": "Customize node position",
              "value": {
                "type": "`left` | `right`",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-transfer",
          "slots": [
            {
              "name": "footer",
              "description": "customize the progress dot by setting a scoped slot"
            },
            {
              "name": "render",
              "description": "The function to generate the item shown on a column. Based on an record (element of the dataSource array), this function should return a element which is generated from that record. Also, it can return a plain object with `value` and `label`, `label` is a element and `value` is for title"
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "A callback function that is executed when the transfer between columns is complete."
            },
            {
              "name": "scroll",
              "description": "A callback function which is executed when scroll options list"
            },
            {
              "name": "search",
              "description": "A callback function which is executed when search field are changed"
            },
            {
              "name": "selectChange",
              "description": "A callback function which is executed when selected items are changed."
            }
          ],
          "attributes": [
            {
              "name": "dataSource",
              "default": "\\[]",
              "description": "Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in `targetKeys` prop.",
              "value": {
                "type": "[{key: string.isRequired,title: string.isRequired,description: string,disabled: bool}]",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Whether disabled transfer",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "filterOption",
              "default": "",
              "description": "A function to determine whether an item should show in search result list",
              "value": {
                "type": "(inputValue, option): boolean",
                "kind": "expression"
              }
            },
            {
              "name": "footer",
              "default": "",
              "description": "customize the progress dot by setting a scoped slot",
              "value": {
                "type": "slot=\"footer\" slot-scope=\"props\"",
                "kind": "expression"
              }
            },
            {
              "name": "lazy",
              "default": "`{ height: 32, offset: 32 }`",
              "description": "property of vc-lazy-load for lazy rendering items. Turn off it by set to `false`.",
              "value": {
                "type": "object|boolean",
                "kind": "expression"
              }
            },
            {
              "name": "listStyle",
              "default": "",
              "description": "A custom CSS style used for rendering the transfer columns.",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "locale",
              "default": "`{ itemUnit: 'item', itemsUnit: 'items', notFoundContent: 'The list is empty', searchPlaceholder: 'Search here' }`",
              "description": "i18n text including filter, empty text, item unit, etc",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "operations",
              "default": "\\['>', '<']",
              "description": "A set of operations that are sorted from top to bottom.",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "render",
              "default": "",
              "description": "The function to generate the item shown on a column. Based on an record (element of the dataSource array), this function should return a element which is generated from that record. Also, it can return a plain object with `value` and `label`, `label` is a element and `value` is for title",
              "value": {
                "type": "Function(record) | slot",
                "kind": "expression"
              }
            },
            {
              "name": "selectedKeys",
              "default": "\\[]",
              "description": "A set of keys of selected items.",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "showSearch",
              "default": "false",
              "description": "If included, a search box is shown on each column.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "showSelectAll",
              "default": "true",
              "description": "Show select all checkbox on the header",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "targetKeys",
              "default": "\\[]",
              "description": "A set of keys of elements that are listed on the right column.",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            },
            {
              "name": "titles",
              "default": "-",
              "description": "A set of titles that are sorted from left to right.",
              "value": {
                "type": "string[]",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-tree",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-tree",
          "slots": [
            {
              "name": "switcherIcon",
              "description": "customize collapse/expand icon of tree node"
            },
            {
              "name": "title",
              "description": "Title"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "treeData",
              "default": "-",
              "description": "treeNode of tree, please use `treeNodes` before v1.1.4",
              "value": {
                "type": "array",
                "kind": "expression"
              }
            },
            {
              "name": "replaceFields",
              "default": "{ children:'children', title:'title', key:'key' }",
              "description": "Replace the title,key and children fields in treeNode with the corresponding fields in treeData",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "autoExpandParent",
              "default": "true",
              "description": "Whether to automatically expand a parent treeNode",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "blockNode",
              "default": "false",
              "description": "Whether treeNode fill remaining horizontal space",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "checkable",
              "default": "false",
              "description": "Adds a `Checkbox` before the treeNodes",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "checkedKeys(v-model)",
              "default": "{checked: string\\[] \\",
              "description": "(Controlled) Specifies the keys of the checked treeNodes (PS: When this specifies the key of a treeNode which is also a parent treeNode, all the children treeNodes of will be checked; and vice versa, when it specifies the key of a treeNode which is a child treeNode, its parent treeNode will also be checked. When `checkable` and `checkStrictly` is true, its object has `checked` and `halfChecked` property. Regardless of whether the child or parent treeNode is checked, they won't impact each other.",
              "value": {
                "type": "string[] | number[] \\",
                "kind": "expression"
              }
            },
            {
              "name": "checkStrictly",
              "default": "false",
              "description": "Check treeNode precisely; parent treeNode and children treeNodes are not associated",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "defaultExpandAll",
              "default": "false",
              "description": "Whether to expand all treeNodes by default",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "whether disabled the tree",
              "value": {
                "type": "bool",
                "kind": "expression"
              }
            },
            {
              "name": "draggable",
              "default": "false",
              "description": "Specifies whether this Tree is draggable (IE > 8)",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "expandedKeys(v-model)",
              "default": "\\[]",
              "description": "(Controlled) Specifies the keys of the expanded treeNodes",
              "value": {
                "type": "string[] | number[]",
                "kind": "expression"
              }
            },
            {
              "name": "filterTreeNode",
              "default": "-",
              "description": "Defines a function to filter (highlight) treeNodes. When the function returns `true`, the corresponding treeNode will be highlighted",
              "value": {
                "type": "function(node)",
                "kind": "expression"
              }
            },
            {
              "name": "loadData",
              "default": "-",
              "description": "Load data asynchronously",
              "value": {
                "type": "function(node)",
                "kind": "expression"
              }
            },
            {
              "name": "loadedKeys",
              "default": "\\[]",
              "description": "(Controlled) Set loaded tree nodes. Need work with `loadData`",
              "value": {
                "type": "string[] | number[]",
                "kind": "expression"
              }
            },
            {
              "name": "multiple",
              "default": "false",
              "description": "Allows selecting multiple treeNodes",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "selectable",
              "default": "true",
              "description": "whether can be selected",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "selectedKeys(v-model)",
              "default": "-",
              "description": "(Controlled) Specifies the keys of the selected treeNodes",
              "value": {
                "type": "string[] | number[]",
                "kind": "expression"
              }
            },
            {
              "name": "showIcon",
              "default": "false",
              "description": "Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to `true`",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "switcherIcon",
              "default": "-",
              "description": "customize collapse/expand icon of tree node",
              "value": {
                "type": "slot",
                "kind": "expression"
              }
            },
            {
              "name": "showLine",
              "default": "false",
              "description": "Shows a connecting line",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "",
              "description": "Title",
              "value": {
                "type": "slot",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-tree-node",
          "slots": [
            {
              "name": "icon",
              "description": "customize icon. When you pass component, whose render will receive full TreeNode props as component props"
            },
            {
              "name": "title",
              "description": "Title"
            }
          ],
          "events": [],
          "attributes": [
            {
              "name": "class",
              "default": "-",
              "description": "className",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "style",
              "default": "-",
              "description": "style",
              "value": {
                "type": "string|object",
                "kind": "expression"
              }
            },
            {
              "name": "checkable",
              "default": "-",
              "description": "When Tree is checkable, set TreeNode display Checkbox or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disableCheckbox",
              "default": "false",
              "description": "Disables the checkbox of the treeNode",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disables the treeNode",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "icon",
              "default": "-",
              "description": "customize icon. When you pass component, whose render will receive full TreeNode props as component props",
              "value": {
                "type": "slot|slot-scope",
                "kind": "expression"
              }
            },
            {
              "name": "isLeaf",
              "default": "false",
              "description": "Determines if this is a leaf node(effective when `loadData` is specified)",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "key",
              "default": "internal calculated position of treeNode",
              "description": "Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree!",
              "value": {
                "type": "string | number",
                "kind": "expression"
              }
            },
            {
              "name": "selectable",
              "default": "true",
              "description": "Set whether the treeNode can be selected",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "title",
              "default": "slot-scope",
              "description": "Title",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "slots",
              "default": "-",
              "description": "When using treeNodes, you can use this property to configure the properties that support the slot, such as `slots: { title: 'XXX'}`",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-directory-tree",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "expandAction",
              "default": "click",
              "description": "Directory open logic, optional `false` `'click'` `'dblclick'`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-treeselect",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-tooltip",
          "slots": [
            {
              "name": "title",
              "description": "The text shown in the tooltip"
            }
          ],
          "events": [
            {
              "name": "visibleChange",
              "description": "Callback executed when visibility of the tooltip card is changed"
            }
          ],
          "attributes": [
            {
              "name": "title",
              "default": "-",
              "description": "The text shown in the tooltip",
              "value": {
                "type": "string|slot",
                "kind": "expression"
              }
            },
            {
              "name": "arrowPointAtCenter",
              "default": "`false`",
              "description": "Whether the arrow is pointed at the center of target",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "autoAdjustOverflow",
              "default": "`true`",
              "description": "Whether to adjust popup placement automatically when popup is off screen",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "color",
              "default": "-",
              "description": "The background color",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "defaultVisible",
              "default": "`false`",
              "description": "Whether the floating tooltip card is visible by default",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "getPopupContainer",
              "default": "() => document.body",
              "description": "The DOM container of the tip, the default behavior is to create a `div` element in `body`.",
              "value": {
                "type": "Function(triggerNode)",
                "kind": "expression"
              }
            },
            {
              "name": "mouseEnterDelay",
              "default": "0.1",
              "description": "Delay in seconds, before tooltip is shown on mouse enter",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "mouseLeaveDelay",
              "default": "0.1",
              "description": "Delay in seconds, before tooltip is hidden on mouse leave",
              "value": {
                "type": "number",
                "kind": "expression"
              }
            },
            {
              "name": "overlayClassName",
              "default": "-",
              "description": "Class name of the tooltip card",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "overlayStyle",
              "default": "-",
              "description": "Style of the tooltip card",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "placement",
              "default": "`top`",
              "description": "The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "trigger",
              "default": "`click` \\",
              "description": "Tooltip trigger mode",
              "value": {
                "type": "`hover` | `focus` ",
                "kind": "expression"
              }
            },
            {
              "name": "visible(v-model)",
              "default": "`false`",
              "description": "Whether the floating tooltip card is visible or not",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "destroyTooltipOnHide",
              "default": "false",
              "description": "Whether to destroy tooltip on hide",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "align",
              "default": "-",
              "description": "this value will be merged into placement's config, please refer to the settings [dom-align](https://github.com/yiminghe/dom-align)",
              "value": {
                "type": "Object",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-typography",
          "slots": [],
          "events": [],
          "attributes": []
        },
        {
          "name": "a-typography-text",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "code",
              "default": "false",
              "description": "Code style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "copyable",
              "default": "false",
              "description": "Whether to be copyable, customize it via setting an object",
              "value": {
                "type": "boolean | [copyable](#copyable)",
                "kind": "expression"
              }
            },
            {
              "name": "delete",
              "default": "false",
              "description": "Deleted line style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disabled content",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "editable",
              "default": "false",
              "description": "If editable. Can control edit state when is object",
              "value": {
                "type": "boolean | [editable](#editable)",
                "kind": "expression"
              }
            },
            {
              "name": "ellipsis",
              "default": "false",
              "description": "Display ellipsis when text overflows",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "keyboard",
              "default": "false",
              "description": "Keyboard style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "mark",
              "default": "false",
              "description": "Marked style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "strong",
              "default": "false",
              "description": "Bold style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`warning` \\",
              "description": "Content type",
              "value": {
                "type": "`secondary` | `success` ",
                "kind": "expression"
              }
            },
            {
              "name": "underline",
              "default": "false",
              "description": "Underlined style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "content(v-model)",
              "default": "-",
              "description": "When using ellipsis or editable, use content instead of children",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-typography-title",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "code",
              "default": "false",
              "description": "Code style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "copyable",
              "default": "false",
              "description": "Whether to be copyable, customize it via setting an object",
              "value": {
                "type": "boolean | [copyable](#copyable)",
                "kind": "expression"
              }
            },
            {
              "name": "delete",
              "default": "false",
              "description": "Deleted line style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disabled content",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "editable",
              "default": "false",
              "description": "If editable. Can control edit state when is object",
              "value": {
                "type": "boolean | [editable](#editable)",
                "kind": "expression"
              }
            },
            {
              "name": "ellipsis",
              "default": "false",
              "description": "Display ellipsis when text overflows, can configure rows and expandable by using object",
              "value": {
                "type": "boolean | [ellipsis](#ellipsis)",
                "kind": "expression"
              }
            },
            {
              "name": "level",
              "default": "1",
              "description": "Set content importance. Match with `h1`, `h2`, `h3`, `h4`, `h5`",
              "value": {
                "type": "number: 1, 2, 3, 4, 5",
                "kind": "expression"
              }
            },
            {
              "name": "mark",
              "default": "false",
              "description": "Marked style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`warning` \\",
              "description": "Content type",
              "value": {
                "type": "`secondary` | `success` ",
                "kind": "expression"
              }
            },
            {
              "name": "underline",
              "default": "false",
              "description": "Underlined style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "content(v-model)",
              "default": "-",
              "description": "When using ellipsis or editable, use content instead of children",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-typography-paragraph",
          "slots": [],
          "events": [],
          "attributes": [
            {
              "name": "code",
              "default": "false",
              "description": "Code style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "copyable",
              "default": "false",
              "description": "Whether to be copyable, customize it via setting an object",
              "value": {
                "type": "boolean | [copyable](#copyable)",
                "kind": "expression"
              }
            },
            {
              "name": "delete",
              "default": "false",
              "description": "Deleted line style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "Disabled content",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "editable",
              "default": "false",
              "description": "If editable. Can control edit state when is object",
              "value": {
                "type": "boolean | [editable](#editable)",
                "kind": "expression"
              }
            },
            {
              "name": "ellipsis",
              "default": "false",
              "description": "Display ellipsis when text overflows, can configure rows and expandable by using object",
              "value": {
                "type": "boolean | [ellipsis](#ellipsis)",
                "kind": "expression"
              }
            },
            {
              "name": "mark",
              "default": "false",
              "description": "Marked style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "strong",
              "default": "false",
              "description": "Bold style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "type",
              "default": "`warning` \\",
              "description": "Content type",
              "value": {
                "type": "`secondary` | `success` ",
                "kind": "expression"
              }
            },
            {
              "name": "underline",
              "default": "false",
              "description": "Underlined style",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "content(v-model)",
              "default": "-",
              "description": "When using ellipsis or editable, use content instead of children",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "a-upload",
          "slots": [],
          "events": [
            {
              "name": "change",
              "description": "A callback function, can be executed when uploading state is changing. See [change](#change)"
            },
            {
              "name": "preview",
              "description": "A callback function, will be executed when file link or preview icon is clicked."
            },
            {
              "name": "download",
              "description": "Click the method to download the file, pass the method to perform the method logic, do not pass the default jump to the new TAB."
            },
            {
              "name": "reject",
              "description": "A callback function, will be executed when drop files is not accept."
            }
          ],
          "attributes": [
            {
              "name": "accept",
              "default": "-",
              "description": "File types that can be accepted. See [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "action",
              "default": "-",
              "description": "Uploading URL",
              "value": {
                "type": "string|(file) => `Promise`",
                "kind": "expression"
              }
            },
            {
              "name": "method",
              "default": "'post'",
              "description": "http method of upload request",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "directory",
              "default": "false",
              "description": "support upload whole directory ([caniuse](https://caniuse.com/#feat=input-file-directory))",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "beforeUpload",
              "default": "Promise`",
              "description": "Hook function which will be executed before uploading. Uploading will be stopped with `false` or a rejected Promise returned. **Warning：this function is not supported in IE9**。",
              "value": {
                "type": "(file, fileList) => `boolean",
                "kind": "expression"
              }
            },
            {
              "name": "customRequest",
              "default": "-",
              "description": "override for the default xhr behavior allowing for additional customization and ability to implement your own XMLHttpRequest",
              "value": {
                "type": "Function",
                "kind": "expression"
              }
            },
            {
              "name": "data",
              "default": "-",
              "description": "Uploading params or function which can return uploading params.",
              "value": {
                "type": "object|function(file)",
                "kind": "expression"
              }
            },
            {
              "name": "disabled",
              "default": "false",
              "description": "disable upload button",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "fileList",
              "default": "-",
              "description": "List of files that have been uploaded (controlled). Here is a common issue [#2423](https://github.com/ant-design/ant-design/issues/2423) when using it",
              "value": {
                "type": "object[]",
                "kind": "expression"
              }
            },
            {
              "name": "headers",
              "default": "-",
              "description": "Set request headers, valid above IE10.",
              "value": {
                "type": "object",
                "kind": "expression"
              }
            },
            {
              "name": "listType",
              "default": "'text'",
              "description": "Built-in stylesheets, support for three types: `text`, `picture` or `picture-card`",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "multiple",
              "default": "false",
              "description": "Whether to support selected multiple file. `IE10+` supported. You can select multiple files with CTRL holding down while multiple is set to be true",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "name",
              "default": "'file'",
              "description": "The name of uploading file",
              "value": {
                "type": "string",
                "kind": "expression"
              }
            },
            {
              "name": "previewFile",
              "default": "-",
              "description": "Customize preview file logic",
              "value": {
                "type": "(file: File | Blob) => Promise<dataURL: string>",
                "kind": "expression"
              }
            },
            {
              "name": "showUploadList",
              "default": "true",
              "description": "Whether to show default upload list, could be an object to specify `showPreviewIcon` and `showRemoveIcon` individually",
              "value": {
                "type": "Boolean or { showPreviewIcon?: boolean, showRemoveIcon?: boolean }",
                "kind": "expression"
              }
            },
            {
              "name": "supportServerRender",
              "default": "false",
              "description": "Need to be turned on while the server side is rendering.",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "withCredentials",
              "default": "false",
              "description": "ajax upload with cookie sent",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "openFileDialogOnClick",
              "default": "true",
              "description": "click open file dialog",
              "value": {
                "type": "boolean",
                "kind": "expression"
              }
            },
            {
              "name": "remove",
              "default": "Promise`",
              "description": "A callback function, will be executed when removing file button is clicked, remove event will be prevented when return value is `false` or a Promise which resolve(false) or reject.",
              "value": {
                "type": "Function(file): `boolean",
                "kind": "expression"
              }
            },
            {
              "name": "transformFile",
              "default": "Blob",
              "description": "Customize transform file before request",
              "value": {
                "type": "Function(file): `string",
                "kind": "expression"
              }
            }
          ]
        }
      ],
      "attributes": [],
      "types-syntax": "typescript"
    }
  }
}