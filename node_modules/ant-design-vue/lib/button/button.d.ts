import { VNode } from 'vue';
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    type: import("vue-types").VueTypeDef<"default" | "link" | "dashed" | "primary" | "ghost" | "danger">;
    htmlType: import("vue-types").VueTypeDef<"button" | "reset" | "submit"> & {
        default: "button" | "reset" | "submit";
    };
    shape: import("vue-types").VueTypeDef<"circle" | "round" | "circle-outline">;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large"> & {
        default: "default" | "small" | "large";
    };
    loading: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    ghost: import("vue-types").VueTypeValidableDef<boolean>;
    block: import("vue-types").VueTypeValidableDef<boolean>;
    icon: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    href: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    title: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    children: any[];
    iconCom: any;
    delayTimeout: any;
}, {
    sizeMap: {
        large: string;
        small: string;
    };
    sLoading: boolean;
    hasTwoCNChar: boolean;
}, {}, {
    getClasses(): {
        [x: string]: any;
    };
    fixTwoCNChar(): void;
    handleClick(event: Event): void;
    insertSpace(child: VNode, needInserted: boolean): JSX.Element;
    isNeedInserted(): boolean;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title: string;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    size: "default" | "small" | "large";
    href: string;
    htmlType: "button" | "reset" | "submit";
} & {
    icon?: import("../_util/type").VueNode;
    block?: boolean;
    disabled?: boolean;
    type?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
    loading?: boolean | {
        [key: string]: any;
    };
    ghost?: boolean;
    shape?: "circle" | "round" | "circle-outline";
}>, {
    title: string;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    size: "default" | "small" | "large";
    href: string;
    htmlType: "button" | "reset" | "submit";
}>;
export default _default;
