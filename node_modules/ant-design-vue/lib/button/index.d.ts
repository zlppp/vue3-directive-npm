import { Plugin } from 'vue';
import ButtonGroup from './button-group';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sizeMap: {
                large: string;
                small: string;
            };
            sLoading: boolean;
            hasTwoCNChar: boolean;
        };
        $props: Partial<{
            title: string;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            size: "default" | "small" | "large";
            href: string;
            htmlType: "button" | "reset" | "submit";
        }> & Omit<Readonly<{
            title: string;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            size: "default" | "small" | "large";
            href: string;
            htmlType: "button" | "reset" | "submit";
        } & {
            icon?: import("../_util/type").VueNode;
            block?: boolean;
            disabled?: boolean;
            type?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            loading?: boolean | {
                [key: string]: any;
            };
            ghost?: boolean;
            shape?: "circle" | "round" | "circle-outline";
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "title" | "onClick" | "prefixCls" | "size" | "href" | "htmlType">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            title: string;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            size: "default" | "small" | "large";
            href: string;
            htmlType: "button" | "reset" | "submit";
        } & {
            icon?: import("../_util/type").VueNode;
            block?: boolean;
            disabled?: boolean;
            type?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
            loading?: boolean | {
                [key: string]: any;
            };
            ghost?: boolean;
            shape?: "circle" | "round" | "circle-outline";
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            children: any[];
            iconCom: any;
            delayTimeout: any;
        }, {
            sizeMap: {
                large: string;
                small: string;
            };
            sLoading: boolean;
            hasTwoCNChar: boolean;
        }, {}, {
            getClasses(): {
                [x: string]: any;
            };
            fixTwoCNChar(): void;
            handleClick(event: Event): void;
            insertSpace(child: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, needInserted: boolean): JSX.Element;
            isNeedInserted(): boolean;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            title: string;
            onClick: (...args: any[]) => any;
            prefixCls: string;
            size: "default" | "small" | "large";
            href: string;
            htmlType: "button" | "reset" | "submit";
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        title: string;
        onClick: (...args: any[]) => any;
        prefixCls: string;
        size: "default" | "small" | "large";
        href: string;
        htmlType: "button" | "reset" | "submit";
    } & {
        icon?: import("../_util/type").VueNode;
        block?: boolean;
        disabled?: boolean;
        type?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
        loading?: boolean | {
            [key: string]: any;
        };
        ghost?: boolean;
        shape?: "circle" | "round" | "circle-outline";
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        children: any[];
        iconCom: any;
        delayTimeout: any;
    }> & {
        sizeMap: {
            large: string;
            small: string;
        };
        sLoading: boolean;
        hasTwoCNChar: boolean;
    } & {} & {
        getClasses(): {
            [x: string]: any;
        };
        fixTwoCNChar(): void;
        handleClick(event: Event): void;
        insertSpace(child: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, needInserted: boolean): JSX.Element;
        isNeedInserted(): boolean;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    title: string;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    size: "default" | "small" | "large";
    href: string;
    htmlType: "button" | "reset" | "submit";
} & {
    icon?: import("../_util/type").VueNode;
    block?: boolean;
    disabled?: boolean;
    type?: "default" | "link" | "dashed" | "primary" | "ghost" | "danger";
    loading?: boolean | {
        [key: string]: any;
    };
    ghost?: boolean;
    shape?: "circle" | "round" | "circle-outline";
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    children: any[];
    iconCom: any;
    delayTimeout: any;
}, {
    sizeMap: {
        large: string;
        small: string;
    };
    sLoading: boolean;
    hasTwoCNChar: boolean;
}, {}, {
    getClasses(): {
        [x: string]: any;
    };
    fixTwoCNChar(): void;
    handleClick(event: Event): void;
    insertSpace(child: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, needInserted: boolean): JSX.Element;
    isNeedInserted(): boolean;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    title: string;
    onClick: (...args: any[]) => any;
    prefixCls: string;
    size: "default" | "small" | "large";
    href: string;
    htmlType: "button" | "reset" | "submit";
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Group: typeof ButtonGroup;
};
export default _default;
