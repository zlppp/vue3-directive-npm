import { CSSProperties } from 'vue';
declare enum AffixStatus {
    None = 0,
    Prepare = 1
}
export interface AffixState {
    affixStyle?: CSSProperties;
    placeholderStyle?: CSSProperties;
    status: AffixStatus;
    lastAffix: boolean;
    prevTarget: Window | HTMLElement | null;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            offset: number;
            target: (...args: any[]) => any;
            offsetTop: number;
            offsetBottom: number;
            onTestUpdatePosition: (...args: any[]) => any;
        }> & Omit<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            offset: number;
            target: (...args: any[]) => any;
            offsetTop: number;
            offsetBottom: number;
            onTestUpdatePosition: (...args: any[]) => any;
        } & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "prefixCls" | "offset" | "target" | "offsetTop" | "offsetBottom" | "onTestUpdatePosition">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "testUpdatePosition", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            offset: number;
            target: (...args: any[]) => any;
            offsetTop: number;
            offsetBottom: number;
            onTestUpdatePosition: (...args: any[]) => any;
        } & {}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "testUpdatePosition")[], string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            offset: number;
            target: (...args: any[]) => any;
            offsetTop: number;
            offsetBottom: number;
            onTestUpdatePosition: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        prefixCls: string;
        offset: number;
        target: (...args: any[]) => any;
        offsetTop: number;
        offsetBottom: number;
        onTestUpdatePosition: (...args: any[]) => any;
    } & {}> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    offset: number;
    target: (...args: any[]) => any;
    offsetTop: number;
    offsetBottom: number;
    onTestUpdatePosition: (...args: any[]) => any;
} & {}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "testUpdatePosition")[], "change" | "testUpdatePosition", {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    offset: number;
    target: (...args: any[]) => any;
    offsetTop: number;
    offsetBottom: number;
    onTestUpdatePosition: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
