export declare type TransferDirection = 'left' | 'right';
export declare const TransferItem: {
    key: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        required: true;
    };
    title: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        required: true;
    };
    description: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
};
export declare const TransferProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    dataSource: import("vue-types").VueTypeDef<{
        key: (string | ((props: Record<string, unknown>) => string)) & string;
        title: (string | ((props: Record<string, unknown>) => string)) & string;
        description: (string | ((props: Record<string, unknown>) => string)) & string;
        disabled: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
    }[]>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    targetKeys: import("vue-types").VueTypeDef<string[]>;
    selectedKeys: import("vue-types").VueTypeDef<string[]>;
    render: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    listStyle: import("vue-types").VueTypeDef<any>;
    operationStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    titles: import("vue-types").VueTypeDef<string[]>;
    operations: import("vue-types").VueTypeDef<string[]>;
    showSearch: import("vue-types").VueTypeValidableDef<boolean>;
    filterOption: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    searchPlaceholder: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    notFoundContent: import("vue-types").VueTypeValidableDef<any>;
    locale: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    rowKey: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    lazy: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }>;
    showSelectAll: import("vue-types").VueTypeValidableDef<boolean>;
    children: import("vue-types").VueTypeValidableDef<any>;
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onSelectChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onSearchChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onSearch: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onScroll: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export interface TransferLocale {
    titles: string[];
    notFoundContent: string;
    searchPlaceholder: string;
    itemUnit: string;
    itemsUnit: string;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            leftFilter: string;
            rightFilter: string;
            sourceSelectedKeys: string[];
            targetSelectedKeys: string[];
        };
        $props: Partial<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            onScroll: (...args: any[]) => any;
            prefixCls: string;
            filterOption: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            rowKey: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
            searchPlaceholder: string;
            render: (...args: any[]) => any;
            operationStyle: {
                [key: string]: any;
            };
            onSearchChange: (...args: any[]) => any;
        }> & Omit<Readonly<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            onScroll: (...args: any[]) => any;
            prefixCls: string;
            filterOption: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            rowKey: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
            searchPlaceholder: string;
            render: (...args: any[]) => any;
            operationStyle: {
                [key: string]: any;
            };
            onSearchChange: (...args: any[]) => any;
        } & {
            children?: any;
            disabled?: boolean;
            notFoundContent?: any;
            showSearch?: boolean;
            dataSource?: {
                key: (string | ((props: Record<string, unknown>) => string)) & string;
                title: (string | ((props: Record<string, unknown>) => string)) & string;
                description: (string | ((props: Record<string, unknown>) => string)) & string;
                disabled: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            }[];
            lazy?: boolean | {
                [key: string]: any;
            };
            selectedKeys?: string[];
            showSelectAll?: boolean;
            listStyle?: any;
            targetKeys?: string[];
            titles?: string[];
            operations?: string[];
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "locale" | "onChange" | "onScroll" | "prefixCls" | "filterOption" | "onSearch" | "rowKey" | "onSelectChange" | "searchPlaceholder" | "render" | "operationStyle" | "onSearchChange">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            onScroll: (...args: any[]) => any;
            prefixCls: string;
            filterOption: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            rowKey: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
            searchPlaceholder: string;
            render: (...args: any[]) => any;
            operationStyle: {
                [key: string]: any;
            };
            onSearchChange: (...args: any[]) => any;
        } & {
            children?: any;
            disabled?: boolean;
            notFoundContent?: any;
            showSearch?: boolean;
            dataSource?: {
                key: (string | ((props: Record<string, unknown>) => string)) & string;
                title: (string | ((props: Record<string, unknown>) => string)) & string;
                description: (string | ((props: Record<string, unknown>) => string)) & string;
                disabled: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            }[];
            lazy?: boolean | {
                [key: string]: any;
            };
            selectedKeys?: string[];
            showSelectAll?: boolean;
            listStyle?: any;
            targetKeys?: string[];
            titles?: string[];
            operations?: string[];
        }>, {
            separatedDataSource: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            leftFilter: string;
            rightFilter: string;
            sourceSelectedKeys: string[];
            targetSelectedKeys: string[];
        }, {}, {
            getSelectedKeysName(direction: any): "sourceSelectedKeys" | "targetSelectedKeys";
            getTitles(transferLocale: TransferLocale): string[];
            getLocale(transferLocale: TransferLocale, renderEmpty: typeof import("../config-provider/renderEmpty").default): {
                notFoundContent: any;
                searchPlaceholder: string;
                titles: string[];
                itemUnit: string;
                itemsUnit: string;
            };
            updateState(): void;
            moveTo(direction: TransferDirection): void;
            moveToLeft(): void;
            moveToRight(): void;
            onItemSelectAll(direction: TransferDirection, selectedKeys: string[], checkAll: boolean): void;
            handleSelectAll(direction: any, filteredDataSource: any, checkAll: any): void;
            handleLeftSelectAll(filteredDataSource: any, checkAll: any): void;
            handleRightSelectAll(filteredDataSource: any, checkAll: any): void;
            onLeftItemSelectAll(selectedKeys: any, checkAll: any): void;
            onRightItemSelectAll(selectedKeys: any, checkAll: any): void;
            handleFilter(direction: any, e: any): void;
            handleLeftFilter(e: any): void;
            handleRightFilter(e: any): void;
            handleClear(direction: any): void;
            handleLeftClear(): void;
            handleRightClear(): void;
            onItemSelect(direction: any, selectedKey: any, checked: any): void;
            onLeftItemSelect(selectedKey: any, checked: any): void;
            onRightItemSelect(selectedKey: any, checked: any): void;
            handleScroll(direction: any, e: any): void;
            handleLeftScroll(e: any): void;
            handleRightScroll(e: any): void;
            handleSelectChange(direction: TransferDirection, holder: string[]): void;
            handleListStyle(listStyle: any, direction: any): any;
            separateDataSource(): {
                leftDataSource: any[];
                rightDataSource: any[];
            };
            renderTransfer(transferLocale: TransferLocale): JSX.Element;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            locale: {
                [key: string]: any;
            };
            onChange: (...args: any[]) => any;
            onScroll: (...args: any[]) => any;
            prefixCls: string;
            filterOption: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            rowKey: (...args: any[]) => any;
            onSelectChange: (...args: any[]) => any;
            searchPlaceholder: string;
            render: (...args: any[]) => any;
            operationStyle: {
                [key: string]: any;
            };
            onSearchChange: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        locale: {
            [key: string]: any;
        };
        onChange: (...args: any[]) => any;
        onScroll: (...args: any[]) => any;
        prefixCls: string;
        filterOption: (...args: any[]) => any;
        onSearch: (...args: any[]) => any;
        rowKey: (...args: any[]) => any;
        onSelectChange: (...args: any[]) => any;
        searchPlaceholder: string;
        render: (...args: any[]) => any;
        operationStyle: {
            [key: string]: any;
        };
        onSearchChange: (...args: any[]) => any;
    } & {
        children?: any;
        disabled?: boolean;
        notFoundContent?: any;
        showSearch?: boolean;
        dataSource?: {
            key: (string | ((props: Record<string, unknown>) => string)) & string;
            title: (string | ((props: Record<string, unknown>) => string)) & string;
            description: (string | ((props: Record<string, unknown>) => string)) & string;
            disabled: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        }[];
        lazy?: boolean | {
            [key: string]: any;
        };
        selectedKeys?: string[];
        showSelectAll?: boolean;
        listStyle?: any;
        targetKeys?: string[];
        titles?: string[];
        operations?: string[];
    }> & import("vue").ShallowUnwrapRef<{
        separatedDataSource: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        leftFilter: string;
        rightFilter: string;
        sourceSelectedKeys: string[];
        targetSelectedKeys: string[];
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        getSelectedKeysName(direction: any): "sourceSelectedKeys" | "targetSelectedKeys";
        getTitles(transferLocale: TransferLocale): string[];
        getLocale(transferLocale: TransferLocale, renderEmpty: typeof import("../config-provider/renderEmpty").default): {
            notFoundContent: any;
            searchPlaceholder: string;
            titles: string[];
            itemUnit: string;
            itemsUnit: string;
        };
        updateState(): void;
        moveTo(direction: TransferDirection): void;
        moveToLeft(): void;
        moveToRight(): void;
        onItemSelectAll(direction: TransferDirection, selectedKeys: string[], checkAll: boolean): void;
        handleSelectAll(direction: any, filteredDataSource: any, checkAll: any): void;
        handleLeftSelectAll(filteredDataSource: any, checkAll: any): void;
        handleRightSelectAll(filteredDataSource: any, checkAll: any): void;
        onLeftItemSelectAll(selectedKeys: any, checkAll: any): void;
        onRightItemSelectAll(selectedKeys: any, checkAll: any): void;
        handleFilter(direction: any, e: any): void;
        handleLeftFilter(e: any): void;
        handleRightFilter(e: any): void;
        handleClear(direction: any): void;
        handleLeftClear(): void;
        handleRightClear(): void;
        onItemSelect(direction: any, selectedKey: any, checked: any): void;
        onLeftItemSelect(selectedKey: any, checked: any): void;
        onRightItemSelect(selectedKey: any, checked: any): void;
        handleScroll(direction: any, e: any): void;
        handleLeftScroll(e: any): void;
        handleRightScroll(e: any): void;
        handleSelectChange(direction: TransferDirection, holder: string[]): void;
        handleListStyle(listStyle: any, direction: any): any;
        separateDataSource(): {
            leftDataSource: any[];
            rightDataSource: any[];
        };
        renderTransfer(transferLocale: TransferLocale): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    locale: {
        [key: string]: any;
    };
    onChange: (...args: any[]) => any;
    onScroll: (...args: any[]) => any;
    prefixCls: string;
    filterOption: (...args: any[]) => any;
    onSearch: (...args: any[]) => any;
    rowKey: (...args: any[]) => any;
    onSelectChange: (...args: any[]) => any;
    searchPlaceholder: string;
    render: (...args: any[]) => any;
    operationStyle: {
        [key: string]: any;
    };
    onSearchChange: (...args: any[]) => any;
} & {
    children?: any;
    disabled?: boolean;
    notFoundContent?: any;
    showSearch?: boolean;
    dataSource?: {
        key: (string | ((props: Record<string, unknown>) => string)) & string;
        title: (string | ((props: Record<string, unknown>) => string)) & string;
        description: (string | ((props: Record<string, unknown>) => string)) & string;
        disabled: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
    }[];
    lazy?: boolean | {
        [key: string]: any;
    };
    selectedKeys?: string[];
    showSelectAll?: boolean;
    listStyle?: any;
    targetKeys?: string[];
    titles?: string[];
    operations?: string[];
}>, {
    separatedDataSource: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    leftFilter: string;
    rightFilter: string;
    sourceSelectedKeys: string[];
    targetSelectedKeys: string[];
}, {}, {
    getSelectedKeysName(direction: any): "sourceSelectedKeys" | "targetSelectedKeys";
    getTitles(transferLocale: TransferLocale): string[];
    getLocale(transferLocale: TransferLocale, renderEmpty: typeof import("../config-provider/renderEmpty").default): {
        notFoundContent: any;
        searchPlaceholder: string;
        titles: string[];
        itemUnit: string;
        itemsUnit: string;
    };
    updateState(): void;
    moveTo(direction: TransferDirection): void;
    moveToLeft(): void;
    moveToRight(): void;
    onItemSelectAll(direction: TransferDirection, selectedKeys: string[], checkAll: boolean): void;
    handleSelectAll(direction: any, filteredDataSource: any, checkAll: any): void;
    handleLeftSelectAll(filteredDataSource: any, checkAll: any): void;
    handleRightSelectAll(filteredDataSource: any, checkAll: any): void;
    onLeftItemSelectAll(selectedKeys: any, checkAll: any): void;
    onRightItemSelectAll(selectedKeys: any, checkAll: any): void;
    handleFilter(direction: any, e: any): void;
    handleLeftFilter(e: any): void;
    handleRightFilter(e: any): void;
    handleClear(direction: any): void;
    handleLeftClear(): void;
    handleRightClear(): void;
    onItemSelect(direction: any, selectedKey: any, checked: any): void;
    onLeftItemSelect(selectedKey: any, checked: any): void;
    onRightItemSelect(selectedKey: any, checked: any): void;
    handleScroll(direction: any, e: any): void;
    handleLeftScroll(e: any): void;
    handleRightScroll(e: any): void;
    handleSelectChange(direction: TransferDirection, holder: string[]): void;
    handleListStyle(listStyle: any, direction: any): any;
    separateDataSource(): {
        leftDataSource: any[];
        rightDataSource: any[];
    };
    renderTransfer(transferLocale: TransferLocale): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    locale: {
        [key: string]: any;
    };
    onChange: (...args: any[]) => any;
    onScroll: (...args: any[]) => any;
    prefixCls: string;
    filterOption: (...args: any[]) => any;
    onSearch: (...args: any[]) => any;
    rowKey: (...args: any[]) => any;
    onSelectChange: (...args: any[]) => any;
    searchPlaceholder: string;
    render: (...args: any[]) => any;
    operationStyle: {
        [key: string]: any;
    };
    onSearchChange: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
