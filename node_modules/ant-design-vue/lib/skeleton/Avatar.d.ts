import { ExtractPropTypes } from 'vue';
declare const skeletonAvatarProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    size: import("vue-types").VueTypeDef<number | "default" | "small" | "large">;
    shape: import("vue-types").VueTypeDef<"circle" | "square">;
};
export declare const SkeletonAvatarProps: import("vue-types").VueTypeLooseShape<{
    prefixCls: (string | ((props: Record<string, unknown>) => string)) & string;
    size: number | "default" | "small" | "large";
    shape: "circle" | "square";
}>;
export declare type ISkeletonAvatarProps = Partial<ExtractPropTypes<typeof skeletonAvatarProps>>;
declare const Avatar: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    size: import("vue-types").VueTypeDef<number | "default" | "small" | "large">;
    shape: import("vue-types").VueTypeDef<"circle" | "square">;
}, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls: string;
} & {
    size?: number | "default" | "small" | "large";
    shape?: "circle" | "square";
}>, {
    prefixCls: string;
}>;
export default Avatar;
