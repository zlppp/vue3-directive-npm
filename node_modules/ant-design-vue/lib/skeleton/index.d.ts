export declare const SkeletonProps: {
    active: import("vue-types").VueTypeValidableDef<boolean>;
    loading: import("vue-types").VueTypeValidableDef<boolean>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    children: import("vue-types").VueTypeValidableDef<any>;
    avatar: import("vue-types").VueTypeDef<string | boolean | {
        prefixCls: (string | ((props: Record<string, unknown>) => string)) & string;
        size: number | "default" | "small" | "large";
        shape: "circle" | "square";
    }>;
    title: import("vue-types").VueTypeDef<string | boolean | {
        prefixCls: (string | ((props: Record<string, unknown>) => string)) & string;
        width: string | number;
    }>;
    paragraph: import("vue-types").VueTypeDef<string | boolean | {
        prefixCls: (string | ((props: Record<string, unknown>) => string)) & string;
        width: string | number | (string | number)[] | (() => (string | number)[]);
        rows: (number | ((props: Record<string, unknown>) => number)) & number;
    }>;
};
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{} | {
            [x: string]: any;
        }> & Omit<(Readonly<{
            [x: string]: any;
        }> | Readonly<{
            [x: string]: any;
        } & {
            [x: number]: any;
        }>) & (import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<{
            [x: string]: any;
        } | ({
            [x: string]: any;
        } & {
            [x: number]: any;
        })>), never>;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            [x: string]: any;
        } | ({
            [x: string]: any;
        } & {
            [x: number]: any;
        })>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {} | {
            [x: string]: any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        [x: string]: any;
    } | ({
        [x: string]: any;
    } & {
        [x: number]: any;
    })> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    [x: string]: any;
} | ({
    [x: string]: any;
} & {
    [x: number]: any;
})>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {} | {
    [x: string]: any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
