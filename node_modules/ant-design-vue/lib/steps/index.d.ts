import { ExtractPropTypes, Plugin } from 'vue';
import VcSteps from '../vc-steps';
declare const stepsProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    iconPrefix: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    current: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    initial: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    labelPlacement: import("vue-types").VueTypeDef<"horizontal" | "vertical"> & {
        default: "horizontal" | "vertical";
    };
    status: import("vue-types").VueTypeDef<"wait" | "error" | "finish" | "process">;
    size: import("vue-types").VueTypeDef<"default" | "small">;
    direction: import("vue-types").VueTypeDef<"horizontal" | "vertical">;
    progressDot: import("vue-types").VueTypeDef<any>;
    type: import("vue-types").VueTypeDef<"default" | "navigation">;
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:current': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare type StepsProps = Partial<ExtractPropTypes<typeof stepsProps>>;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            initial: number;
            current: number;
            "onUpdate:current": (...args: any[]) => any;
            iconPrefix: string;
            labelPlacement: "horizontal" | "vertical";
        }> & Omit<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            initial: number;
            current: number;
            "onUpdate:current": (...args: any[]) => any;
            iconPrefix: string;
            labelPlacement: "horizontal" | "vertical";
        } & {
            direction?: "horizontal" | "vertical";
            size?: "default" | "small";
            type?: "default" | "navigation";
            status?: "wait" | "error" | "finish" | "process";
            progressDot?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "prefixCls" | "initial" | "current" | "onUpdate:current" | "iconPrefix" | "labelPlacement">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:current", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            initial: number;
            current: number;
            "onUpdate:current": (...args: any[]) => any;
            iconPrefix: string;
            labelPlacement: "horizontal" | "vertical";
        } & {
            direction?: "horizontal" | "vertical";
            size?: "default" | "small";
            type?: "default" | "navigation";
            status?: "wait" | "error" | "finish" | "process";
            progressDot?: any;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            handleChange(current: number): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current")[], string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            initial: number;
            current: number;
            "onUpdate:current": (...args: any[]) => any;
            iconPrefix: string;
            labelPlacement: "horizontal" | "vertical";
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        prefixCls: string;
        initial: number;
        current: number;
        "onUpdate:current": (...args: any[]) => any;
        iconPrefix: string;
        labelPlacement: "horizontal" | "vertical";
    } & {
        direction?: "horizontal" | "vertical";
        size?: "default" | "small";
        type?: "default" | "navigation";
        status?: "wait" | "error" | "finish" | "process";
        progressDot?: any;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {} & {
        handleChange(current: number): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    initial: number;
    current: number;
    "onUpdate:current": (...args: any[]) => any;
    iconPrefix: string;
    labelPlacement: "horizontal" | "vertical";
} & {
    direction?: "horizontal" | "vertical";
    size?: "default" | "small";
    type?: "default" | "navigation";
    status?: "wait" | "error" | "finish" | "process";
    progressDot?: any;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    handleChange(current: number): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current")[], "change" | "update:current", {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    initial: number;
    current: number;
    "onUpdate:current": (...args: any[]) => any;
    iconPrefix: string;
    labelPlacement: "horizontal" | "vertical";
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Step: typeof VcSteps.Step;
};
export default _default;
