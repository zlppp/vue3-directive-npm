import { VueNode } from '../_util/type';
export declare const CommentProps: {
    actions: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    /** The element to display as the comment author. */
    author: import("vue-types").VueTypeValidableDef<VueNode>;
    /** The element to display as the comment avatar - generally an antd Avatar */
    avatar: import("vue-types").VueTypeValidableDef<VueNode>;
    /** The main content of the comment */
    content: import("vue-types").VueTypeValidableDef<VueNode>;
    /** Comment prefix defaults to '.ant-comment' */
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    /** A datetime element containing the time to be displayed */
    datetime: import("vue-types").VueTypeValidableDef<VueNode>;
};
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            actions: unknown[];
        }> & Omit<Readonly<{
            prefixCls: string;
            actions: unknown[];
        } & {
            content?: VueNode;
            avatar?: VueNode;
            author?: VueNode;
            datetime?: VueNode;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "actions">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            actions: unknown[];
        } & {
            content?: VueNode;
            avatar?: VueNode;
            author?: VueNode;
            datetime?: VueNode;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            getAction(actions: VueNode[]): JSX.Element[];
            renderNested(prefixCls: string, children: VueNode): JSX.Element;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            actions: unknown[];
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        actions: unknown[];
    } & {
        content?: VueNode;
        avatar?: VueNode;
        author?: VueNode;
        datetime?: VueNode;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {} & {
        getAction(actions: VueNode[]): JSX.Element[];
        renderNested(prefixCls: string, children: VueNode): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    actions: unknown[];
} & {
    content?: VueNode;
    avatar?: VueNode;
    author?: VueNode;
    datetime?: VueNode;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    getAction(actions: VueNode[]): JSX.Element[];
    renderNested(prefixCls: string, children: VueNode): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    actions: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
