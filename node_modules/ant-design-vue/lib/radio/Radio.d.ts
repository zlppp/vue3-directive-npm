import { ExtractPropTypes } from 'vue';
import { RadioChangeEvent } from './interface';
export declare const radioProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultChecked: import("vue-types").VueTypeValidableDef<boolean>;
    checked: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    isGroup: import("vue-types").VueTypeValidableDef<boolean>;
    value: import("vue-types").VueTypeValidableDef<any>;
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    type: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onFocus: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onBlur: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare type RadioProps = Partial<ExtractPropTypes<typeof radioProps>>;
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    defaultChecked: import("vue-types").VueTypeValidableDef<boolean>;
    checked: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    isGroup: import("vue-types").VueTypeValidableDef<boolean>;
    value: import("vue-types").VueTypeValidableDef<any>;
    name: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    id: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    autofocus: import("vue-types").VueTypeValidableDef<boolean>;
    type: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onFocus: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onBlur: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    radioGroupContext: any;
}, unknown, {}, {
    focus(): void;
    blur(): void;
    handleChange(event: RadioChangeEvent): void;
    onChange2(e: RadioChangeEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "update:value" | "update:checked")[], "blur" | "change" | "focus" | "update:value" | "update:checked", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    id: string;
    type: string;
    name: string;
} & {
    value?: any;
    disabled?: boolean;
    autofocus?: boolean;
    defaultChecked?: boolean;
    checked?: boolean;
    isGroup?: boolean;
}>, {
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    id: string;
    type: string;
    name: string;
}>;
export default _default;
