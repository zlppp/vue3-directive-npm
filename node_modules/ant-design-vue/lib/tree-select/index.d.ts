import { Plugin } from 'vue';
import { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from '../vc-tree-select';
export { TreeData, TreeSelectProps } from './interface';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            id: string;
            options: unknown[];
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            tabindex: number;
            animation: string;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            getPopupContainer: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            "onUpdate:value": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            searchPlaceholder: string;
            replaceFields: {
                [key: string]: any;
            };
            treeExpandedKeys: unknown[];
            treeDefaultExpandedKeys: unknown[];
            treeNodeFilterProp: string;
            treeNodeLabelProp: string;
            onTreeExpand: (...args: any[]) => any;
            "onUpdate:treeExpandedKeys": (...args: any[]) => any;
            "onUpdate:searchValue": (...args: any[]) => any;
        }> & Omit<Readonly<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            id: string;
            options: unknown[];
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            tabindex: number;
            animation: string;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            getPopupContainer: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            "onUpdate:value": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            searchPlaceholder: string;
            replaceFields: {
                [key: string]: any;
            };
            treeExpandedKeys: unknown[];
            treeDefaultExpandedKeys: unknown[];
            treeNodeFilterProp: string;
            treeNodeLabelProp: string;
            onTreeExpand: (...args: any[]) => any;
            "onUpdate:treeExpandedKeys": (...args: any[]) => any;
            "onUpdate:searchValue": (...args: any[]) => any;
        } & {
            value?: string | number | unknown[] | {
                [key: string]: any;
            };
            multiple?: boolean;
            size?: "default" | "small" | "large" | "middle";
            open?: boolean;
            disabled?: boolean;
            mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
            virtual?: boolean;
            defaultActiveFirstOption?: boolean;
            notFoundContent?: import("../_util/type").VueNode;
            menuItemSelectedIcon?: import("../_util/type").VueNode;
            labelInValue?: boolean;
            filterOption?: any;
            autofocus?: boolean;
            removeIcon?: import("../_util/type").VueNode;
            maxTagPlaceholder?: import("../_util/type").VueNode;
            placeholder?: import("../_util/type").VueNode;
            showSearch?: boolean;
            dropdownMatchSelectWidth?: boolean;
            dropdownAlign?: any;
            defaultValue?: string | number | unknown[] | {
                [key: string]: any;
            };
            autoClearSearchValue?: boolean;
            allowClear?: boolean;
            clearIcon?: import("../_util/type").VueNode;
            showArrow?: boolean;
            defaultOpen?: boolean;
            loading?: boolean;
            suffixIcon?: import("../_util/type").VueNode;
            itemIcon?: import("../_util/type").VueNode;
            treeData?: {
                [key: string]: any;
            }[];
            filterTreeNode?: boolean | Function;
            showCheckedStrategy?: "SHOW_ALL" | "SHOW_PARENT" | "SHOW_CHILD";
            treeCheckable?: boolean;
            treeCheckStrictly?: boolean;
            treeDataSimpleMode?: boolean | {
                [key: string]: any;
            };
            treeDefaultExpandAll?: boolean;
            treeIcon?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "children" | "onFocus" | "onBlur" | "onChange" | "onKeydown" | "onKeyup" | "onClick" | "onMousedown" | "onMouseenter" | "onMouseleave" | "onSelect" | "prefixCls" | "direction" | "id" | "options" | "searchValue" | "optionLabelProp" | "optionFilterProp" | "tabindex" | "animation" | "maxTagCount" | "maxTagTextLength" | "tokenSeparators" | "tagRender" | "choiceTransitionName" | "onInputKeyDown" | "onSearch" | "transitionName" | "dropdownStyle" | "dropdownClassName" | "dropdownRender" | "getPopupContainer" | "showAction" | "inputValue" | "onClear" | "listHeight" | "listItemHeight" | "onPopupScroll" | "onDropdownVisibleChange" | "onDeselect" | "internalProps" | "bordered" | "onUpdate:value" | "loadData" | "searchPlaceholder" | "replaceFields" | "treeExpandedKeys" | "treeDefaultExpandedKeys" | "treeNodeFilterProp" | "treeNodeLabelProp" | "onTreeExpand" | "onUpdate:treeExpandedKeys" | "onUpdate:searchValue">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            id: string;
            options: unknown[];
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            tabindex: number;
            animation: string;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            getPopupContainer: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            "onUpdate:value": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            searchPlaceholder: string;
            replaceFields: {
                [key: string]: any;
            };
            treeExpandedKeys: unknown[];
            treeDefaultExpandedKeys: unknown[];
            treeNodeFilterProp: string;
            treeNodeLabelProp: string;
            onTreeExpand: (...args: any[]) => any;
            "onUpdate:treeExpandedKeys": (...args: any[]) => any;
            "onUpdate:searchValue": (...args: any[]) => any;
        } & {
            value?: string | number | unknown[] | {
                [key: string]: any;
            };
            multiple?: boolean;
            size?: "default" | "small" | "large" | "middle";
            open?: boolean;
            disabled?: boolean;
            mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
            virtual?: boolean;
            defaultActiveFirstOption?: boolean;
            notFoundContent?: import("../_util/type").VueNode;
            menuItemSelectedIcon?: import("../_util/type").VueNode;
            labelInValue?: boolean;
            filterOption?: any;
            autofocus?: boolean;
            removeIcon?: import("../_util/type").VueNode;
            maxTagPlaceholder?: import("../_util/type").VueNode;
            placeholder?: import("../_util/type").VueNode;
            showSearch?: boolean;
            dropdownMatchSelectWidth?: boolean;
            dropdownAlign?: any;
            defaultValue?: string | number | unknown[] | {
                [key: string]: any;
            };
            autoClearSearchValue?: boolean;
            allowClear?: boolean;
            clearIcon?: import("../_util/type").VueNode;
            showArrow?: boolean;
            defaultOpen?: boolean;
            loading?: boolean;
            suffixIcon?: import("../_util/type").VueNode;
            itemIcon?: import("../_util/type").VueNode;
            treeData?: {
                [key: string]: any;
            }[];
            filterTreeNode?: boolean | Function;
            showCheckedStrategy?: "SHOW_ALL" | "SHOW_PARENT" | "SHOW_CHILD";
            treeCheckable?: boolean;
            treeCheckStrictly?: boolean;
            treeDataSimpleMode?: boolean | {
                [key: string]: any;
            };
            treeDefaultExpandAll?: boolean;
            treeIcon?: boolean;
        }>, {
            vcTreeSelect: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, unknown, {}, {
            saveTreeSelect(node: any): void;
            focus(): void;
            blur(): void;
            renderSwitcherIcon(prefixCls: string, { isLeaf, loading }: {
                isLeaf: any;
                loading: any;
            }): JSX.Element;
            handleChange(...args: any[]): void;
            handleTreeExpand(...args: any[]): void;
            handleSearch(...args: any[]): void;
            updateTreeData(treeData: any[]): any;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            id: string;
            options: unknown[];
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            tabindex: number;
            animation: string;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            getPopupContainer: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            "onUpdate:value": (...args: any[]) => any;
            loadData: (...args: any[]) => any;
            searchPlaceholder: string;
            replaceFields: {
                [key: string]: any;
            };
            treeExpandedKeys: unknown[];
            treeDefaultExpandedKeys: unknown[];
            treeNodeFilterProp: string;
            treeNodeLabelProp: string;
            onTreeExpand: (...args: any[]) => any;
            "onUpdate:treeExpandedKeys": (...args: any[]) => any;
            "onUpdate:searchValue": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        children: unknown[];
        onFocus: (...args: any[]) => any;
        onBlur: (...args: any[]) => any;
        onChange: (...args: any[]) => any;
        onKeydown: (...args: any[]) => any;
        onKeyup: (...args: any[]) => any;
        onClick: (...args: any[]) => any;
        onMousedown: (...args: any[]) => any;
        onMouseenter: (...args: any[]) => any;
        onMouseleave: (...args: any[]) => any;
        onSelect: (...args: any[]) => any;
        prefixCls: string;
        direction: string;
        id: string;
        options: unknown[];
        searchValue: string;
        optionLabelProp: string;
        optionFilterProp: string;
        tabindex: number;
        animation: string;
        maxTagCount: number;
        maxTagTextLength: number;
        tokenSeparators: unknown[];
        tagRender: (...args: any[]) => any;
        choiceTransitionName: string;
        onInputKeyDown: (...args: any[]) => any;
        onSearch: (...args: any[]) => any;
        transitionName: string;
        dropdownStyle: {
            [key: string]: any;
        };
        dropdownClassName: string;
        dropdownRender: (...args: any[]) => any;
        getPopupContainer: (...args: any[]) => any;
        showAction: unknown[];
        inputValue: string;
        onClear: (...args: any[]) => any;
        listHeight: number;
        listItemHeight: number;
        onPopupScroll: (...args: any[]) => any;
        onDropdownVisibleChange: (...args: any[]) => any;
        onDeselect: (...args: any[]) => any;
        internalProps: {
            [key: string]: any;
        };
        bordered: boolean;
        "onUpdate:value": (...args: any[]) => any;
        loadData: (...args: any[]) => any;
        searchPlaceholder: string;
        replaceFields: {
            [key: string]: any;
        };
        treeExpandedKeys: unknown[];
        treeDefaultExpandedKeys: unknown[];
        treeNodeFilterProp: string;
        treeNodeLabelProp: string;
        onTreeExpand: (...args: any[]) => any;
        "onUpdate:treeExpandedKeys": (...args: any[]) => any;
        "onUpdate:searchValue": (...args: any[]) => any;
    } & {
        value?: string | number | unknown[] | {
            [key: string]: any;
        };
        multiple?: boolean;
        size?: "default" | "small" | "large" | "middle";
        open?: boolean;
        disabled?: boolean;
        mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
        virtual?: boolean;
        defaultActiveFirstOption?: boolean;
        notFoundContent?: import("../_util/type").VueNode;
        menuItemSelectedIcon?: import("../_util/type").VueNode;
        labelInValue?: boolean;
        filterOption?: any;
        autofocus?: boolean;
        removeIcon?: import("../_util/type").VueNode;
        maxTagPlaceholder?: import("../_util/type").VueNode;
        placeholder?: import("../_util/type").VueNode;
        showSearch?: boolean;
        dropdownMatchSelectWidth?: boolean;
        dropdownAlign?: any;
        defaultValue?: string | number | unknown[] | {
            [key: string]: any;
        };
        autoClearSearchValue?: boolean;
        allowClear?: boolean;
        clearIcon?: import("../_util/type").VueNode;
        showArrow?: boolean;
        defaultOpen?: boolean;
        loading?: boolean;
        suffixIcon?: import("../_util/type").VueNode;
        itemIcon?: import("../_util/type").VueNode;
        treeData?: {
            [key: string]: any;
        }[];
        filterTreeNode?: boolean | Function;
        showCheckedStrategy?: "SHOW_ALL" | "SHOW_PARENT" | "SHOW_CHILD";
        treeCheckable?: boolean;
        treeCheckStrictly?: boolean;
        treeDataSimpleMode?: boolean | {
            [key: string]: any;
        };
        treeDefaultExpandAll?: boolean;
        treeIcon?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        vcTreeSelect: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {} & {} & {
        saveTreeSelect(node: any): void;
        focus(): void;
        blur(): void;
        renderSwitcherIcon(prefixCls: string, { isLeaf, loading }: {
            isLeaf: any;
            loading: any;
        }): JSX.Element;
        handleChange(...args: any[]): void;
        handleTreeExpand(...args: any[]): void;
        handleSearch(...args: any[]): void;
        updateTreeData(treeData: any[]): any;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    children: unknown[];
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onMousedown: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onMouseleave: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    direction: string;
    id: string;
    options: unknown[];
    searchValue: string;
    optionLabelProp: string;
    optionFilterProp: string;
    tabindex: number;
    animation: string;
    maxTagCount: number;
    maxTagTextLength: number;
    tokenSeparators: unknown[];
    tagRender: (...args: any[]) => any;
    choiceTransitionName: string;
    onInputKeyDown: (...args: any[]) => any;
    onSearch: (...args: any[]) => any;
    transitionName: string;
    dropdownStyle: {
        [key: string]: any;
    };
    dropdownClassName: string;
    dropdownRender: (...args: any[]) => any;
    getPopupContainer: (...args: any[]) => any;
    showAction: unknown[];
    inputValue: string;
    onClear: (...args: any[]) => any;
    listHeight: number;
    listItemHeight: number;
    onPopupScroll: (...args: any[]) => any;
    onDropdownVisibleChange: (...args: any[]) => any;
    onDeselect: (...args: any[]) => any;
    internalProps: {
        [key: string]: any;
    };
    bordered: boolean;
    "onUpdate:value": (...args: any[]) => any;
    loadData: (...args: any[]) => any;
    searchPlaceholder: string;
    replaceFields: {
        [key: string]: any;
    };
    treeExpandedKeys: unknown[];
    treeDefaultExpandedKeys: unknown[];
    treeNodeFilterProp: string;
    treeNodeLabelProp: string;
    onTreeExpand: (...args: any[]) => any;
    "onUpdate:treeExpandedKeys": (...args: any[]) => any;
    "onUpdate:searchValue": (...args: any[]) => any;
} & {
    value?: string | number | unknown[] | {
        [key: string]: any;
    };
    multiple?: boolean;
    size?: "default" | "small" | "large" | "middle";
    open?: boolean;
    disabled?: boolean;
    mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
    virtual?: boolean;
    defaultActiveFirstOption?: boolean;
    notFoundContent?: import("../_util/type").VueNode;
    menuItemSelectedIcon?: import("../_util/type").VueNode;
    labelInValue?: boolean;
    filterOption?: any;
    autofocus?: boolean;
    removeIcon?: import("../_util/type").VueNode;
    maxTagPlaceholder?: import("../_util/type").VueNode;
    placeholder?: import("../_util/type").VueNode;
    showSearch?: boolean;
    dropdownMatchSelectWidth?: boolean;
    dropdownAlign?: any;
    defaultValue?: string | number | unknown[] | {
        [key: string]: any;
    };
    autoClearSearchValue?: boolean;
    allowClear?: boolean;
    clearIcon?: import("../_util/type").VueNode;
    showArrow?: boolean;
    defaultOpen?: boolean;
    loading?: boolean;
    suffixIcon?: import("../_util/type").VueNode;
    itemIcon?: import("../_util/type").VueNode;
    treeData?: {
        [key: string]: any;
    }[];
    filterTreeNode?: boolean | Function;
    showCheckedStrategy?: "SHOW_ALL" | "SHOW_PARENT" | "SHOW_CHILD";
    treeCheckable?: boolean;
    treeCheckStrictly?: boolean;
    treeDataSimpleMode?: boolean | {
        [key: string]: any;
    };
    treeDefaultExpandAll?: boolean;
    treeIcon?: boolean;
}>, {
    vcTreeSelect: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    saveTreeSelect(node: any): void;
    focus(): void;
    blur(): void;
    renderSwitcherIcon(prefixCls: string, { isLeaf, loading }: {
        isLeaf: any;
        loading: any;
    }): JSX.Element;
    handleChange(...args: any[]): void;
    handleTreeExpand(...args: any[]): void;
    handleSearch(...args: any[]): void;
    updateTreeData(treeData: any[]): any;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    children: unknown[];
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onMousedown: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onMouseleave: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    direction: string;
    id: string;
    options: unknown[];
    searchValue: string;
    optionLabelProp: string;
    optionFilterProp: string;
    tabindex: number;
    animation: string;
    maxTagCount: number;
    maxTagTextLength: number;
    tokenSeparators: unknown[];
    tagRender: (...args: any[]) => any;
    choiceTransitionName: string;
    onInputKeyDown: (...args: any[]) => any;
    onSearch: (...args: any[]) => any;
    transitionName: string;
    dropdownStyle: {
        [key: string]: any;
    };
    dropdownClassName: string;
    dropdownRender: (...args: any[]) => any;
    getPopupContainer: (...args: any[]) => any;
    showAction: unknown[];
    inputValue: string;
    onClear: (...args: any[]) => any;
    listHeight: number;
    listItemHeight: number;
    onPopupScroll: (...args: any[]) => any;
    onDropdownVisibleChange: (...args: any[]) => any;
    onDeselect: (...args: any[]) => any;
    internalProps: {
        [key: string]: any;
    };
    bordered: boolean;
    "onUpdate:value": (...args: any[]) => any;
    loadData: (...args: any[]) => any;
    searchPlaceholder: string;
    replaceFields: {
        [key: string]: any;
    };
    treeExpandedKeys: unknown[];
    treeDefaultExpandedKeys: unknown[];
    treeNodeFilterProp: string;
    treeNodeLabelProp: string;
    onTreeExpand: (...args: any[]) => any;
    "onUpdate:treeExpandedKeys": (...args: any[]) => any;
    "onUpdate:searchValue": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly TreeNode: typeof TreeNode;
    readonly SHOW_ALL: typeof SHOW_ALL;
    readonly SHOW_PARENT: typeof SHOW_PARENT;
    readonly SHOW_CHILD: typeof SHOW_CHILD;
};
export default _default;
