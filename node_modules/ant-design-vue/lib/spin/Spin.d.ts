export declare const SpinSize: import("vue-types").VueTypeDef<"default" | "small" | "large">;
export declare const SpinProps: () => {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    spinning: import("vue-types").VueTypeValidableDef<boolean>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    tip: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    delay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    indicator: import("vue-types").VueTypeValidableDef<any>;
};
export declare function setDefaultIndicator(Content: any): void;
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    spinning: import("vue-types").VueTypeValidableDef<boolean>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    tip: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    delay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    indicator: import("vue-types").VueTypeValidableDef<any>;
}, {
    originalUpdateSpinning: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    sSpinning: boolean;
}, {}, {
    debouncifyUpdateSpinning(props?: any): void;
    updateSpinning(): void;
    cancelExistingSpin(): void;
    renderIndicator(prefixCls: string): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls: string;
    wrapperClassName: string;
    tip: string;
    delay: number;
} & {
    size?: "default" | "small" | "large";
    spinning?: boolean;
    indicator?: any;
}>, {
    prefixCls: string;
    wrapperClassName: string;
    tip: string;
    delay: number;
}>;
export default _default;
