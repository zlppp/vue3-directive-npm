import { Plugin } from 'vue';
import { setDefaultIndicator } from './Spin';
export { SpinProps } from './Spin';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sSpinning: boolean;
        };
        $props: Partial<{
            prefixCls: string;
            wrapperClassName: string;
            tip: string;
            delay: number;
        }> & Omit<Readonly<{
            prefixCls: string;
            wrapperClassName: string;
            tip: string;
            delay: number;
        } & {
            size?: "default" | "small" | "large";
            spinning?: boolean;
            indicator?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "wrapperClassName" | "tip" | "delay">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            wrapperClassName: string;
            tip: string;
            delay: number;
        } & {
            size?: "default" | "small" | "large";
            spinning?: boolean;
            indicator?: any;
        }>, {
            originalUpdateSpinning: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            sSpinning: boolean;
        }, {}, {
            debouncifyUpdateSpinning(props?: any): void;
            updateSpinning(): void;
            cancelExistingSpin(): void;
            renderIndicator(prefixCls: string): JSX.Element;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            wrapperClassName: string;
            tip: string;
            delay: number;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        wrapperClassName: string;
        tip: string;
        delay: number;
    } & {
        size?: "default" | "small" | "large";
        spinning?: boolean;
        indicator?: any;
    }> & import("vue").ShallowUnwrapRef<{
        originalUpdateSpinning: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        sSpinning: boolean;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        debouncifyUpdateSpinning(props?: any): void;
        updateSpinning(): void;
        cancelExistingSpin(): void;
        renderIndicator(prefixCls: string): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    wrapperClassName: string;
    tip: string;
    delay: number;
} & {
    size?: "default" | "small" | "large";
    spinning?: boolean;
    indicator?: any;
}>, {
    originalUpdateSpinning: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    sSpinning: boolean;
}, {}, {
    debouncifyUpdateSpinning(props?: any): void;
    updateSpinning(): void;
    cancelExistingSpin(): void;
    renderIndicator(prefixCls: string): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    wrapperClassName: string;
    tip: string;
    delay: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly setDefaultIndicator: typeof setDefaultIndicator;
};
export default _default;
