declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            dashed: boolean;
            type: "" | "horizontal" | "vertical";
            orientation: "center" | "left" | "right";
        }> & Omit<Readonly<{
            dashed: boolean;
            type: "" | "horizontal" | "vertical";
            orientation: "center" | "left" | "right";
        } & {
            prefixCls?: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "dashed" | "type" | "orientation">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            dashed: boolean;
            type: "" | "horizontal" | "vertical";
            orientation: "center" | "left" | "right";
        } & {
            prefixCls?: string;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            dashed: boolean;
            type: "" | "horizontal" | "vertical";
            orientation: "center" | "left" | "right";
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        dashed: boolean;
        type: "" | "horizontal" | "vertical";
        orientation: "center" | "left" | "right";
    } & {
        prefixCls?: string;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    dashed: boolean;
    type: "" | "horizontal" | "vertical";
    orientation: "center" | "left" | "right";
} & {
    prefixCls?: string;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    dashed: boolean;
    type: "" | "horizontal" | "vertical";
    orientation: "center" | "left" | "right";
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
