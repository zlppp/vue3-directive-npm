declare var _default: import("vue").DefineComponent<any, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    [x: string]: any;
} | ({
    [x: string]: any;
} & {
    [x: number]: any;
})>, {} | {
    [x: string]: any;
}>;
export default _default;
export { props as menuItemProps };
declare namespace props {
    const attribute: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    const rootPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    const eventKey: import("vue-types").VueTypeDef<string | number>;
    const active: import("vue-types").VueTypeValidableDef<boolean>;
    const selectedKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    const disabled: import("vue-types").VueTypeValidableDef<boolean>;
    const title: import("vue-types").VueTypeValidableDef<any>;
    const index: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    const inlineIndent: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    const level: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    const mode: import("vue-types").VueTypeDef<string>;
    const multiple: import("vue-types").VueTypeValidableDef<boolean>;
    const value: import("vue-types").VueTypeValidableDef<any>;
    const manualRef: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    } & {
        default: (...args: any[]) => any;
    };
    const role: import("vue-types").VueTypeValidableDef<any>;
    const subMenuKey: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    const itemIcon: import("vue-types").VueTypeValidableDef<any>;
    const parentUniKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    } & {
        default: () => unknown[];
    };
    const parentUniKey: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
}
