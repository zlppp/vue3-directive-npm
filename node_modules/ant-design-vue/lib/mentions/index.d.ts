import { nextTick, VNodeTypes, Plugin } from 'vue';
export interface OptionProps {
    value: string;
    disabled: boolean;
    children: VNodeTypes;
    [key: string]: any;
}
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            focused: boolean;
        };
        $props: Partial<{
            value: string;
            prefixCls: string;
            filterOption: (...args: any[]) => any;
            transitionName: string;
            split: string;
            defaultValue: string;
            characterRender: (...args: any[]) => any;
            validateSearch: (...args: any[]) => any;
        }> & Omit<Readonly<{
            value: string;
            prefixCls: string;
            filterOption: (...args: any[]) => any;
            transitionName: string;
            split: string;
            defaultValue: string;
            characterRender: (...args: any[]) => any;
            validateSearch: (...args: any[]) => any;
        } & {
            onFocus?: (e: FocusEvent) => void;
            onBlur?: (e: FocusEvent) => void;
            onChange?: (text: string) => void;
            onSelect?: (option: OptionProps, prefix: string) => void;
            disabled?: boolean;
            notFoundContent?: import("../_util/type").VueNode;
            autofocus?: boolean;
            getPopupContainer?: () => HTMLElement;
            loading?: boolean;
            prefix?: string | unknown[];
            placement?: "bottom" | "top";
            character?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "value" | "prefixCls" | "filterOption" | "transitionName" | "split" | "defaultValue" | "characterRender" | "validateSearch">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "blur" | "change" | "focus" | "select" | "update:value", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            value: string;
            prefixCls: string;
            filterOption: (...args: any[]) => any;
            transitionName: string;
            split: string;
            defaultValue: string;
            characterRender: (...args: any[]) => any;
            validateSearch: (...args: any[]) => any;
        } & {
            onFocus?: (e: FocusEvent) => void;
            onBlur?: (e: FocusEvent) => void;
            onChange?: (text: string) => void;
            onSelect?: (option: OptionProps, prefix: string) => void;
            disabled?: boolean;
            notFoundContent?: import("../_util/type").VueNode;
            autofocus?: boolean;
            getPopupContainer?: () => HTMLElement;
            loading?: boolean;
            prefix?: string | unknown[];
            placement?: "bottom" | "top";
            character?: any;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            focused: boolean;
        }, {}, {
            handleFocus(e: FocusEvent): void;
            handleBlur(e: FocusEvent): void;
            handleSelect(args_0: OptionProps, args_1: string): void;
            handleChange(val: string): void;
            getNotFoundContent(renderEmpty: typeof import("../config-provider/renderEmpty").default): any;
            getOptions(): any[] | JSX.Element;
            getFilterOption(): (...args: any[]) => any;
            focus(): void;
            blur(): void;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "select" | "update:value")[], string, {
            value: string;
            prefixCls: string;
            filterOption: (...args: any[]) => any;
            transitionName: string;
            split: string;
            defaultValue: string;
            characterRender: (...args: any[]) => any;
            validateSearch: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        value: string;
        prefixCls: string;
        filterOption: (...args: any[]) => any;
        transitionName: string;
        split: string;
        defaultValue: string;
        characterRender: (...args: any[]) => any;
        validateSearch: (...args: any[]) => any;
    } & {
        onFocus?: (e: FocusEvent) => void;
        onBlur?: (e: FocusEvent) => void;
        onChange?: (text: string) => void;
        onSelect?: (option: OptionProps, prefix: string) => void;
        disabled?: boolean;
        notFoundContent?: import("../_util/type").VueNode;
        autofocus?: boolean;
        getPopupContainer?: () => HTMLElement;
        loading?: boolean;
        prefix?: string | unknown[];
        placement?: "bottom" | "top";
        character?: any;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        focused: boolean;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        handleFocus(e: FocusEvent): void;
        handleBlur(e: FocusEvent): void;
        handleSelect(args_0: OptionProps, args_1: string): void;
        handleChange(val: string): void;
        getNotFoundContent(renderEmpty: typeof import("../config-provider/renderEmpty").default): any;
        getOptions(): any[] | JSX.Element;
        getFilterOption(): (...args: any[]) => any;
        focus(): void;
        blur(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    value: string;
    prefixCls: string;
    filterOption: (...args: any[]) => any;
    transitionName: string;
    split: string;
    defaultValue: string;
    characterRender: (...args: any[]) => any;
    validateSearch: (...args: any[]) => any;
} & {
    onFocus?: (e: FocusEvent) => void;
    onBlur?: (e: FocusEvent) => void;
    onChange?: (text: string) => void;
    onSelect?: (option: OptionProps, prefix: string) => void;
    disabled?: boolean;
    notFoundContent?: import("../_util/type").VueNode;
    autofocus?: boolean;
    getPopupContainer?: () => HTMLElement;
    loading?: boolean;
    prefix?: string | unknown[];
    placement?: "bottom" | "top";
    character?: any;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    focused: boolean;
}, {}, {
    handleFocus(e: FocusEvent): void;
    handleBlur(e: FocusEvent): void;
    handleSelect(args_0: OptionProps, args_1: string): void;
    handleChange(val: string): void;
    getNotFoundContent(renderEmpty: typeof import("../config-provider/renderEmpty").default): any;
    getOptions(): any[] | JSX.Element;
    getFilterOption(): (...args: any[]) => any;
    focus(): void;
    blur(): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, ("blur" | "change" | "focus" | "select" | "update:value")[], "select" | "blur" | "change" | "focus" | "update:value", {
    value: string;
    prefixCls: string;
    filterOption: (...args: any[]) => any;
    transitionName: string;
    split: string;
    defaultValue: string;
    characterRender: (...args: any[]) => any;
    validateSearch: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Option: any;
};
export default _default;
