export declare const CarouselProps: {
    effect: import("vue-types").VueTypeDef<"fade" | "scrollx">;
    dots: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    vertical: import("vue-types").VueTypeValidableDef<boolean>;
    autoplay: import("vue-types").VueTypeValidableDef<boolean>;
    easing: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    beforeChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    afterChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    accessibility: import("vue-types").VueTypeValidableDef<boolean>;
    nextArrow: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    prevArrow: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    pauseOnHover: import("vue-types").VueTypeValidableDef<boolean>;
    adaptiveHeight: import("vue-types").VueTypeValidableDef<boolean>;
    arrows: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    autoplaySpeed: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    centerMode: import("vue-types").VueTypeValidableDef<boolean>;
    centerPadding: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    cssEase: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    dotsClass: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    draggable: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    fade: import("vue-types").VueTypeValidableDef<boolean>;
    focusOnSelect: import("vue-types").VueTypeValidableDef<boolean>;
    infinite: import("vue-types").VueTypeValidableDef<boolean>;
    initialSlide: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    lazyLoad: import("vue-types").VueTypeValidableDef<boolean>;
    rtl: import("vue-types").VueTypeValidableDef<boolean>;
    slide: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    slidesToShow: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    slidesToScroll: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    speed: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    swipe: import("vue-types").VueTypeValidableDef<boolean>;
    swipeToSlide: import("vue-types").VueTypeValidableDef<boolean>;
    touchMove: import("vue-types").VueTypeValidableDef<boolean>;
    touchThreshold: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    variableWidth: import("vue-types").VueTypeValidableDef<boolean>;
    useCSS: import("vue-types").VueTypeValidableDef<boolean>;
    slickGoTo: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    responsive: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    dotPosition: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top">;
    verticalSwiping: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
};
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            draggable: boolean;
            responsive: unknown[];
            dots: boolean;
            easing: string;
            beforeChange: (...args: any[]) => any;
            afterChange: (...args: any[]) => any;
            arrows: boolean;
            autoplaySpeed: number;
            centerPadding: string;
            cssEase: string;
            dotsClass: string;
            initialSlide: number;
            slide: string;
            slidesToShow: number;
            slidesToScroll: number;
            speed: number;
            touchThreshold: number;
            slickGoTo: number;
            verticalSwiping: boolean;
        }> & Omit<Readonly<{
            prefixCls: string;
            draggable: boolean;
            responsive: unknown[];
            dots: boolean;
            easing: string;
            beforeChange: (...args: any[]) => any;
            afterChange: (...args: any[]) => any;
            arrows: boolean;
            autoplaySpeed: number;
            centerPadding: string;
            cssEase: string;
            dotsClass: string;
            initialSlide: number;
            slide: string;
            slidesToShow: number;
            slidesToScroll: number;
            speed: number;
            touchThreshold: number;
            slickGoTo: number;
            verticalSwiping: boolean;
        } & {
            rtl?: boolean;
            infinite?: boolean;
            vertical?: boolean;
            fade?: boolean;
            effect?: "fade" | "scrollx";
            autoplay?: boolean;
            accessibility?: boolean;
            nextArrow?: import("../_util/type").VueNode;
            prevArrow?: import("../_util/type").VueNode;
            pauseOnHover?: boolean;
            adaptiveHeight?: boolean;
            centerMode?: boolean;
            focusOnSelect?: boolean;
            lazyLoad?: boolean;
            swipe?: boolean;
            swipeToSlide?: boolean;
            touchMove?: boolean;
            variableWidth?: boolean;
            useCSS?: boolean;
            dotPosition?: "left" | "right" | "bottom" | "top";
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "draggable" | "responsive" | "dots" | "easing" | "beforeChange" | "afterChange" | "arrows" | "autoplaySpeed" | "centerPadding" | "cssEase" | "dotsClass" | "initialSlide" | "slide" | "slidesToShow" | "slidesToScroll" | "speed" | "touchThreshold" | "slickGoTo" | "verticalSwiping">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            draggable: boolean;
            responsive: unknown[];
            dots: boolean;
            easing: string;
            beforeChange: (...args: any[]) => any;
            afterChange: (...args: any[]) => any;
            arrows: boolean;
            autoplaySpeed: number;
            centerPadding: string;
            cssEase: string;
            dotsClass: string;
            initialSlide: number;
            slide: string;
            slidesToShow: number;
            slidesToScroll: number;
            speed: number;
            touchThreshold: number;
            slickGoTo: number;
            verticalSwiping: boolean;
        } & {
            rtl?: boolean;
            infinite?: boolean;
            vertical?: boolean;
            fade?: boolean;
            effect?: "fade" | "scrollx";
            autoplay?: boolean;
            accessibility?: boolean;
            nextArrow?: import("../_util/type").VueNode;
            prevArrow?: import("../_util/type").VueNode;
            pauseOnHover?: boolean;
            adaptiveHeight?: boolean;
            centerMode?: boolean;
            focusOnSelect?: boolean;
            lazyLoad?: boolean;
            swipe?: boolean;
            swipeToSlide?: boolean;
            touchMove?: boolean;
            variableWidth?: boolean;
            useCSS?: boolean;
            dotPosition?: "left" | "right" | "bottom" | "top";
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            slick: any;
            innerSlider: any;
        }, unknown, {}, {
            getDotPosition(): "left" | "right" | "bottom" | "top";
            saveSlick(node: HTMLElement): void;
            onWindowResized(): void;
            next(): void;
            prev(): void;
            goTo(slide: number, dontAnimate?: boolean): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            draggable: boolean;
            responsive: unknown[];
            dots: boolean;
            easing: string;
            beforeChange: (...args: any[]) => any;
            afterChange: (...args: any[]) => any;
            arrows: boolean;
            autoplaySpeed: number;
            centerPadding: string;
            cssEase: string;
            dotsClass: string;
            initialSlide: number;
            slide: string;
            slidesToShow: number;
            slidesToScroll: number;
            speed: number;
            touchThreshold: number;
            slickGoTo: number;
            verticalSwiping: boolean;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        draggable: boolean;
        responsive: unknown[];
        dots: boolean;
        easing: string;
        beforeChange: (...args: any[]) => any;
        afterChange: (...args: any[]) => any;
        arrows: boolean;
        autoplaySpeed: number;
        centerPadding: string;
        cssEase: string;
        dotsClass: string;
        initialSlide: number;
        slide: string;
        slidesToShow: number;
        slidesToScroll: number;
        speed: number;
        touchThreshold: number;
        slickGoTo: number;
        verticalSwiping: boolean;
    } & {
        rtl?: boolean;
        infinite?: boolean;
        vertical?: boolean;
        fade?: boolean;
        effect?: "fade" | "scrollx";
        autoplay?: boolean;
        accessibility?: boolean;
        nextArrow?: import("../_util/type").VueNode;
        prevArrow?: import("../_util/type").VueNode;
        pauseOnHover?: boolean;
        adaptiveHeight?: boolean;
        centerMode?: boolean;
        focusOnSelect?: boolean;
        lazyLoad?: boolean;
        swipe?: boolean;
        swipeToSlide?: boolean;
        touchMove?: boolean;
        variableWidth?: boolean;
        useCSS?: boolean;
        dotPosition?: "left" | "right" | "bottom" | "top";
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        slick: any;
        innerSlider: any;
    }> & {} & {} & {
        getDotPosition(): "left" | "right" | "bottom" | "top";
        saveSlick(node: HTMLElement): void;
        onWindowResized(): void;
        next(): void;
        prev(): void;
        goTo(slide: number, dontAnimate?: boolean): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    draggable: boolean;
    responsive: unknown[];
    dots: boolean;
    easing: string;
    beforeChange: (...args: any[]) => any;
    afterChange: (...args: any[]) => any;
    arrows: boolean;
    autoplaySpeed: number;
    centerPadding: string;
    cssEase: string;
    dotsClass: string;
    initialSlide: number;
    slide: string;
    slidesToShow: number;
    slidesToScroll: number;
    speed: number;
    touchThreshold: number;
    slickGoTo: number;
    verticalSwiping: boolean;
} & {
    rtl?: boolean;
    infinite?: boolean;
    vertical?: boolean;
    fade?: boolean;
    effect?: "fade" | "scrollx";
    autoplay?: boolean;
    accessibility?: boolean;
    nextArrow?: import("../_util/type").VueNode;
    prevArrow?: import("../_util/type").VueNode;
    pauseOnHover?: boolean;
    adaptiveHeight?: boolean;
    centerMode?: boolean;
    focusOnSelect?: boolean;
    lazyLoad?: boolean;
    swipe?: boolean;
    swipeToSlide?: boolean;
    touchMove?: boolean;
    variableWidth?: boolean;
    useCSS?: boolean;
    dotPosition?: "left" | "right" | "bottom" | "top";
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    slick: any;
    innerSlider: any;
}, unknown, {}, {
    getDotPosition(): "left" | "right" | "bottom" | "top";
    saveSlick(node: HTMLElement): void;
    onWindowResized(): void;
    next(): void;
    prev(): void;
    goTo(slide: number, dontAnimate?: boolean): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    draggable: boolean;
    responsive: unknown[];
    dots: boolean;
    easing: string;
    beforeChange: (...args: any[]) => any;
    afterChange: (...args: any[]) => any;
    arrows: boolean;
    autoplaySpeed: number;
    centerPadding: string;
    cssEase: string;
    dotsClass: string;
    initialSlide: number;
    slide: string;
    slidesToShow: number;
    slidesToScroll: number;
    speed: number;
    touchThreshold: number;
    slickGoTo: number;
    verticalSwiping: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
