import { ExtractPropTypes, FunctionalComponent } from 'vue';
export declare const ListItemProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    extra: import("vue-types").VueTypeValidableDef<any>;
    actions: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    grid: import("vue-types").VueTypeValidableDef<any>;
};
export declare const ListItemMetaProps: {
    avatar: import("vue-types").VueTypeValidableDef<any>;
    description: import("vue-types").VueTypeValidableDef<any>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    title: import("vue-types").VueTypeValidableDef<any>;
};
export declare const ListItemMeta: FunctionalComponent<Partial<ExtractPropTypes<typeof ListItemMetaProps>>>;
export interface ListContext {
    grid?: any;
    itemLayout?: string;
}
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    extra: import("vue-types").VueTypeValidableDef<any>;
    actions: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    grid: import("vue-types").VueTypeValidableDef<any>;
}, {
    listContext: ListContext;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, unknown, {}, {
    isItemContainsTextNodeAndNotSingular(): boolean;
    isFlexMode(): boolean;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    prefixCls: string;
    actions: unknown[];
} & {
    grid?: any;
    extra?: any;
}>, {
    prefixCls: string;
    actions: unknown[];
}>;
export default _default;
