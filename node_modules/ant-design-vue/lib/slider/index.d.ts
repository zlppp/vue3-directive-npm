import { VNodeTypes } from 'vue';
export declare type SliderValue = number | [number, number];
interface HandleGeneratorInfo {
    value: number;
    dragging: boolean;
    index: number;
    rest: any[];
}
export declare type HandleGeneratorFn = (config: {
    tooltipPrefixCls?: string;
    prefixCls?: string;
    info: HandleGeneratorInfo;
}) => VNodeTypes;
export declare const SliderProps: () => {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    tooltipPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    range: import("vue-types").VueTypeValidableDef<boolean>;
    reverse: import("vue-types").VueTypeValidableDef<boolean>;
    min: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    max: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    step: import("vue-types").VueTypeValidableDef<any>;
    marks: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    dots: import("vue-types").VueTypeValidableDef<boolean>;
    value: import("vue-types").VueTypeDef<number | number[]>;
    defaultValue: import("vue-types").VueTypeDef<number | number[]>;
    included: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    vertical: import("vue-types").VueTypeValidableDef<boolean>;
    tipFormatter: import("vue-types").VueTypeDef<any>;
    tooltipVisible: import("vue-types").VueTypeValidableDef<boolean>;
    tooltipPlacement: import("vue-types").VueTypeDef<"left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom"> & {
        default: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    };
    getTooltipPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onAfterChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            visibles: {};
        };
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            max: number;
            min: number;
            tooltipPrefixCls: string;
            marks: {
                [key: string]: any;
            };
            tooltipPlacement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            getTooltipPopupContainer: (...args: any[]) => any;
            onAfterChange: (...args: any[]) => any;
        }> & Omit<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            max: number;
            min: number;
            tooltipPrefixCls: string;
            marks: {
                [key: string]: any;
            };
            tooltipPlacement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            getTooltipPopupContainer: (...args: any[]) => any;
            onAfterChange: (...args: any[]) => any;
        } & {
            value?: number | number[];
            reverse?: boolean;
            vertical?: boolean;
            range?: boolean;
            disabled?: boolean;
            defaultValue?: number | number[];
            step?: any;
            dots?: boolean;
            included?: boolean;
            tipFormatter?: any;
            tooltipVisible?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "prefixCls" | "max" | "min" | "tooltipPrefixCls" | "marks" | "tooltipPlacement" | "getTooltipPopupContainer" | "onAfterChange">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "update:value", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            max: number;
            min: number;
            tooltipPrefixCls: string;
            marks: {
                [key: string]: any;
            };
            tooltipPlacement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            getTooltipPopupContainer: (...args: any[]) => any;
            onAfterChange: (...args: any[]) => any;
        } & {
            value?: number | number[];
            reverse?: boolean;
            vertical?: boolean;
            range?: boolean;
            disabled?: boolean;
            defaultValue?: number | number[];
            step?: any;
            dots?: boolean;
            included?: boolean;
            tipFormatter?: any;
            tooltipVisible?: boolean;
        }>, {
            vcSlider: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            visibles: {};
        }, {}, {
            toggleTooltipVisible(index: number, visible: boolean): void;
            handleWithTooltip(tooltipPrefixCls: string, prefixCls: string, { value, dragging, index, ...restProps }: HandleGeneratorInfo): VNodeTypes;
            saveSlider(node: any): void;
            focus(): void;
            blur(): void;
            handleChange(val: SliderValue): void;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, ("change" | "update:value")[], string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            max: number;
            min: number;
            tooltipPrefixCls: string;
            marks: {
                [key: string]: any;
            };
            tooltipPlacement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
            getTooltipPopupContainer: (...args: any[]) => any;
            onAfterChange: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        prefixCls: string;
        max: number;
        min: number;
        tooltipPrefixCls: string;
        marks: {
            [key: string]: any;
        };
        tooltipPlacement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
        getTooltipPopupContainer: (...args: any[]) => any;
        onAfterChange: (...args: any[]) => any;
    } & {
        value?: number | number[];
        reverse?: boolean;
        vertical?: boolean;
        range?: boolean;
        disabled?: boolean;
        defaultValue?: number | number[];
        step?: any;
        dots?: boolean;
        included?: boolean;
        tipFormatter?: any;
        tooltipVisible?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        vcSlider: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        visibles: {};
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        toggleTooltipVisible(index: number, visible: boolean): void;
        handleWithTooltip(tooltipPrefixCls: string, prefixCls: string, { value, dragging, index, ...restProps }: HandleGeneratorInfo): VNodeTypes;
        saveSlider(node: any): void;
        focus(): void;
        blur(): void;
        handleChange(val: SliderValue): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    max: number;
    min: number;
    tooltipPrefixCls: string;
    marks: {
        [key: string]: any;
    };
    tooltipPlacement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    getTooltipPopupContainer: (...args: any[]) => any;
    onAfterChange: (...args: any[]) => any;
} & {
    value?: number | number[];
    reverse?: boolean;
    vertical?: boolean;
    range?: boolean;
    disabled?: boolean;
    defaultValue?: number | number[];
    step?: any;
    dots?: boolean;
    included?: boolean;
    tipFormatter?: any;
    tooltipVisible?: boolean;
}>, {
    vcSlider: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    visibles: {};
}, {}, {
    toggleTooltipVisible(index: number, visible: boolean): void;
    handleWithTooltip(tooltipPrefixCls: string, prefixCls: string, { value, dragging, index, ...restProps }: HandleGeneratorInfo): VNodeTypes;
    saveSlider(node: any): void;
    focus(): void;
    blur(): void;
    handleChange(val: SliderValue): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, ("change" | "update:value")[], "change" | "update:value", {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    max: number;
    min: number;
    tooltipPrefixCls: string;
    marks: {
        [key: string]: any;
    };
    tooltipPlacement: "left" | "right" | "bottom" | "top" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    getTooltipPopupContainer: (...args: any[]) => any;
    onAfterChange: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
