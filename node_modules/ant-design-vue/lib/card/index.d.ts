import { Plugin } from 'vue';
import Meta from './Meta';
import Grid from './Grid';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            widerPadding: boolean;
        };
        $props: Partial<{
            prefixCls: string;
            type: string;
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            activeTabKey: string;
            defaultActiveTabKey: string;
        }> & Omit<Readonly<{
            prefixCls: string;
            type: string;
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            activeTabKey: string;
            defaultActiveTabKey: string;
        } & {
            title?: import("../_util/type").VueNode;
            cover?: import("../_util/type").VueNode;
            size?: "default" | "small";
            bodyStyle?: import("vue").CSSProperties;
            tabBarExtraContent?: import("../_util/type").VueNode;
            extra?: import("../_util/type").VueNode;
            headStyle?: import("vue").CSSProperties;
            actions?: import("../_util/type").VueNode;
            tabList?: import("./Card").CardTabListType[];
            onTabChange?: (key: string) => void;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "type" | "loading" | "bordered" | "hoverable" | "activeTabKey" | "defaultActiveTabKey">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            type: string;
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            activeTabKey: string;
            defaultActiveTabKey: string;
        } & {
            title?: import("../_util/type").VueNode;
            cover?: import("../_util/type").VueNode;
            size?: "default" | "small";
            bodyStyle?: import("vue").CSSProperties;
            tabBarExtraContent?: import("../_util/type").VueNode;
            extra?: import("../_util/type").VueNode;
            headStyle?: import("vue").CSSProperties;
            actions?: import("../_util/type").VueNode;
            tabList?: import("./Card").CardTabListType[];
            onTabChange?: (key: string) => void;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            widerPadding: boolean;
        }, {}, {
            getAction(actions: import("vue").VNodeTypes[]): JSX.Element[];
            triggerTabChange(key: string): void;
            isContainGrid(obj?: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]): boolean;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            type: string;
            loading: boolean;
            bordered: boolean;
            hoverable: boolean;
            activeTabKey: string;
            defaultActiveTabKey: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        type: string;
        loading: boolean;
        bordered: boolean;
        hoverable: boolean;
        activeTabKey: string;
        defaultActiveTabKey: string;
    } & {
        title?: import("../_util/type").VueNode;
        cover?: import("../_util/type").VueNode;
        size?: "default" | "small";
        bodyStyle?: import("vue").CSSProperties;
        tabBarExtraContent?: import("../_util/type").VueNode;
        extra?: import("../_util/type").VueNode;
        headStyle?: import("vue").CSSProperties;
        actions?: import("../_util/type").VueNode;
        tabList?: import("./Card").CardTabListType[];
        onTabChange?: (key: string) => void;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        widerPadding: boolean;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        getAction(actions: import("vue").VNodeTypes[]): JSX.Element[];
        triggerTabChange(key: string): void;
        isContainGrid(obj?: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]): boolean;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    type: string;
    loading: boolean;
    bordered: boolean;
    hoverable: boolean;
    activeTabKey: string;
    defaultActiveTabKey: string;
} & {
    title?: import("../_util/type").VueNode;
    cover?: import("../_util/type").VueNode;
    size?: "default" | "small";
    bodyStyle?: import("vue").CSSProperties;
    tabBarExtraContent?: import("../_util/type").VueNode;
    extra?: import("../_util/type").VueNode;
    headStyle?: import("vue").CSSProperties;
    actions?: import("../_util/type").VueNode;
    tabList?: import("./Card").CardTabListType[];
    onTabChange?: (key: string) => void;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    widerPadding: boolean;
}, {}, {
    getAction(actions: import("vue").VNodeTypes[]): JSX.Element[];
    triggerTabChange(key: string): void;
    isContainGrid(obj?: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]): boolean;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    type: string;
    loading: boolean;
    bordered: boolean;
    hoverable: boolean;
    activeTabKey: string;
    defaultActiveTabKey: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Meta: typeof Meta;
    readonly Grid: typeof Grid;
};
export default _default;
