declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            isImgExist: boolean;
            isMounted: boolean;
            scale: number;
            lastChildrenWidth: any;
            lastNodeWidth: any;
        };
        $props: Partial<{
            prefixCls: string;
            size: number | "default" | "small" | "large";
            src: string;
            srcset: string;
            srcSet: string;
            alt: string;
        }> & Omit<Readonly<{
            prefixCls: string;
            size: number | "default" | "small" | "large";
            src: string;
            srcset: string;
            srcSet: string;
            alt: string;
        } & {
            icon?: import("../_util/type").VueNode;
            shape?: "circle" | "square";
            loadError?: () => boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "prefixCls" | "size" | "src" | "srcset" | "srcSet" | "alt">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            size: number | "default" | "small" | "large";
            src: string;
            srcset: string;
            srcSet: string;
            alt: string;
        } & {
            icon?: import("../_util/type").VueNode;
            shape?: "circle" | "square";
            loadError?: () => boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            isImgExist: boolean;
            isMounted: boolean;
            scale: number;
            lastChildrenWidth: any;
            lastNodeWidth: any;
        }, {}, {
            setScale(): void;
            handleImgLoadError(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            size: number | "default" | "small" | "large";
            src: string;
            srcset: string;
            srcSet: string;
            alt: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        size: number | "default" | "small" | "large";
        src: string;
        srcset: string;
        srcSet: string;
        alt: string;
    } & {
        icon?: import("../_util/type").VueNode;
        shape?: "circle" | "square";
        loadError?: () => boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        isImgExist: boolean;
        isMounted: boolean;
        scale: number;
        lastChildrenWidth: any;
        lastNodeWidth: any;
    } & {} & {
        setScale(): void;
        handleImgLoadError(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    size: number | "default" | "small" | "large";
    src: string;
    srcset: string;
    srcSet: string;
    alt: string;
} & {
    icon?: import("../_util/type").VueNode;
    shape?: "circle" | "square";
    loadError?: () => boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    isImgExist: boolean;
    isMounted: boolean;
    scale: number;
    lastChildrenWidth: any;
    lastNodeWidth: any;
}, {}, {
    setScale(): void;
    handleImgLoadError(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    size: number | "default" | "small" | "large";
    src: string;
    srcset: string;
    srcSet: string;
    alt: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin;
export default _default;
