declare var _default: import("vue").DefineComponent<{
    childrenProps: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        required: true;
    };
    target: import("vue-types").VueTypeDef<any> & {
        default: any;
    };
    monitorBufferTime: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    monitorWindowResize: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
}, {
    aligned: boolean;
    sourceResizeMonitor: {
        cancel: () => void;
    };
    resizeMonitor: {
        cancel: () => void;
    };
    cacheInfo: {};
}, {
    forceAlign: (force?: boolean) => void;
    cancelForceAlign: (force?: boolean) => void;
}, {}, {
    updateCache(): void;
    startMonitorElementResize(): void;
    startMonitorWindowResize(): void;
    stopMonitorWindowResize(): void;
    goAlign(): boolean;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    disabled: boolean;
    align: {
        [key: string]: any;
    };
    target: any;
    childrenProps: {
        [key: string]: any;
    };
    monitorBufferTime: number;
    monitorWindowResize: boolean;
} & {}>, {
    disabled: boolean;
    align: {
        [key: string]: any;
    };
    target: any;
    childrenProps: {
        [key: string]: any;
    };
    monitorBufferTime: number;
    monitorWindowResize: boolean;
}>;
export default _default;
