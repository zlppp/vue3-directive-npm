import { Plugin } from 'vue';
import Dragger from './Dragger';
export { UploadProps, UploadListProps, UploadChangeParam } from './interface';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            sFileList: {
                uid: any;
                name: any;
            }[];
            dragState: string;
        };
        $props: Partial<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            height: number;
            id: string;
            name: string;
            remove: (...args: any[]) => any;
            previewFile: (...args: any[]) => any;
            onPreview: (...args: any[]) => any;
            onDownload: (...args: any[]) => any;
            headers: {
                [key: string]: any;
            };
            accept: string;
            beforeUpload: (...args: any[]) => any;
            customRequest: (...args: any[]) => any;
            transformFile: (...args: any[]) => any;
            onRemove: (...args: any[]) => any;
            "onUpdate:fileList": (...args: any[]) => any;
        }> & Omit<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            height: number;
            id: string;
            name: string;
            remove: (...args: any[]) => any;
            previewFile: (...args: any[]) => any;
            onPreview: (...args: any[]) => any;
            onDownload: (...args: any[]) => any;
            headers: {
                [key: string]: any;
            };
            accept: string;
            beforeUpload: (...args: any[]) => any;
            customRequest: (...args: any[]) => any;
            transformFile: (...args: any[]) => any;
            onRemove: (...args: any[]) => any;
            "onUpdate:fileList": (...args: any[]) => any;
        } & {
            locale?: {
                uploading: (string | ((props: Record<string, unknown>) => string)) & string;
                removeFile: (string | ((props: Record<string, unknown>) => string)) & string;
                downloadFile: (string | ((props: Record<string, unknown>) => string)) & string;
                uploadError: (string | ((props: Record<string, unknown>) => string)) & string;
                previewFile: (string | ((props: Record<string, unknown>) => string)) & string;
            };
            data?: any;
            multiple?: boolean;
            disabled?: boolean;
            type?: "select" | "drag";
            action?: any;
            method?: "post" | "POST" | "PUT" | "put";
            listType?: "picture" | "text" | "picture-card";
            defaultFileList?: {
                uid: any;
                name: any;
            }[];
            fileList?: {
                uid: any;
                name: any;
            }[];
            directory?: boolean;
            showUploadList?: boolean | {
                showRemoveIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                showPreviewIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            };
            supportServerRender?: boolean;
            withCredentials?: boolean;
            openFileDialogOnClick?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "onChange" | "prefixCls" | "height" | "id" | "name" | "remove" | "previewFile" | "onPreview" | "onDownload" | "headers" | "accept" | "beforeUpload" | "customRequest" | "transformFile" | "onRemove" | "onUpdate:fileList">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onChange: (...args: any[]) => any;
            prefixCls: string;
            height: number;
            id: string;
            name: string;
            remove: (...args: any[]) => any;
            previewFile: (...args: any[]) => any;
            onPreview: (...args: any[]) => any;
            onDownload: (...args: any[]) => any;
            headers: {
                [key: string]: any;
            };
            accept: string;
            beforeUpload: (...args: any[]) => any;
            customRequest: (...args: any[]) => any;
            transformFile: (...args: any[]) => any;
            onRemove: (...args: any[]) => any;
            "onUpdate:fileList": (...args: any[]) => any;
        } & {
            locale?: {
                uploading: (string | ((props: Record<string, unknown>) => string)) & string;
                removeFile: (string | ((props: Record<string, unknown>) => string)) & string;
                downloadFile: (string | ((props: Record<string, unknown>) => string)) & string;
                uploadError: (string | ((props: Record<string, unknown>) => string)) & string;
                previewFile: (string | ((props: Record<string, unknown>) => string)) & string;
            };
            data?: any;
            multiple?: boolean;
            disabled?: boolean;
            type?: "select" | "drag";
            action?: any;
            method?: "post" | "POST" | "PUT" | "put";
            listType?: "picture" | "text" | "picture-card";
            defaultFileList?: {
                uid: any;
                name: any;
            }[];
            fileList?: {
                uid: any;
                name: any;
            }[];
            directory?: boolean;
            showUploadList?: boolean | {
                showRemoveIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                showPreviewIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            };
            supportServerRender?: boolean;
            withCredentials?: boolean;
            openFileDialogOnClick?: boolean;
        }>, {
            upload: any;
            progressTimer: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            sFileList: {
                uid: any;
                name: any;
            }[];
            dragState: string;
        }, {}, {
            onStart(file: any): void;
            onSuccess(response: any, file: any, xhr: any): void;
            onProgress(e: any, file: any): void;
            onError(error: any, response: any, file: any): void;
            onReject(fileList: any): void;
            handleRemove(file: any): void;
            handleManualRemove(file: any): void;
            handleChange(info: any): void;
            onFileDrop(e: any): void;
            reBeforeUpload(file: any, fileList: any): any;
            clearProgressTimer(): void;
            autoUpdateProgress(_: any, file: any): void;
            renderUploadList(locale: any): JSX.Element;
        }, {
            methods: {
                setState(state: {}, callback: any): void;
                __emit(...args: any[]): void;
            };
        }, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            onChange: (...args: any[]) => any;
            prefixCls: string;
            height: number;
            id: string;
            name: string;
            remove: (...args: any[]) => any;
            previewFile: (...args: any[]) => any;
            onPreview: (...args: any[]) => any;
            onDownload: (...args: any[]) => any;
            headers: {
                [key: string]: any;
            };
            accept: string;
            beforeUpload: (...args: any[]) => any;
            customRequest: (...args: any[]) => any;
            transformFile: (...args: any[]) => any;
            onRemove: (...args: any[]) => any;
            "onUpdate:fileList": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onChange: (...args: any[]) => any;
        prefixCls: string;
        height: number;
        id: string;
        name: string;
        remove: (...args: any[]) => any;
        previewFile: (...args: any[]) => any;
        onPreview: (...args: any[]) => any;
        onDownload: (...args: any[]) => any;
        headers: {
            [key: string]: any;
        };
        accept: string;
        beforeUpload: (...args: any[]) => any;
        customRequest: (...args: any[]) => any;
        transformFile: (...args: any[]) => any;
        onRemove: (...args: any[]) => any;
        "onUpdate:fileList": (...args: any[]) => any;
    } & {
        locale?: {
            uploading: (string | ((props: Record<string, unknown>) => string)) & string;
            removeFile: (string | ((props: Record<string, unknown>) => string)) & string;
            downloadFile: (string | ((props: Record<string, unknown>) => string)) & string;
            uploadError: (string | ((props: Record<string, unknown>) => string)) & string;
            previewFile: (string | ((props: Record<string, unknown>) => string)) & string;
        };
        data?: any;
        multiple?: boolean;
        disabled?: boolean;
        type?: "select" | "drag";
        action?: any;
        method?: "post" | "POST" | "PUT" | "put";
        listType?: "picture" | "text" | "picture-card";
        defaultFileList?: {
            uid: any;
            name: any;
        }[];
        fileList?: {
            uid: any;
            name: any;
        }[];
        directory?: boolean;
        showUploadList?: boolean | {
            showRemoveIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            showPreviewIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        };
        supportServerRender?: boolean;
        withCredentials?: boolean;
        openFileDialogOnClick?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        upload: any;
        progressTimer: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        sFileList: {
            uid: any;
            name: any;
        }[];
        dragState: string;
    } & {
        [x: string]: never;
    } & {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    } & {
        onStart(file: any): void;
        onSuccess(response: any, file: any, xhr: any): void;
        onProgress(e: any, file: any): void;
        onError(error: any, response: any, file: any): void;
        onReject(fileList: any): void;
        handleRemove(file: any): void;
        handleManualRemove(file: any): void;
        handleChange(info: any): void;
        onFileDrop(e: any): void;
        reBeforeUpload(file: any, fileList: any): any;
        clearProgressTimer(): void;
        autoUpdateProgress(_: any, file: any): void;
        renderUploadList(locale: any): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onChange: (...args: any[]) => any;
    prefixCls: string;
    height: number;
    id: string;
    name: string;
    remove: (...args: any[]) => any;
    previewFile: (...args: any[]) => any;
    onPreview: (...args: any[]) => any;
    onDownload: (...args: any[]) => any;
    headers: {
        [key: string]: any;
    };
    accept: string;
    beforeUpload: (...args: any[]) => any;
    customRequest: (...args: any[]) => any;
    transformFile: (...args: any[]) => any;
    onRemove: (...args: any[]) => any;
    "onUpdate:fileList": (...args: any[]) => any;
} & {
    locale?: {
        uploading: (string | ((props: Record<string, unknown>) => string)) & string;
        removeFile: (string | ((props: Record<string, unknown>) => string)) & string;
        downloadFile: (string | ((props: Record<string, unknown>) => string)) & string;
        uploadError: (string | ((props: Record<string, unknown>) => string)) & string;
        previewFile: (string | ((props: Record<string, unknown>) => string)) & string;
    };
    data?: any;
    multiple?: boolean;
    disabled?: boolean;
    type?: "select" | "drag";
    action?: any;
    method?: "post" | "POST" | "PUT" | "put";
    listType?: "picture" | "text" | "picture-card";
    defaultFileList?: {
        uid: any;
        name: any;
    }[];
    fileList?: {
        uid: any;
        name: any;
    }[];
    directory?: boolean;
    showUploadList?: boolean | {
        showRemoveIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        showPreviewIcon: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
    };
    supportServerRender?: boolean;
    withCredentials?: boolean;
    openFileDialogOnClick?: boolean;
}>, {
    upload: any;
    progressTimer: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    sFileList: {
        uid: any;
        name: any;
    }[];
    dragState: string;
}, {}, {
    onStart(file: any): void;
    onSuccess(response: any, file: any, xhr: any): void;
    onProgress(e: any, file: any): void;
    onError(error: any, response: any, file: any): void;
    onReject(fileList: any): void;
    handleRemove(file: any): void;
    handleManualRemove(file: any): void;
    handleChange(info: any): void;
    onFileDrop(e: any): void;
    reBeforeUpload(file: any, fileList: any): any;
    clearProgressTimer(): void;
    autoUpdateProgress(_: any, file: any): void;
    renderUploadList(locale: any): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    onChange: (...args: any[]) => any;
    prefixCls: string;
    height: number;
    id: string;
    name: string;
    remove: (...args: any[]) => any;
    previewFile: (...args: any[]) => any;
    onPreview: (...args: any[]) => any;
    onDownload: (...args: any[]) => any;
    headers: {
        [key: string]: any;
    };
    accept: string;
    beforeUpload: (...args: any[]) => any;
    customRequest: (...args: any[]) => any;
    transformFile: (...args: any[]) => any;
    onRemove: (...args: any[]) => any;
    "onUpdate:fileList": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Dragger: typeof Dragger;
};
export default _default;
