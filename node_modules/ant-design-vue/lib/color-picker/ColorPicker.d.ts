declare namespace _default {
    const name: string;
    const mixins: {
        methods: {
            setState(state: {}, callback: any): void;
            __emit(...args: any[]): void;
        };
    }[];
    namespace inject {
        namespace configProvider {
            function _default(): import("../config-provider").ConfigConsumerProps;
            export { _default as default };
        }
    }
    namespace model {
        const prop: string;
        const event: string;
    }
    namespace props {
        const prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        const defaultValue: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        const config: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        };
        const value: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        const locale: import("vue-types").VueTypeValidableDef<{
            [key: string]: any;
        }> & {
            default: () => {
                [key: string]: any;
            };
        };
        const colorRounded: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        const size: import("vue-types").VueTypeDef<string> & {
            default: string;
        };
        const getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
            default: (...args: any[]) => any;
        };
        const disabled: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        };
        const format: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        const alpha: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        };
        const hue: import("vue-types").VueTypeValidableDef<boolean> & {
            default: boolean;
        };
    }
    function data(): {
        colors: string;
        myOpen: boolean;
        pickr: any;
        i18n: {
            'btn:save': string;
            'btn:cancel': string;
            'btn:clear': string;
        };
    };
    function data(): {
        colors: string;
        myOpen: boolean;
        pickr: any;
        i18n: {
            'btn:save': string;
            'btn:cancel': string;
            'btn:clear': string;
        };
    };
    const watch: {
        'configProvider.locale.ColorPicker': {
            handler(val: any): void;
        };
        locale(val: any): void;
        value(val: any): void;
        disabled(val: any): void;
        config: {
            handler(): void;
            deep: boolean;
        };
        format(val: any): void;
    };
    function mounted(): void;
    function mounted(): void;
    function unmounted(): void;
    function unmounted(): void;
    namespace methods {
        function reInitialize(): void;
        function reInitialize(): void;
        const setColor: import("lodash").DebouncedFunc<(val: any) => void>;
        function eventsBinding(): void;
        function eventsBinding(): void;
        function createPickr(): void;
        function createPickr(): void;
        function handleOpenChange(): void;
        function handleOpenChange(): void;
        function getDefaultLocale(): any;
        function getDefaultLocale(): any;
        function renderColorPicker(): JSX.Element;
        function renderColorPicker(): JSX.Element;
    }
    function render(): JSX.Element;
    function render(): JSX.Element;
}
export default _default;
