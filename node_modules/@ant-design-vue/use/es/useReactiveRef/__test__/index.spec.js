import * as _vue from "vue";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { shallowMount } from '@vue/test-utils';
import useReactiveRef from '../index';
import { ref } from 'vue';
describe('useReactiveRef', function () {
  test('should work with custom event', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var _useReactiveRef, _useReactiveRef2, eleRef, setEle, showH1, wrapper;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _useReactiveRef = useReactiveRef(), _useReactiveRef2 = _slicedToArray(_useReactiveRef, 2), eleRef = _useReactiveRef2[0], setEle = _useReactiveRef2[1];
            showH1 = ref(false);
            wrapper = shallowMount({
              setup: function setup() {
                return function () {
                  return _vue.createVNode(_vue.Fragment, null, [showH1.value ? _vue.createVNode("h1", {
                    "ref": setEle
                  }, null) : null, _vue.createVNode("h1", {
                    "ref": "setEle"
                  }, null)]);
                };
              }
            });
            expect(eleRef.value).toEqual(null);
            showH1.value = true;
            _context.next = 7;
            return wrapper.vm.$nextTick();

          case 7:
            expect(eleRef.value).toBe(wrapper.find('h1').element);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
});