import * as _vue from "vue";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { defineComponent } from 'vue';
import useDraggable from '../index';
export default defineComponent({
  setup: function setup() {
    var _useDraggable = useDraggable({
      controlStyle: true
    }),
        _useDraggable2 = _slicedToArray(_useDraggable, 3),
        targetRef = _useDraggable2[0],
        handleRef = _useDraggable2[1],
        delta = _useDraggable2[2].delta;

    return function () {
      return _vue.createVNode(_vue.Fragment, null, [_vue.createVNode("div", {
        "style": "height:100px;width:100px;background: #999;",
        "ref": targetRef
      }, [_vue.createVNode("button", {
        "ref": handleRef
      }, [_vue.createTextVNode("handle")])]), _vue.createVNode("h2", null, [delta.value.x]), _vue.createVNode("h2", null, [delta.value.y])]);
    };
  }
});