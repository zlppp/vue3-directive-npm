"use strict";

var _vue = _interopRequireWildcard(require("vue"));

var _testUtils = require("@vue/test-utils");

var _index = _interopRequireDefault(require("../index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('useScroll', function () {
  it('define', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var elem, scroll, wrapper;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            elem = document.createElement('div');
            elem.style.height = '100px';

            if (document.body) {
              document.body.appendChild(elem);
            }

            wrapper = (0, _testUtils.mount)({
              setup: function setup() {
                scroll = (0, _index["default"])((0, _vue.ref)(elem));
                return {};
              },
              render: function render() {
                return _vue.createVNode("h1", {
                  "style": {
                    height: '999px'
                  }
                }, null);
              }
            }, {
              attachTo: elem
            });
            _context.next = 6;
            return wrapper.vm.$nextTick();

          case 6:
            // elem did not trigger scroll
            elem.scrollTop = 120;
            _context.next = 9;
            return wrapper.vm.$nextTick();

          case 9:
            expect(scroll.value.left).toBe(0);
            expect(scroll.value.top).toBe(0);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }))); // it('define2', async () => {
  //     const el = ref(null)
  //     const scroll = useScroll(el)
  //     const wrapper = mount({
  //         setup() {
  //             return { el }
  //         },
  //         render() {
  //             return (
  //                 <div ref='el' style='height:120px;overflow: scroll;'>
  //                     <h1 style='height:999px'>sad</h1>
  //                 </div>
  //             )
  //         }
  //     })
  //     await wrapper.vm.$nextTick()
  //     el.value.scrollTop = 100
  //     // elem did not trigger scroll
  //     await wrapper.vm.$nextTick()
  //     expect(scroll.value.left).toBe(0);
  //     expect(scroll.value.top).toBe(0);
  // });
});