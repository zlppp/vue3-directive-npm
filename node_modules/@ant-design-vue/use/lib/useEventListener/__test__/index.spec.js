"use strict";

var _vue = _interopRequireWildcard(require("vue"));

var _testUtils = require("@vue/test-utils");

var _index = _interopRequireDefault(require("../index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('useEventListener', function () {
  test('should work with Ref<HTMLElement> parameter', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var clickFn, eleRef, removeListener, wrapper;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            clickFn = jest.fn(function () {});
            eleRef = (0, _vue.ref)(null);
            wrapper = (0, _testUtils.shallowMount)({
              setup: function setup() {
                removeListener = (0, _index["default"])(eleRef, {
                  type: 'click',
                  listener: clickFn
                });
                return {
                  eleRef: eleRef
                };
              },
              render: function render() {
                return _vue.createVNode(_vue.Fragment, null, [_vue.createVNode("h1", {
                  "ref": "eleRef"
                }, [_vue.createTextVNode("click")])]);
              }
            });
            _context.next = 5;
            return wrapper.vm.$nextTick();

          case 5:
            expect(clickFn).toHaveBeenCalledTimes(0);
            wrapper.find('h1').trigger('click');
            expect(clickFn).toHaveBeenCalledTimes(1);
            removeListener();
            wrapper.find('h1').trigger('click');
            expect(clickFn).toHaveBeenCalledTimes(1);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  test('should work with HTMLElement parameter', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var clickFn, eleRef, removeListener, wrapper;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            clickFn = jest.fn(function () {});
            eleRef = (0, _vue.ref)(null);
            wrapper = (0, _testUtils.shallowMount)({
              setup: function setup() {
                removeListener = (0, _index["default"])(eleRef, {
                  type: 'click',
                  listener: clickFn
                });
                return {
                  eleRef: eleRef
                };
              },
              render: function render() {
                return _vue.createVNode(_vue.Fragment, null, [_vue.createVNode("h1", {
                  "ref": "eleRef"
                }, [_vue.createTextVNode("click")])]);
              }
            });
            _context2.next = 5;
            return wrapper.vm.$nextTick();

          case 5:
            expect(clickFn).toHaveBeenCalledTimes(0);
            wrapper.find('h1').trigger('click');
            expect(clickFn).toHaveBeenCalledTimes(1);
            removeListener();
            wrapper.find('h1').trigger('click');
            expect(clickFn).toHaveBeenCalledTimes(1);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
});